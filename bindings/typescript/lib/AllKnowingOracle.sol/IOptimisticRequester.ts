/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type RequestStruct = {
  requester: PromiseOrValue<string>;
  proposer: PromiseOrValue<string>;
  disputer: PromiseOrValue<string>;
  currency: PromiseOrValue<string>;
  bond: PromiseOrValue<BigNumberish>;
  state: PromiseOrValue<BigNumberish>;
  answer: PromiseOrValue<boolean>;
  data: PromiseOrValue<BytesLike>;
};

export type RequestStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  number,
  boolean,
  string
] & {
  requester: string;
  proposer: string;
  disputer: string;
  currency: string;
  bond: BigNumber;
  state: number;
  answer: boolean;
  data: string;
};

export interface IOptimisticRequesterInterface extends utils.Interface {
  functions: {
    "onPriceSettled(bytes32,(address,address,address,address,uint256,uint8,bool,bytes))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "onPriceSettled"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "onPriceSettled",
    values: [PromiseOrValue<BytesLike>, RequestStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "onPriceSettled",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IOptimisticRequester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOptimisticRequesterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    onPriceSettled(
      id: PromiseOrValue<BytesLike>,
      request: RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  onPriceSettled(
    id: PromiseOrValue<BytesLike>,
    request: RequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    onPriceSettled(
      id: PromiseOrValue<BytesLike>,
      request: RequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    onPriceSettled(
      id: PromiseOrValue<BytesLike>,
      request: RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    onPriceSettled(
      id: PromiseOrValue<BytesLike>,
      request: RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
