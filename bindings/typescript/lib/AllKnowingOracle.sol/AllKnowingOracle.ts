/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface AllKnowingOracleInterface extends utils.Interface {
  functions: {
    "ask(address,address,address,uint256,bytes)": FunctionFragment;
    "getRequestId(address,address,address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "requesters(address)": FunctionFragment;
    "requests(bytes32)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "settle(bytes32,bool)": FunctionFragment;
    "settlers(address)": FunctionFragment;
    "whitelistRequester(address,bool)": FunctionFragment;
    "whitelistSettler(address,bool)": FunctionFragment;
    "whitelistToken(address,bool)": FunctionFragment;
    "whitelistedTokens(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ask"
      | "getRequestId"
      | "owner"
      | "requesters"
      | "requests"
      | "setOwner"
      | "settle"
      | "settlers"
      | "whitelistRequester"
      | "whitelistSettler"
      | "whitelistToken"
      | "whitelistedTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ask",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestId",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requesters",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "settlers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRequester",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistSettler",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistToken",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTokens",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "ask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requesters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settlers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRequester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistSettler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTokens",
    data: BytesLike
  ): Result;

  events: {
    "NewRequest(bytes32,address,address,address,uint256)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
    "RequestSettled(bytes32,bool)": EventFragment;
    "RequesterWhitelisted(address,bool)": EventFragment;
    "SettlerWhitelisted(address,bool)": EventFragment;
    "TokenWhitelisted(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequesterWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlerWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWhitelisted"): EventFragment;
}

export interface NewRequestEventObject {
  id: string;
  proposer: string;
  disputer: string;
  currency: string;
  bond: BigNumber;
}
export type NewRequestEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  NewRequestEventObject
>;

export type NewRequestEventFilter = TypedEventFilter<NewRequestEvent>;

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface RequestSettledEventObject {
  id: string;
  answer: boolean;
}
export type RequestSettledEvent = TypedEvent<
  [string, boolean],
  RequestSettledEventObject
>;

export type RequestSettledEventFilter = TypedEventFilter<RequestSettledEvent>;

export interface RequesterWhitelistedEventObject {
  requester: string;
  enabled: boolean;
}
export type RequesterWhitelistedEvent = TypedEvent<
  [string, boolean],
  RequesterWhitelistedEventObject
>;

export type RequesterWhitelistedEventFilter =
  TypedEventFilter<RequesterWhitelistedEvent>;

export interface SettlerWhitelistedEventObject {
  settler: string;
  enabled: boolean;
}
export type SettlerWhitelistedEvent = TypedEvent<
  [string, boolean],
  SettlerWhitelistedEventObject
>;

export type SettlerWhitelistedEventFilter =
  TypedEventFilter<SettlerWhitelistedEvent>;

export interface TokenWhitelistedEventObject {
  token: string;
  enabled: boolean;
}
export type TokenWhitelistedEvent = TypedEvent<
  [string, boolean],
  TokenWhitelistedEventObject
>;

export type TokenWhitelistedEventFilter =
  TypedEventFilter<TokenWhitelistedEvent>;

export interface AllKnowingOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AllKnowingOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ask(
      proposer: PromiseOrValue<string>,
      disputer: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      bond: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRequestId(
      sender: PromiseOrValue<string>,
      proposer: PromiseOrValue<string>,
      disputer: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      bond: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    requesters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, number, boolean, string] & {
        requester: string;
        proposer: string;
        disputer: string;
        currency: string;
        bond: BigNumber;
        state: number;
        answer: boolean;
        data: string;
      }
    >;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settle(
      id: PromiseOrValue<BytesLike>,
      answer: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settlers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistRequester(
      requester: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistSettler(
      settler: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistToken(
      token: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ask(
    proposer: PromiseOrValue<string>,
    disputer: PromiseOrValue<string>,
    currency: PromiseOrValue<string>,
    bond: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRequestId(
    sender: PromiseOrValue<string>,
    proposer: PromiseOrValue<string>,
    disputer: PromiseOrValue<string>,
    currency: PromiseOrValue<string>,
    bond: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  requesters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  requests(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, number, boolean, string] & {
      requester: string;
      proposer: string;
      disputer: string;
      currency: string;
      bond: BigNumber;
      state: number;
      answer: boolean;
      data: string;
    }
  >;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settle(
    id: PromiseOrValue<BytesLike>,
    answer: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settlers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistRequester(
    requester: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistSettler(
    settler: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistToken(
    token: PromiseOrValue<string>,
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistedTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ask(
      proposer: PromiseOrValue<string>,
      disputer: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      bond: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRequestId(
      sender: PromiseOrValue<string>,
      proposer: PromiseOrValue<string>,
      disputer: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      bond: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    requesters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, number, boolean, string] & {
        requester: string;
        proposer: string;
        disputer: string;
        currency: string;
        bond: BigNumber;
        state: number;
        answer: boolean;
        data: string;
      }
    >;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      id: PromiseOrValue<BytesLike>,
      answer: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    settlers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistRequester(
      requester: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistSettler(
      settler: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistToken(
      token: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewRequest(bytes32,address,address,address,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      proposer?: PromiseOrValue<string> | null,
      disputer?: PromiseOrValue<string> | null,
      currency?: null,
      bond?: null
    ): NewRequestEventFilter;
    NewRequest(
      id?: PromiseOrValue<BytesLike> | null,
      proposer?: PromiseOrValue<string> | null,
      disputer?: PromiseOrValue<string> | null,
      currency?: null,
      bond?: null
    ): NewRequestEventFilter;

    "OwnerUpdated(address,address)"(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;

    "RequestSettled(bytes32,bool)"(
      id?: PromiseOrValue<BytesLike> | null,
      answer?: null
    ): RequestSettledEventFilter;
    RequestSettled(
      id?: PromiseOrValue<BytesLike> | null,
      answer?: null
    ): RequestSettledEventFilter;

    "RequesterWhitelisted(address,bool)"(
      requester?: PromiseOrValue<string> | null,
      enabled?: null
    ): RequesterWhitelistedEventFilter;
    RequesterWhitelisted(
      requester?: PromiseOrValue<string> | null,
      enabled?: null
    ): RequesterWhitelistedEventFilter;

    "SettlerWhitelisted(address,bool)"(
      settler?: PromiseOrValue<string> | null,
      enabled?: null
    ): SettlerWhitelistedEventFilter;
    SettlerWhitelisted(
      settler?: PromiseOrValue<string> | null,
      enabled?: null
    ): SettlerWhitelistedEventFilter;

    "TokenWhitelisted(address,bool)"(
      token?: PromiseOrValue<string> | null,
      enabled?: null
    ): TokenWhitelistedEventFilter;
    TokenWhitelisted(
      token?: PromiseOrValue<string> | null,
      enabled?: null
    ): TokenWhitelistedEventFilter;
  };

  estimateGas: {
    ask(
      proposer: PromiseOrValue<string>,
      disputer: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      bond: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRequestId(
      sender: PromiseOrValue<string>,
      proposer: PromiseOrValue<string>,
      disputer: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      bond: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    requesters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settle(
      id: PromiseOrValue<BytesLike>,
      answer: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settlers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistRequester(
      requester: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistSettler(
      settler: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistToken(
      token: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ask(
      proposer: PromiseOrValue<string>,
      disputer: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      bond: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRequestId(
      sender: PromiseOrValue<string>,
      proposer: PromiseOrValue<string>,
      disputer: PromiseOrValue<string>,
      currency: PromiseOrValue<string>,
      bond: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requesters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      id: PromiseOrValue<BytesLike>,
      answer: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settlers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistRequester(
      requester: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistSettler(
      settler: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistToken(
      token: PromiseOrValue<string>,
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
