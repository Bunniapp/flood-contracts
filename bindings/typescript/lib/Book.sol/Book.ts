/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type RequestStruct = {
  requester: PromiseOrValue<string>;
  proposer: PromiseOrValue<string>;
  disputer: PromiseOrValue<string>;
  currency: PromiseOrValue<string>;
  bond: PromiseOrValue<BigNumberish>;
  state: PromiseOrValue<BigNumberish>;
  answer: PromiseOrValue<boolean>;
  data: PromiseOrValue<BytesLike>;
};

export type RequestStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  number,
  boolean,
  string
] & {
  requester: string;
  proposer: string;
  disputer: string;
  currency: string;
  bond: BigNumber;
  state: number;
  answer: boolean;
  data: string;
};

export interface BookInterface extends utils.Interface {
  functions: {
    "cancelTrade(address,address,uint256,uint256,address,uint256,address)": FunctionFragment;
    "disputeBondPct()": FunctionFragment;
    "disputeTrade(address,address,uint256,uint256,address,uint256,address)": FunctionFragment;
    "feePct()": FunctionFragment;
    "fillTrade(address,address,uint256,uint256,address,uint256,address,uint256)": FunctionFragment;
    "filledAtBlock(bytes32)": FunctionFragment;
    "filledBy(bytes32)": FunctionFragment;
    "numberOfTrades()": FunctionFragment;
    "onPriceSettled(bytes32,(address,address,address,address,uint256,uint8,bool,bytes))": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "relayerRefundPct()": FunctionFragment;
    "requestTrade(address,address,uint256,uint256,address)": FunctionFragment;
    "safeBlockThreshold()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "settleTrade(address,address,uint256,uint256,address,uint256,address)": FunctionFragment;
    "status(bytes32)": FunctionFragment;
    "tradeRebatePct()": FunctionFragment;
    "whitelistToken(address,bool)": FunctionFragment;
    "whitelistedTokens(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelTrade"
      | "disputeBondPct"
      | "disputeTrade"
      | "feePct"
      | "fillTrade"
      | "filledAtBlock"
      | "filledBy"
      | "numberOfTrades"
      | "onPriceSettled"
      | "oracle"
      | "owner"
      | "relayerRefundPct"
      | "requestTrade"
      | "safeBlockThreshold"
      | "setOwner"
      | "settleTrade"
      | "status"
      | "tradeRebatePct"
      | "whitelistToken"
      | "whitelistedTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelTrade",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeBondPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputeTrade",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "feePct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fillTrade",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "filledAtBlock",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "filledBy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfTrades",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onPriceSettled",
    values: [PromiseOrValue<BytesLike>, RequestStruct]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relayerRefundPct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestTrade",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBlockThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleTrade",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "status",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeRebatePct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistToken",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTokens",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeBondPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "filledAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "filledBy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onPriceSettled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "relayerRefundPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBlockThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tradeRebatePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTokens",
    data: BytesLike
  ): Result;

  events: {
    "FeeCombinationSet(uint256,uint256,uint256)": EventFragment;
    "FeePctSet(uint256)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
    "SafeBlockThresholdSet(uint256)": EventFragment;
    "TokenWhitelisted(address,bool)": EventFragment;
    "TradeCancelled(uint256,bytes32,address)": EventFragment;
    "TradeDisputeSettled(address,uint256,bytes32,bool,address)": EventFragment;
    "TradeDisputed(address,uint256,bytes32,uint256,address)": EventFragment;
    "TradeFilled(address,uint256,uint256,address)": EventFragment;
    "TradeRequested(address,address,uint256,uint256,address,uint256,address)": EventFragment;
    "TradeSettled(address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeCombinationSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePctSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafeBlockThresholdSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeDisputeSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeDisputed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeSettled"): EventFragment;
}

export interface FeeCombinationSetEventObject {
  disputeBondPct: BigNumber;
  tradeRebatePct: BigNumber;
  relayerRefundPct: BigNumber;
}
export type FeeCombinationSetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  FeeCombinationSetEventObject
>;

export type FeeCombinationSetEventFilter =
  TypedEventFilter<FeeCombinationSetEvent>;

export interface FeePctSetEventObject {
  feePct: BigNumber;
}
export type FeePctSetEvent = TypedEvent<[BigNumber], FeePctSetEventObject>;

export type FeePctSetEventFilter = TypedEventFilter<FeePctSetEvent>;

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface SafeBlockThresholdSetEventObject {
  newSafeBlockThreshold: BigNumber;
}
export type SafeBlockThresholdSetEvent = TypedEvent<
  [BigNumber],
  SafeBlockThresholdSetEventObject
>;

export type SafeBlockThresholdSetEventFilter =
  TypedEventFilter<SafeBlockThresholdSetEvent>;

export interface TokenWhitelistedEventObject {
  token: string;
  whitelisted: boolean;
}
export type TokenWhitelistedEvent = TypedEvent<
  [string, boolean],
  TokenWhitelistedEventObject
>;

export type TokenWhitelistedEventFilter =
  TypedEventFilter<TokenWhitelistedEvent>;

export interface TradeCancelledEventObject {
  tradeIndex: BigNumber;
  tradeId: string;
  trader: string;
}
export type TradeCancelledEvent = TypedEvent<
  [BigNumber, string, string],
  TradeCancelledEventObject
>;

export type TradeCancelledEventFilter = TypedEventFilter<TradeCancelledEvent>;

export interface TradeDisputeSettledEventObject {
  relayer: string;
  tradeIndex: BigNumber;
  disputeId: string;
  answer: boolean;
  trader: string;
}
export type TradeDisputeSettledEvent = TypedEvent<
  [string, BigNumber, string, boolean, string],
  TradeDisputeSettledEventObject
>;

export type TradeDisputeSettledEventFilter =
  TypedEventFilter<TradeDisputeSettledEvent>;

export interface TradeDisputedEventObject {
  relayer: string;
  tradeIndex: BigNumber;
  disputeId: string;
  filledAtBlock: BigNumber;
  trader: string;
}
export type TradeDisputedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  TradeDisputedEventObject
>;

export type TradeDisputedEventFilter = TypedEventFilter<TradeDisputedEvent>;

export interface TradeFilledEventObject {
  relayer: string;
  tradeIndex: BigNumber;
  amountOut: BigNumber;
  trader: string;
}
export type TradeFilledEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  TradeFilledEventObject
>;

export type TradeFilledEventFilter = TypedEventFilter<TradeFilledEvent>;

export interface TradeRequestedEventObject {
  tokenIn: string;
  tokenOut: string;
  amountIn: BigNumber;
  minAmountOut: BigNumber;
  recipient: string;
  tradeIndex: BigNumber;
  trader: string;
}
export type TradeRequestedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber, string],
  TradeRequestedEventObject
>;

export type TradeRequestedEventFilter = TypedEventFilter<TradeRequestedEvent>;

export interface TradeSettledEventObject {
  relayer: string;
  tradeIndex: BigNumber;
  filledAtBlock: BigNumber;
  trader: string;
}
export type TradeSettledEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  TradeSettledEventObject
>;

export type TradeSettledEventFilter = TypedEventFilter<TradeSettledEvent>;

export interface Book extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disputeBondPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    disputeTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    fillTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      amountToSend: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    filledAtBlock(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    filledBy(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    numberOfTrades(overrides?: CallOverrides): Promise<[BigNumber]>;

    onPriceSettled(
      id: PromiseOrValue<BytesLike>,
      request: RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    relayerRefundPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safeBlockThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    status(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    tradeRebatePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    whitelistToken(
      token: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  cancelTrade(
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    tradeIndex: PromiseOrValue<BigNumberish>,
    trader: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disputeBondPct(overrides?: CallOverrides): Promise<BigNumber>;

  disputeTrade(
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    tradeIndex: PromiseOrValue<BigNumberish>,
    trader: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feePct(overrides?: CallOverrides): Promise<BigNumber>;

  fillTrade(
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    tradeIndex: PromiseOrValue<BigNumberish>,
    trader: PromiseOrValue<string>,
    amountToSend: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  filledAtBlock(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  filledBy(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  numberOfTrades(overrides?: CallOverrides): Promise<BigNumber>;

  onPriceSettled(
    id: PromiseOrValue<BytesLike>,
    request: RequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  relayerRefundPct(overrides?: CallOverrides): Promise<BigNumber>;

  requestTrade(
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safeBlockThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleTrade(
    tokenIn: PromiseOrValue<string>,
    tokenOut: PromiseOrValue<string>,
    amountIn: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    tradeIndex: PromiseOrValue<BigNumberish>,
    trader: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  status(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  tradeRebatePct(overrides?: CallOverrides): Promise<BigNumber>;

  whitelistToken(
    token: PromiseOrValue<string>,
    whitelisted: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistedTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    cancelTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    disputeBondPct(overrides?: CallOverrides): Promise<BigNumber>;

    disputeTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    feePct(overrides?: CallOverrides): Promise<BigNumber>;

    fillTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      amountToSend: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    filledAtBlock(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    filledBy(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    numberOfTrades(overrides?: CallOverrides): Promise<BigNumber>;

    onPriceSettled(
      id: PromiseOrValue<BytesLike>,
      request: RequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    relayerRefundPct(overrides?: CallOverrides): Promise<BigNumber>;

    requestTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBlockThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    status(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    tradeRebatePct(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistToken(
      token: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "FeeCombinationSet(uint256,uint256,uint256)"(
      disputeBondPct?: null,
      tradeRebatePct?: null,
      relayerRefundPct?: null
    ): FeeCombinationSetEventFilter;
    FeeCombinationSet(
      disputeBondPct?: null,
      tradeRebatePct?: null,
      relayerRefundPct?: null
    ): FeeCombinationSetEventFilter;

    "FeePctSet(uint256)"(feePct?: null): FeePctSetEventFilter;
    FeePctSet(feePct?: null): FeePctSetEventFilter;

    "OwnerUpdated(address,address)"(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;

    "SafeBlockThresholdSet(uint256)"(
      newSafeBlockThreshold?: null
    ): SafeBlockThresholdSetEventFilter;
    SafeBlockThresholdSet(
      newSafeBlockThreshold?: null
    ): SafeBlockThresholdSetEventFilter;

    "TokenWhitelisted(address,bool)"(
      token?: PromiseOrValue<string> | null,
      whitelisted?: null
    ): TokenWhitelistedEventFilter;
    TokenWhitelisted(
      token?: PromiseOrValue<string> | null,
      whitelisted?: null
    ): TokenWhitelistedEventFilter;

    "TradeCancelled(uint256,bytes32,address)"(
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      tradeId?: PromiseOrValue<BytesLike> | null,
      trader?: PromiseOrValue<string> | null
    ): TradeCancelledEventFilter;
    TradeCancelled(
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      tradeId?: PromiseOrValue<BytesLike> | null,
      trader?: PromiseOrValue<string> | null
    ): TradeCancelledEventFilter;

    "TradeDisputeSettled(address,uint256,bytes32,bool,address)"(
      relayer?: null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      disputeId?: PromiseOrValue<BytesLike> | null,
      answer?: null,
      trader?: PromiseOrValue<string> | null
    ): TradeDisputeSettledEventFilter;
    TradeDisputeSettled(
      relayer?: null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      disputeId?: PromiseOrValue<BytesLike> | null,
      answer?: null,
      trader?: PromiseOrValue<string> | null
    ): TradeDisputeSettledEventFilter;

    "TradeDisputed(address,uint256,bytes32,uint256,address)"(
      relayer?: null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      disputeId?: PromiseOrValue<BytesLike> | null,
      filledAtBlock?: null,
      trader?: PromiseOrValue<string> | null
    ): TradeDisputedEventFilter;
    TradeDisputed(
      relayer?: null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      disputeId?: PromiseOrValue<BytesLike> | null,
      filledAtBlock?: null,
      trader?: PromiseOrValue<string> | null
    ): TradeDisputedEventFilter;

    "TradeFilled(address,uint256,uint256,address)"(
      relayer?: PromiseOrValue<string> | null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      amountOut?: null,
      trader?: PromiseOrValue<string> | null
    ): TradeFilledEventFilter;
    TradeFilled(
      relayer?: PromiseOrValue<string> | null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      amountOut?: null,
      trader?: PromiseOrValue<string> | null
    ): TradeFilledEventFilter;

    "TradeRequested(address,address,uint256,uint256,address,uint256,address)"(
      tokenIn?: PromiseOrValue<string> | null,
      tokenOut?: null,
      amountIn?: null,
      minAmountOut?: null,
      recipient?: null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null
    ): TradeRequestedEventFilter;
    TradeRequested(
      tokenIn?: PromiseOrValue<string> | null,
      tokenOut?: null,
      amountIn?: null,
      minAmountOut?: null,
      recipient?: null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null
    ): TradeRequestedEventFilter;

    "TradeSettled(address,uint256,uint256,address)"(
      relayer?: PromiseOrValue<string> | null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      filledAtBlock?: null,
      trader?: PromiseOrValue<string> | null
    ): TradeSettledEventFilter;
    TradeSettled(
      relayer?: PromiseOrValue<string> | null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      filledAtBlock?: null,
      trader?: PromiseOrValue<string> | null
    ): TradeSettledEventFilter;
  };

  estimateGas: {
    cancelTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disputeBondPct(overrides?: CallOverrides): Promise<BigNumber>;

    disputeTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feePct(overrides?: CallOverrides): Promise<BigNumber>;

    fillTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      amountToSend: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    filledAtBlock(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    filledBy(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfTrades(overrides?: CallOverrides): Promise<BigNumber>;

    onPriceSettled(
      id: PromiseOrValue<BytesLike>,
      request: RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    relayerRefundPct(overrides?: CallOverrides): Promise<BigNumber>;

    requestTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safeBlockThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    status(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeRebatePct(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistToken(
      token: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disputeBondPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disputeTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fillTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      amountToSend: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    filledAtBlock(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    filledBy(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfTrades(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onPriceSettled(
      id: PromiseOrValue<BytesLike>,
      request: RequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayerRefundPct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safeBlockThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleTrade(
      tokenIn: PromiseOrValue<string>,
      tokenOut: PromiseOrValue<string>,
      amountIn: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    status(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradeRebatePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistToken(
      token: PromiseOrValue<string>,
      whitelisted: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
