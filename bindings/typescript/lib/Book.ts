/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IBook {
  export type FillTradeArgsStruct = {
    tokens: PromiseOrValue<string>[];
    amounts: PromiseOrValue<BigNumberish>[];
    recipient: PromiseOrValue<string>;
    tradeIndex: PromiseOrValue<BigNumberish>;
    trader: PromiseOrValue<string>;
    amountOut: PromiseOrValue<BigNumberish>;
    callbackData: PromiseOrValue<BytesLike>;
  };

  export type FillTradeArgsStructOutput = [
    string[],
    BigNumber[],
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    tokens: string[];
    amounts: BigNumber[];
    recipient: string;
    tradeIndex: BigNumber;
    trader: string;
    amountOut: BigNumber;
    callbackData: string;
  };
}

export interface BookInterface extends utils.Interface {
  functions: {
    "cancelTrade(address[],uint128[],address,uint256)": FunctionFragment;
    "feePct()": FunctionFragment;
    "fillTrade((address[],uint128[],address,uint256,address,uint128,bytes))": FunctionFragment;
    "numberOfTrades()": FunctionFragment;
    "paused()": FunctionFragment;
    "registry()": FunctionFragment;
    "requestTrade(address[],uint128[],address,bool)": FunctionFragment;
    "tradesData(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelTrade"
      | "feePct"
      | "fillTrade"
      | "numberOfTrades"
      | "paused"
      | "registry"
      | "requestTrade"
      | "tradesData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelTrade",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "feePct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fillTrade",
    values: [IBook.FillTradeArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfTrades",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestTrade",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tradesData",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfTrades",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tradesData", data: BytesLike): Result;

  events: {
    "FeePctSet(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "TradeCancelled(uint256,bytes32,address)": EventFragment;
    "TradeFilled(address,uint256,uint128,address)": EventFragment;
    "TradeRequested(address[],uint128[],address,uint256,address,bool,bool)": EventFragment;
    "TradeSettled(address,uint256,uint256,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeePctSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeFilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface FeePctSetEventObject {
  feePct: BigNumber;
}
export type FeePctSetEvent = TypedEvent<[BigNumber], FeePctSetEventObject>;

export type FeePctSetEventFilter = TypedEventFilter<FeePctSetEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TradeCancelledEventObject {
  tradeIndex: BigNumber;
  tradeId: string;
  trader: string;
}
export type TradeCancelledEvent = TypedEvent<
  [BigNumber, string, string],
  TradeCancelledEventObject
>;

export type TradeCancelledEventFilter = TypedEventFilter<TradeCancelledEvent>;

export interface TradeFilledEventObject {
  relayer: string;
  tradeIndex: BigNumber;
  amountOut: BigNumber;
  trader: string;
}
export type TradeFilledEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  TradeFilledEventObject
>;

export type TradeFilledEventFilter = TypedEventFilter<TradeFilledEvent>;

export interface TradeRequestedEventObject {
  tokens: string[];
  amounts: BigNumber[];
  recipient: string;
  tradeIndex: BigNumber;
  trader: string;
  unwrapOutput: boolean;
  wrapInput: boolean;
}
export type TradeRequestedEvent = TypedEvent<
  [string[], BigNumber[], string, BigNumber, string, boolean, boolean],
  TradeRequestedEventObject
>;

export type TradeRequestedEventFilter = TypedEventFilter<TradeRequestedEvent>;

export interface TradeSettledEventObject {
  relayer: string;
  tradeIndex: BigNumber;
  filledAtBlock: BigNumber;
  trader: string;
}
export type TradeSettledEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  TradeSettledEventObject
>;

export type TradeSettledEventFilter = TypedEventFilter<TradeSettledEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Book extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelTrade(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    fillTrade(
      trade: IBook.FillTradeArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numberOfTrades(overrides?: CallOverrides): Promise<[BigNumber]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    requestTrade(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      unwrapOutput: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tradesData(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, boolean] & {
        status: number;
        unwrapOutput: boolean;
        wrapInput: boolean;
      }
    >;
  };

  cancelTrade(
    tokens: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    recipient: PromiseOrValue<string>,
    tradeIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feePct(overrides?: CallOverrides): Promise<BigNumber>;

  fillTrade(
    trade: IBook.FillTradeArgsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numberOfTrades(overrides?: CallOverrides): Promise<BigNumber>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  registry(overrides?: CallOverrides): Promise<string>;

  requestTrade(
    tokens: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    recipient: PromiseOrValue<string>,
    unwrapOutput: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tradesData(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean, boolean] & {
      status: number;
      unwrapOutput: boolean;
      wrapInput: boolean;
    }
  >;

  callStatic: {
    cancelTrade(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    feePct(overrides?: CallOverrides): Promise<BigNumber>;

    fillTrade(
      trade: IBook.FillTradeArgsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    numberOfTrades(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    registry(overrides?: CallOverrides): Promise<string>;

    requestTrade(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      unwrapOutput: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    tradesData(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean, boolean] & {
        status: number;
        unwrapOutput: boolean;
        wrapInput: boolean;
      }
    >;
  };

  filters: {
    "FeePctSet(uint256)"(feePct?: null): FeePctSetEventFilter;
    FeePctSet(feePct?: null): FeePctSetEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "TradeCancelled(uint256,bytes32,address)"(
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      tradeId?: PromiseOrValue<BytesLike> | null,
      trader?: PromiseOrValue<string> | null
    ): TradeCancelledEventFilter;
    TradeCancelled(
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      tradeId?: PromiseOrValue<BytesLike> | null,
      trader?: PromiseOrValue<string> | null
    ): TradeCancelledEventFilter;

    "TradeFilled(address,uint256,uint128,address)"(
      relayer?: PromiseOrValue<string> | null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      amountOut?: null,
      trader?: PromiseOrValue<string> | null
    ): TradeFilledEventFilter;
    TradeFilled(
      relayer?: PromiseOrValue<string> | null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      amountOut?: null,
      trader?: PromiseOrValue<string> | null
    ): TradeFilledEventFilter;

    "TradeRequested(address[],uint128[],address,uint256,address,bool,bool)"(
      tokens?: null,
      amounts?: null,
      recipient?: null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      unwrapOutput?: null,
      wrapInput?: null
    ): TradeRequestedEventFilter;
    TradeRequested(
      tokens?: null,
      amounts?: null,
      recipient?: null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      trader?: PromiseOrValue<string> | null,
      unwrapOutput?: null,
      wrapInput?: null
    ): TradeRequestedEventFilter;

    "TradeSettled(address,uint256,uint256,address)"(
      relayer?: PromiseOrValue<string> | null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      filledAtBlock?: null,
      trader?: PromiseOrValue<string> | null
    ): TradeSettledEventFilter;
    TradeSettled(
      relayer?: PromiseOrValue<string> | null,
      tradeIndex?: PromiseOrValue<BigNumberish> | null,
      filledAtBlock?: null,
      trader?: PromiseOrValue<string> | null
    ): TradeSettledEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    cancelTrade(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feePct(overrides?: CallOverrides): Promise<BigNumber>;

    fillTrade(
      trade: IBook.FillTradeArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numberOfTrades(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    requestTrade(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      unwrapOutput: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tradesData(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelTrade(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      tradeIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fillTrade(
      trade: IBook.FillTradeArgsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numberOfTrades(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestTrade(
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      recipient: PromiseOrValue<string>,
      unwrapOutput: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tradesData(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
