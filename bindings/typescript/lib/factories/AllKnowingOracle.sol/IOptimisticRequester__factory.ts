/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IOptimisticRequester,
  IOptimisticRequesterInterface,
} from "../../AllKnowingOracle.sol/IOptimisticRequester";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "address",
            name: "requester",
            type: "address",
          },
          {
            internalType: "address",
            name: "proposer",
            type: "address",
          },
          {
            internalType: "address",
            name: "disputer",
            type: "address",
          },
          {
            internalType: "contract ERC20",
            name: "currency",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "bond",
            type: "uint256",
          },
          {
            internalType: "enum RequestState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "answer",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct Request",
        name: "request",
        type: "tuple",
      },
    ],
    name: "onPriceSettled",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IOptimisticRequester__factory {
  static readonly abi = _abi;
  static createInterface(): IOptimisticRequesterInterface {
    return new utils.Interface(_abi) as IOptimisticRequesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IOptimisticRequester {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IOptimisticRequester;
  }
}
