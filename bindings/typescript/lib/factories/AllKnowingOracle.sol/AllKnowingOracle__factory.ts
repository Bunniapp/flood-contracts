/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  AllKnowingOracle,
  AllKnowingOracleInterface,
} from "../../AllKnowingOracle.sol/AllKnowingOracle";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "AllKnowingOracle__AlreadySettled",
    type: "error",
  },
  {
    inputs: [],
    name: "AllKnowingOracle__NonSettler",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "AllKnowingOracle__NotWhitelisted",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "AllKnowingOracle__RequestAlreadyExists",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newPct",
        type: "uint256",
      },
    ],
    name: "BondPctChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "proposer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "disputer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "bondToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bond",
        type: "uint256",
      },
    ],
    name: "NewRequest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "answer",
        type: "bool",
      },
    ],
    name: "RequestSettled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "settler",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "SettlerWhitelisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "TokenWhitelisted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "proposer",
        type: "address",
      },
      {
        internalType: "address",
        name: "disputer",
        type: "address",
      },
      {
        internalType: "address",
        name: "bondToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
    ],
    name: "ask",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
    ],
    name: "bondForStake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "disputeBondPct",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "proposer",
        type: "address",
      },
      {
        internalType: "address",
        name: "disputer",
        type: "address",
      },
      {
        internalType: "address",
        name: "bondToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
    ],
    name: "getRequestId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "requests",
    outputs: [
      {
        internalType: "address",
        name: "proposer",
        type: "address",
      },
      {
        internalType: "address",
        name: "disputer",
        type: "address",
      },
      {
        internalType: "address",
        name: "bondToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "stake",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "bond",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "answer",
        type: "bool",
      },
      {
        internalType: "enum RequestState",
        name: "state",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newPct",
        type: "uint256",
      },
    ],
    name: "setBondPct",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "answer",
        type: "bool",
      },
    ],
    name: "settle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "settlers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "settler",
        type: "address",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "whitelistSettler",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "whitelistToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelistedTokens",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350601960049081553360009081526003602052604090819020805460ff19166001179055905490517fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e031996951916100a89190815260200190565b60405180910390a1610d28806100bf6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638945bd281161008c578063af5899fc11610066578063af5899fc14610202578063c70a900f14610215578063daf9c21014610248578063fc361c381461026b57600080fd5b80638945bd28146101515780638da5cb5b146101645780639d8669851461018f57600080fd5b806307de99f6146100d45780630ffb1d8b146100fa57806313af40351461010f578063329e53be14610122578063391fe4e21461013557806384bfabcf1461013e575b600080fd5b6100e76100e2366004610ad9565b61027e565b6040519081526020015b60405180910390f35b61010d610108366004610b1e565b61028f565b005b61010d61011d366004610b51565b610322565b61010d610130366004610b1e565b610397565b6100e760045481565b6100e761014c366004610b73565b610419565b61010d61015f366004610ad9565b61043e565b600054610177906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b6101ef61019d366004610ad9565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b0395861695938416949390921692909160ff8082169161010090041687565b6040516100f19796959493929190610bd4565b61010d610210366004610b73565b6104a3565b610238610223366004610b51565b60036020526000908152604090205460ff1681565b60405190151581526020016100f1565b610238610256366004610b51565b60026020526000908152604090205460ff1681565b61010d610279366004610c3a565b6106fe565b600061028982610962565b92915050565b6000546001600160a01b031633146102c25760405162461bcd60e51b81526004016102b990610c5d565b60405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d9291015b60405180910390a25050565b6000546001600160a01b0316331461034c5760405162461bcd60e51b81526004016102b990610c5d565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103c15760405162461bcd60e51b81526004016102b990610c5d565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f8cc72bec7e2cf5979aefd933f40a28eb590098d522a5c458e497e71c5e6fa90f9101610316565b60008061042583610962565b9050610434868686868561097e565b9695505050505050565b6000546001600160a01b031633146104685760405162461bcd60e51b81526004016102b990610c5d565b60048190556040518181527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a150565b6001600160a01b03821660009081526002602052604090205460ff166104e75760405163010d7e6160e11b81526001600160a01b03831660048201526024016102b9565b60006104f282610962565b90506000610503868686868661097e565b90506001600082815260016020526040902060050154610100900460ff16600281111561053257610532610bbe565b036105535760405163d5e880e960e01b8152600481018290526024016102b9565b60006040518060e00160405280886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001858152602001848152602001600015158152602001600160028111156105b5576105b5610bbe565b9052600083815260016020818152604092839020845181546001600160a01b03199081166001600160a01b03928316178355928601519382018054841694821694909417909355928401516002808501805490931691909316179055606083015160038301556080830151600483015560a083015160058301805460ff198116921515928317825560c0860151959650869593919261ffff1990911661ff0019909116179061010090849081111561066f5761066f610bbe565b021790555061068c9150506001600160a01b0386168730866109d1565b6106a16001600160a01b0386163330876109d1565b604080516001600160a01b038781168252602082018790529181018590528188169189169084907fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699060600160405180910390a450505050505050565b3360009081526003602052604090205460ff1661072e576040516314e9dd3960e31b815260040160405180910390fd5b6000828152600160208181526040808420815160e08101835281546001600160a01b03908116825294820154851693810193909352600280820154909416918301919091526003810154606083015260048101546080830152600581015460ff808216151560a08501529293919260c085019261010090920416908111156107b8576107b8610bbe565b60028111156107c9576107c9610bbe565b905250905060028160c0015160028111156107e6576107e6610bbe565b036108075760405163b677167760e01b8152600481018490526024016102b9565b81156108415780516060820151608083015161083c929161082791610c99565b60408401516001600160a01b03169190610a5b565b61085d565b61085d8160200151826060015183608001516108279190610c99565b600260c0820181815283151560a08401908152600086815260016020818152604092839020875181546001600160a01b039182166001600160a01b0319918216178355928901519382018054948216948416949094179093559287015183870180549190931691161790556060850151600382015560808501516004820155905160058201805491151560ff198316811782559351869593949093919261ff001990911661ffff19909116179061010090849081111561091f5761091f610bbe565b02179055505060405183151581528491507fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a2505050565b60006064600454836109749190610cb1565b6102899190610cd0565b604080516001600160a01b0396871660208083019190915295871681830152939095166060840152608083019190915260a0808301919091528351808303909101815260c0909101909252815191012090565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610a545760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016102b9565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610ad35760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016102b9565b50505050565b600060208284031215610aeb57600080fd5b5035919050565b80356001600160a01b0381168114610b0957600080fd5b919050565b80358015158114610b0957600080fd5b60008060408385031215610b3157600080fd5b610b3a83610af2565b9150610b4860208401610b0e565b90509250929050565b600060208284031215610b6357600080fd5b610b6c82610af2565b9392505050565b60008060008060808587031215610b8957600080fd5b610b9285610af2565b9350610ba060208601610af2565b9250610bae60408601610af2565b9396929550929360600135925050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905282151560a082015260e0810160038310610c2857634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b60008060408385031215610c4d57600080fd5b82359150610b4860208401610b0e565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610cac57610cac610c83565b500190565b6000816000190483118215151615610ccb57610ccb610c83565b500290565b600082610ced57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220a086d5378c38188b517141b491168433bcacdd1ef66aa0a3a08acd1fabd82c2a64736f6c634300080f0033";

type AllKnowingOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AllKnowingOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AllKnowingOracle__factory extends ContractFactory {
  constructor(...args: AllKnowingOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AllKnowingOracle> {
    return super.deploy(overrides || {}) as Promise<AllKnowingOracle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AllKnowingOracle {
    return super.attach(address) as AllKnowingOracle;
  }
  override connect(signer: Signer): AllKnowingOracle__factory {
    return super.connect(signer) as AllKnowingOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AllKnowingOracleInterface {
    return new utils.Interface(_abi) as AllKnowingOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AllKnowingOracle {
    return new Contract(address, _abi, signerOrProvider) as AllKnowingOracle;
  }
}
