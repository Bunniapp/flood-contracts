/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  AllKnowingOracle,
  AllKnowingOracleInterface,
} from "../../AllKnowingOracle.sol/AllKnowingOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract FloodRegistry",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AllKnowingOracle__NonSettler",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "AllKnowingOracle__NotSettleable",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    name: "AllKnowingOracle__SettlerIsDisputerOrProposer",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "proposer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "disputer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "currency",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "bond",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "requestIndex",
        type: "uint256",
      },
    ],
    name: "NewRequest",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "answer",
        type: "bool",
      },
    ],
    name: "RequestSettled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "requester",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "RequesterWhitelisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "settler",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "SettlerWhitelisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "TokenWhitelisted",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "proposer",
        type: "address",
      },
      {
        internalType: "address",
        name: "disputer",
        type: "address",
      },
      {
        internalType: "address",
        name: "currency",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "bond",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "ask",
    outputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "requester",
        type: "address",
      },
      {
        internalType: "address",
        name: "proposer",
        type: "address",
      },
      {
        internalType: "address",
        name: "disputer",
        type: "address",
      },
      {
        internalType: "address",
        name: "currency",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "bond",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requestIndex",
        type: "uint256",
      },
    ],
    name: "getRequestId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract FloodRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "requests",
    outputs: [
      {
        internalType: "address",
        name: "requester",
        type: "address",
      },
      {
        internalType: "address",
        name: "proposer",
        type: "address",
      },
      {
        internalType: "address",
        name: "disputer",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "currency",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "bond",
        type: "uint256",
      },
      {
        internalType: "enum RequestState",
        name: "state",
        type: "uint8",
      },
      {
        internalType: "bool",
        name: "answer",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "id",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "answer",
        type: "bool",
      },
    ],
    name: "settle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "settlers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "settler",
        type: "address",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "whitelistSettler",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0604052600060045534801561001557600080fd5b50604051611412380380611412833981016040819052610034916100df565b61003d33610068565b336000908152600360205260409020805460ff191660011790556001600160a01b031660805261010f565b600180546001600160a01b031916905561008c8161008f602090811b6108ff17901c565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100f157600080fd5b81516001600160a01b038116811461010857600080fd5b9392505050565b6080516112e861012a600039600061012d01526112e86000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063e30c397811610066578063e30c3978146101d2578063f2fde38b146101e3578063f7d3b58b146101f6578063fc361c381461020957600080fd5b80638da5cb5b146101675780639d86698514610178578063c70a900f1461019f57600080fd5b8063329e53be146100d457806355352f82146100e95780635badbe4c1461010f578063715018a61461011857806379ba5097146101205780637b10399914610128575b600080fd5b6100e76100e2366004610cee565b61021c565b005b6100fc6100f7366004610d25565b610283565b6040519081526020015b60405180910390f35b6100fc60045481565b6100e76102eb565b6100e76102ff565b61014f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610106565b6000546001600160a01b031661014f565b61018b610186366004610d8b565b61037e565b604051610106989796959493929190610e2c565b6101c26101ad366004610e92565b60036020526000908152604090205460ff1681565b6040519015158152602001610106565b6001546001600160a01b031661014f565b6100e76101f1366004610e92565b610464565b6100fc610204366004610eb4565b6104d5565b6100e7610217366004610f61565b61070c565b61022461094f565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f8cc72bec7e2cf5979aefd933f40a28eb590098d522a5c458e497e71c5e6fa90f910160405180910390a25050565b604080516bffffffffffffffffffffffff19606098891b811660208084019190915297891b8116603483015295881b861660488201529390961b909316605c83015260708201526090808201929092528351808203909201825260b001909252815191012090565b6102f361094f565b6102fd60006109a9565b565b60015433906001600160a01b031681146103725760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b61037b816109a9565b50565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006860180546001600160a01b03968716988716979587169690941694929360ff80841694610100909404169291906103e190610f86565b80601f016020809104026020016040519081016040528092919081815260200182805461040d90610f86565b801561045a5780601f1061042f5761010080835404028352916020019161045a565b820191906000526020600020905b81548152906001019060200180831161043d57829003601f168201915b5050505050905088565b61046c61094f565b600180546001600160a01b0383166001600160a01b0319909116811790915561049d6000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60048054600091829190826104e983610fd6565b9190505590506104fd338989898986610283565b91506000604051806101000160405280336001600160a01b031681526020018a6001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b031681526020018781526020016001600281111561056257610562610da4565b815260200160001515815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505085815260026020818152604092839020855181546001600160a01b03199081166001600160a01b039283161783559287015160018084018054861692841692909217909155948701518285018054851691831691909117905560608701516003830180549094169116179091556080850151600482015560a085015160058201805496975087969295509093909260ff1990921691849081111561064e5761064e610da4565b021790555060c08201516005820180549115156101000261ff001990921691909117905560e082015160068201906106869082611053565b5050604080516001600160a01b038a81168252602082018a9052918101859052818b169250908b169085907fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699060600160405180910390a461070033306106ee896002611113565b6001600160a01b038b169291906109c2565b50509695505050505050565b3360009081526003602052604090205460ff1661073c576040516314e9dd3960e31b815260040160405180910390fd5b60008281526002602052604090206001600582015460ff16600281111561076557610765610da4565b1461078657604051631ad52b9b60e11b815260048101849052602401610369565b60028101546001600160a01b03163314806107ad575060018101546001600160a01b031633145b156107ce576040516371ced53d60e01b815260048101849052602401610369565b6000816004015460026107e19190611113565b60058301805461ffff19166101008615159081029190911760021790915560405190815290915084907fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a28215610863576001820154600383015461085e916001600160a01b03918216911683610a2d565b610884565b60028201546003830154610884916001600160a01b03918216911683610a2d565b81546001600160a01b03163b156108f957815460405163734d162760e01b81526001600160a01b039091169063734d1627906108c690879086906004016111ad565b600060405180830381600087803b1580156108e057600080fd5b505af11580156108f4573d6000803e3d6000fd5b505050505b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146102fd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610369565b600180546001600160a01b031916905561037b816108ff565b6040516001600160a01b03808516602483015283166044820152606481018290526108f99085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610a62565b6040516001600160a01b038316602482015260448101829052610a5d90849063a9059cbb60e01b906064016109f6565b505050565b6000610ab7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b349092919063ffffffff16565b805190915015610a5d5780806020019051810190610ad59190611266565b610a5d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610369565b6060610b438484600085610b4b565b949350505050565b606082471015610bac5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610369565b600080866001600160a01b03168587604051610bc89190611283565b60006040518083038185875af1925050503d8060008114610c05576040519150601f19603f3d011682016040523d82523d6000602084013e610c0a565b606091505b5091509150610c1b87838387610c26565b979650505050505050565b60608315610c95578251600003610c8e576001600160a01b0385163b610c8e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610369565b5081610b43565b610b438383815115610caa5781518083602001fd5b8060405162461bcd60e51b8152600401610369919061129f565b80356001600160a01b0381168114610cdb57600080fd5b919050565b801515811461037b57600080fd5b60008060408385031215610d0157600080fd5b610d0a83610cc4565b91506020830135610d1a81610ce0565b809150509250929050565b60008060008060008060c08789031215610d3e57600080fd5b610d4787610cc4565b9550610d5560208801610cc4565b9450610d6360408801610cc4565b9350610d7160608801610cc4565b92506080870135915060a087013590509295509295509295565b600060208284031215610d9d57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60038110610dd857634e487b7160e01b600052602160045260246000fd5b9052565b60005b83811015610df7578181015183820152602001610ddf565b50506000910152565b60008151808452610e18816020860160208601610ddc565b601f01601f19169290920160200192915050565b6001600160a01b0389811682528881166020830152878116604083015286166060820152608081018590526000610100610e6960a0840187610dba565b84151560c08401528060e0840152610e8381840185610e00565b9b9a5050505050505050505050565b600060208284031215610ea457600080fd5b610ead82610cc4565b9392505050565b60008060008060008060a08789031215610ecd57600080fd5b610ed687610cc4565b9550610ee460208801610cc4565b9450610ef260408801610cc4565b935060608701359250608087013567ffffffffffffffff80821115610f1657600080fd5b818901915089601f830112610f2a57600080fd5b813581811115610f3957600080fd5b8a6020828501011115610f4b57600080fd5b6020830194508093505050509295509295509295565b60008060408385031215610f7457600080fd5b823591506020830135610d1a81610ce0565b600181811c90821680610f9a57607f821691505b602082108103610fba57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201610fe857610fe8610fc0565b5060010190565b634e487b7160e01b600052604160045260246000fd5b601f821115610a5d57600081815260208120601f850160051c8101602086101561102c5750805b601f850160051c820191505b8181101561104b57828155600101611038565b505050505050565b815167ffffffffffffffff81111561106d5761106d610fef565b6110818161107b8454610f86565b84611005565b602080601f8311600181146110b6576000841561109e5750858301515b600019600386901b1c1916600185901b17855561104b565b600085815260208120601f198616915b828110156110e5578886015182559484019460019091019084016110c6565b50858210156111035787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808202811582820484141761112a5761112a610fc0565b92915050565b6000815461113d81610f86565b80855260206001838116801561115a5760018114611174576111a2565b60ff1985168884015283151560051b8801830195506111a2565b866000528260002060005b8581101561119a5781548a820186015290830190840161117f565b890184019650505b505050505092915050565b828152604060208201526111dc604082016111cf84546001600160a01b031690565b6001600160a01b03169052565b60006111f260018401546001600160a01b031690565b6001600160a01b03908116606084015260028401548116608084015260038401541660a0830152600483015460c0830152600583015461123860e0840160ff8316610dba565b61010061124e81850160ff8460081c1615159052565b61012084015250610b43610140830160068501611130565b60006020828403121561127857600080fd5b8151610ead81610ce0565b60008251611295818460208701610ddc565b9190910192915050565b602081526000610ead6020830184610e0056fea2646970667358221220d9f6f1f87e0e503f71ff9e24e2e00b46e90d7a1bf83d5579e655c0670b4129c264736f6c63430008110033";

type AllKnowingOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AllKnowingOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AllKnowingOracle__factory extends ContractFactory {
  constructor(...args: AllKnowingOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AllKnowingOracle> {
    return super.deploy(
      _registry,
      overrides || {}
    ) as Promise<AllKnowingOracle>;
  }
  override getDeployTransaction(
    _registry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_registry, overrides || {});
  }
  override attach(address: string): AllKnowingOracle {
    return super.attach(address) as AllKnowingOracle;
  }
  override connect(signer: Signer): AllKnowingOracle__factory {
    return super.connect(signer) as AllKnowingOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AllKnowingOracleInterface {
    return new utils.Interface(_abi) as AllKnowingOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AllKnowingOracle {
    return new Contract(address, _abi, signerOrProvider) as AllKnowingOracle;
  }
}
