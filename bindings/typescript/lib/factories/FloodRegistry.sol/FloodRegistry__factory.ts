/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  FloodRegistry,
  FloodRegistryInterface,
} from "../../FloodRegistry.sol/FloodRegistry";

const _abi = [
  {
    inputs: [],
    name: "FloodRegistry__InvalidInputLength",
    type: "error",
  },
  {
    inputs: [],
    name: "FloodRegistry__TokenAlreadyWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "FloodRegistry__TokenNotWhitelisted",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract AllKnowingOracle",
        name: "oracle",
        type: "address",
      },
    ],
    name: "OracleChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "whitelisted",
        type: "bool",
      },
    ],
    name: "TokenWhitelisted",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "bool[]",
        name: "enabled",
        type: "bool[]",
      },
    ],
    name: "batchWhitelistTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "isTokenWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestOracle",
    outputs: [
      {
        internalType: "contract AllKnowingOracle",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract AllKnowingOracle",
        name: "oracle",
        type: "address",
      },
    ],
    name: "setOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "whitelistToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "whitelistedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "whitelistedTokensCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b610096565b600180546001600160a01b031916905561004381610046602090811b61040417901c565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61099e806100a56000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80637adbf973116100715780637adbf973146101365780638da5cb5b14610149578063b5af090f1461015a578063dfdc49621461017d578063e30c397814610193578063f2fde38b146101a457600080fd5b80630ffb1d8b146100b95780632eae4f60146100ce57806339063c63146100fe5780635e1762a014610111578063715018a61461012657806379ba50971461012e575b600080fd5b6100cc6100c7366004610788565b6101b7565b005b6004546100e1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cc61010c366004610809565b6101cd565b61011961026f565b6040516100f59190610875565b6100cc610280565b6100cc610294565b6100cc6101443660046108c2565b610313565b6000546001600160a01b03166100e1565b61016d6101683660046108c2565b610365565b60405190151581526020016100f5565b610185610387565b6040519081526020016100f5565b6001546001600160a01b03166100e1565b6100cc6101b23660046108c2565b610393565b6101bf610454565b6101c982826104ae565b5050565b6101d5610454565b8281146101f55760405163046a41b360e31b815260040160405180910390fd5b60005b8381101561026857610256858583818110610215576102156108df565b905060200201602081019061022a91906108c2565b84848481811061023c5761023c6108df565b905060200201602081019061025191906108f5565b6104ae565b8061026081610926565b9150506101f8565b5050505050565b606061027b600261055f565b905090565b610288610454565b6102926000610573565b565b60015433906001600160a01b031681146103075760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b61031081610573565b50565b61031b610454565b600480546001600160a01b0319166001600160a01b0383169081179091556040517f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe41890600090a250565b6001600160a01b03811660009081526003602052604081205415155b92915050565b600061027b600261058c565b61039b610454565b600180546001600160a01b0383166001600160a01b031990911681179091556103cc6000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146102925760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102fe565b80156104e75760006104c1600284610596565b9050806104e15760405163f6d9d35960e01b815260040160405180910390fd5b50610516565b60006104f46002846105ab565b90508061051457604051630ecc952760e01b815260040160405180910390fd5b505b816001600160a01b03167fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d9282604051610553911515815260200190565b60405180910390a25050565b6060600061056c836105c0565b9392505050565b600180546001600160a01b031916905561031081610404565b6000610381825490565b600061056c836001600160a01b03841661061c565b600061056c836001600160a01b03841661066b565b60608160000180548060200260200160405190810160405280929190818152602001828054801561061057602002820191906000526020600020905b8154815260200190600101908083116105fc575b50505050509050919050565b600081815260018301602052604081205461066357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610381565b506000610381565b6000818152600183016020526040812054801561075457600061068f60018361093f565b85549091506000906106a39060019061093f565b90508181146107085760008660000182815481106106c3576106c36108df565b90600052602060002001549050808760000184815481106106e6576106e66108df565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061071957610719610952565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610381565b6000915050610381565b6001600160a01b038116811461031057600080fd5b8035801515811461078357600080fd5b919050565b6000806040838503121561079b57600080fd5b82356107a68161075e565b91506107b460208401610773565b90509250929050565b60008083601f8401126107cf57600080fd5b50813567ffffffffffffffff8111156107e757600080fd5b6020830191508360208260051b850101111561080257600080fd5b9250929050565b6000806000806040858703121561081f57600080fd5b843567ffffffffffffffff8082111561083757600080fd5b610843888389016107bd565b9096509450602087013591508082111561085c57600080fd5b50610869878288016107bd565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b818110156108b65783516001600160a01b031683529284019291840191600101610891565b50909695505050505050565b6000602082840312156108d457600080fd5b813561056c8161075e565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561090757600080fd5b61056c82610773565b634e487b7160e01b600052601160045260246000fd5b60006001820161093857610938610910565b5060010190565b8181038181111561038157610381610910565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220f33fce1fbb013bb3338152c4a9620b66780a7b32aed51582ec0c450a77e7340364736f6c63430008110033";

type FloodRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FloodRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FloodRegistry__factory extends ContractFactory {
  constructor(...args: FloodRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FloodRegistry> {
    return super.deploy(overrides || {}) as Promise<FloodRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FloodRegistry {
    return super.attach(address) as FloodRegistry;
  }
  override connect(signer: Signer): FloodRegistry__factory {
    return super.connect(signer) as FloodRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FloodRegistryInterface {
    return new utils.Interface(_abi) as FloodRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FloodRegistry {
    return new Contract(address, _abi, signerOrProvider) as FloodRegistry;
  }
}
