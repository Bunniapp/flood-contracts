/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  FloodRegistry,
  FloodRegistryInterface,
} from "../../FloodRegistry.sol/FloodRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWETH9",
        name: "weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "FloodRegistry__InvalidInputLength",
    type: "error",
  },
  {
    inputs: [],
    name: "FloodRegistry__InvalidToken",
    type: "error",
  },
  {
    inputs: [],
    name: "FloodRegistry__RelayerAlreadyWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "FloodRegistry__RelayerNotWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "FloodRegistry__TokenAlreadyWhitelisted",
    type: "error",
  },
  {
    inputs: [],
    name: "FloodRegistry__TokenNotWhitelisted",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferStarted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "relayer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "whitelisted",
        type: "bool",
      },
    ],
    name: "RelayerWhitelisted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "whitelisted",
        type: "bool",
      },
    ],
    name: "TokenWhitelisted",
    type: "event",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "contract IWETH9",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    name: "areTokensWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20[]",
        name: "tokens",
        type: "address[]",
      },
      {
        internalType: "bool[]",
        name: "enabled",
        type: "bool[]",
      },
    ],
    name: "batchWhitelistTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "relayer",
        type: "address",
      },
    ],
    name: "isRelayerWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "isTokenWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "relayer",
        type: "address",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "whitelistRelayer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "whitelistToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "whitelistedRelayers",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "whitelistedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "whitelistedTokensCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000f8f38038062000f8f833981016040819052620000349162000323565b6200003f336200006e565b6001600160a01b038116608052620000598160016200008c565b62000067600060016200008c565b50620003a3565b600180546001600160a01b0319169055620000898162000146565b50565b8015620000ca576000620000a260028462000196565b905080620000c35760405163f6d9d35960e01b815260040160405180910390fd5b50620000fc565b6000620000d9600284620001b6565b905080620000fa57604051630ecc952760e01b815260040160405180910390fd5b505b816001600160a01b03167fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d92826040516200013a911515815260200190565b60405180910390a25050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000620001ad836001600160a01b038416620001cd565b90505b92915050565b6000620001ad836001600160a01b0384166200021f565b60008181526001830160205260408120546200021657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620001b0565b506000620001b0565b60008181526001830160205260408120548015620003185760006200024660018362000355565b85549091506000906200025c9060019062000355565b9050818114620002c857600086600001828154811062000280576200028062000377565b9060005260206000200154905080876000018481548110620002a657620002a662000377565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080620002dc57620002dc6200038d565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050620001b0565b6000915050620001b0565b6000602082840312156200033657600080fd5b81516001600160a01b03811681146200034e57600080fd5b9392505050565b81810381811115620001b057634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b608051610bd0620003bf60003960006101c70152610bd06000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806379ba509711610097578063b5af090f11610066578063b5af090f146101e9578063dfdc4962146101fc578063e30c397814610212578063f2fde38b1461022357600080fd5b806379ba50971461018d5780638da5cb5b146101955780639563b834146101ba578063ad5c4648146101c257600080fd5b80634bbbd846116100d35780634bbbd846146101355780635e1762a01461015d5780635fba298f14610172578063715018a61461018557600080fd5b80630ffb1d8b146100fa5780632384fc741461010f57806339063c6314610122575b600080fd5b61010d610108366004610978565b610236565b005b61010d61011d366004610978565b610277565b61010d6101303660046109f9565b610289565b610148610143366004610a65565b61037c565b60405190151581526020015b60405180910390f35b61016561038f565b6040516101549190610a82565b610148610180366004610acf565b6103a0565b61010d610408565b61010d61041c565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610154565b61016561049b565b6101a27f000000000000000000000000000000000000000000000000000000000000000081565b6101486101f7366004610a65565b6104a7565b6102046104b4565b604051908152602001610154565b6001546001600160a01b03166101a2565b61010d610231366004610a65565b6104c0565b61023e610531565b816001600160a01b03163b60000361026957604051631564b84560e21b815260040160405180910390fd5b610273828261058b565b5050565b61027f610531565b610273828261063c565b610291610531565b8281146102b15760405163046a41b360e31b815260040160405180910390fd5b60005b83811015610375578484828181106102ce576102ce610b11565b90506020020160208101906102e39190610a65565b6001600160a01b03163b60000361030d57604051631564b84560e21b815260040160405180910390fd5b61036385858381811061032257610322610b11565b90506020020160208101906103379190610a65565b84848481811061034957610349610b11565b905060200201602081019061035e9190610b27565b61058b565b8061036d81610b58565b9150506102b4565b5050505050565b60006103896004836106e1565b92915050565b606061039b6002610706565b905090565b6000805b828110156103fe576103de8484838181106103c1576103c1610b11565b90506020020160208101906103d69190610a65565b6002906106e1565b6103ec576000915050610389565b806103f681610b58565b9150506103a4565b5060019392505050565b610410610531565b61041a6000610713565b565b60015433906001600160a01b0316811461048f5760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b61049881610713565b50565b606061039b6004610706565b60006103896002836106e1565b600061039b600261072c565b6104c8610531565b600180546001600160a01b0383166001600160a01b031990911681179091556104f96000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000546001600160a01b0316331461041a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610486565b80156105c457600061059e600284610736565b9050806105be5760405163f6d9d35960e01b815260040160405180910390fd5b506105f3565b60006105d160028461074b565b9050806105f157604051630ecc952760e01b815260040160405180910390fd5b505b816001600160a01b03167fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d9282604051610630911515815260200190565b60405180910390a25050565b801561067557600061064f600484610736565b90508061066f57604051637e47339f60e01b815260040160405180910390fd5b506106a4565b600061068260048461074b565b9050806106a257604051632dab6b1160e21b815260040160405180910390fd5b505b816001600160a01b03167f863009ae39995caa23b32eba163146345d3539356dc4bdaf3c6ae3b96468642d82604051610630911515815260200190565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b606060006106ff83610760565b600180546001600160a01b0319169055610498816107bc565b6000610389825490565b60006106ff836001600160a01b03841661080c565b60006106ff836001600160a01b03841661085b565b6060816000018054806020026020016040519081016040528092919081815260200182805480156107b057602002820191906000526020600020905b81548152602001906001019080831161079c575b50505050509050919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081815260018301602052604081205461085357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610389565b506000610389565b6000818152600183016020526040812054801561094457600061087f600183610b71565b855490915060009061089390600190610b71565b90508181146108f85760008660000182815481106108b3576108b3610b11565b90600052602060002001549050808760000184815481106108d6576108d6610b11565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061090957610909610b84565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610389565b6000915050610389565b6001600160a01b038116811461049857600080fd5b8035801515811461097357600080fd5b919050565b6000806040838503121561098b57600080fd5b82356109968161094e565b91506109a460208401610963565b90509250929050565b60008083601f8401126109bf57600080fd5b50813567ffffffffffffffff8111156109d757600080fd5b6020830191508360208260051b85010111156109f257600080fd5b9250929050565b60008060008060408587031215610a0f57600080fd5b843567ffffffffffffffff80821115610a2757600080fd5b610a33888389016109ad565b90965094506020870135915080821115610a4c57600080fd5b50610a59878288016109ad565b95989497509550505050565b600060208284031215610a7757600080fd5b81356106ff8161094e565b6020808252825182820181905260009190848201906040850190845b81811015610ac35783516001600160a01b031683529284019291840191600101610a9e565b50909695505050505050565b60008060208385031215610ae257600080fd5b823567ffffffffffffffff811115610af957600080fd5b610b05858286016109ad565b90969095509350505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610b3957600080fd5b6106ff82610963565b634e487b7160e01b600052601160045260246000fd5b600060018201610b6a57610b6a610b42565b5060010190565b8181038181111561038957610389610b42565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220957955b7b2bc3ffcf6632ea7215dc67603476fa7e5250b08a7a9aadb267ff9c064736f6c63430008130033";

type FloodRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FloodRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FloodRegistry__factory extends ContractFactory {
  constructor(...args: FloodRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FloodRegistry> {
    return super.deploy(weth, overrides || {}) as Promise<FloodRegistry>;
  }
  override getDeployTransaction(
    weth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(weth, overrides || {});
  }
  override attach(address: string): FloodRegistry {
    return super.attach(address) as FloodRegistry;
  }
  override connect(signer: Signer): FloodRegistry__factory {
    return super.connect(signer) as FloodRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FloodRegistryInterface {
    return new utils.Interface(_abi) as FloodRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FloodRegistry {
    return new Contract(address, _abi, signerOrProvider) as FloodRegistry;
  }
}
