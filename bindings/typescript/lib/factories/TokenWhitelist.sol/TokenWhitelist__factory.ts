/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  TokenWhitelist,
  TokenWhitelistInterface,
} from "../../TokenWhitelist.sol/TokenWhitelist";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "whitelisted",
        type: "bool",
      },
    ],
    name: "TokenWhitelisted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isWhitelisted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "whitelistToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506102cd806100616000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630ffb1d8b1461005157806313af4035146100665780633af32abf146100795780638da5cb5b146100b1575b600080fd5b61006461005f366004610239565b6100dc565b005b610064610074366004610275565b610189565b61009c610087366004610275565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6000546100c4906001600160a01b031681565b6040516001600160a01b0390911681526020016100a8565b6000546001600160a01b0316331461012a5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064015b60405180910390fd5b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d92910160405180910390a25050565b6000546001600160a01b031633146101d25760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610121565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b80356001600160a01b038116811461023457600080fd5b919050565b6000806040838503121561024c57600080fd5b6102558361021d565b91506020830135801515811461026a57600080fd5b809150509250929050565b60006020828403121561028757600080fd5b6102908261021d565b939250505056fea264697066735822122077702ee397a390d12feca3d91edf592b30afa11ff387285ea7918086b696e80d64736f6c63430008110033";

type TokenWhitelistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenWhitelistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenWhitelist__factory extends ContractFactory {
  constructor(...args: TokenWhitelistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenWhitelist> {
    return super.deploy(overrides || {}) as Promise<TokenWhitelist>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TokenWhitelist {
    return super.attach(address) as TokenWhitelist;
  }
  override connect(signer: Signer): TokenWhitelist__factory {
    return super.connect(signer) as TokenWhitelist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenWhitelistInterface {
    return new utils.Interface(_abi) as TokenWhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenWhitelist {
    return new Contract(address, _abi, signerOrProvider) as TokenWhitelist;
  }
}
