pub use allknowingoracletest_mod::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod allknowingoracletest_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "AllKnowingOracleTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static ALLKNOWINGORACLETEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"BondPctChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"bondToken\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"NewRequest\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false},{\"internalType\":\"bool\",\"name\":\"answer\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RequestSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"WARNING_Deprecated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"adjust\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rewind\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"skip\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testAsk\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testAskForOtherProposer\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testBondForStake\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotAskIfNoAllowance\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotAskWithInsufficientBalanceForBond\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bondToken\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotAskWithNonWhitelistedToken\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotSettleAsNonOwner\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotSettleIfAlreadySettled\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"answer\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testSettle\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tip\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static ALLKNOWINGORACLETEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060408190526000805460ff191660011790556001625e79b760e01b031990527f81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a608452737109709ecfa91a80626ff3989d68f67f5b1dd12d63ffa1864960a46020604051808303816000875af115801562000080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a6919062000597565b600880546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b66004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156200013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000161919062000597565b600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f9791f723bf26b668c8cac0664b66d058cdb2a424cfb08c05dd9da570be0eff6f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015620001f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021c919062000597565b600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002bb73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506006604051602001620002a59190620005c2565b60408051601f19818403018152919052620003c0565b600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200038c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506012604051602001620002a591906060808252600d908201526c2bb930b83832b21022ba3432b960991b608082015260a060208201819052600490820152630ae8aa8960e31b60c082015260ff91909116604082015260e00190565b600c80546001600160a01b0319166001600160a01b0392909216919091179055348015620003b957600080fd5b506200079f565b60006001600160a01b0384163b8015620003de57849150506200045c565b6000620003ec858562000463565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200042d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004579190810190620006e2565b509150505b9392505050565b604051638d1cc92560e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc92590620004a190879060040162000737565b6000604051808303816000875af1158015620004c1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004eb9190810190620006e2565b83604051602001620004ff9291906200076c565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620005905760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b606482015260840160405180910390fd5b5092915050565b600060208284031215620005aa57600080fd5b81516001600160a01b03811681146200045c57600080fd5b606081526000620005e76060830160048152635553444360e01b602082015260400190565b82810360208401526200060b8160048152635553444360e01b602082015260400190565b91505060ff8316604083015292915050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200065057818101518382015260200162000636565b8381111562000660576000848401525b50505050565b60006001600160401b03808411156200068357620006836200061d565b604051601f8501601f19908116603f01168101908282118183101715620006ae57620006ae6200061d565b81604052809350858152868686011115620006c857600080fd5b620006d886602083018762000633565b5050509392505050565b600060208284031215620006f557600080fd5b81516001600160401b038111156200070c57600080fd5b8201601f810184136200071e57600080fd5b6200072f8482516020840162000666565b949350505050565b60208152600082518060208401526200075881604085016020870162000633565b601f01601f19169190910160400192915050565b600083516200078081846020880162000633565b8351908301906200079681836020880162000633565b01949350505050565b61645c80620007af6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80639082e6f011610104578063d06d8229116100a2578063fa3e2d6911610071578063fa3e2d69146103d5578063fa7626d4146103dd578063fad89493146103ea578063ff0ced17146103fd57600080fd5b8063d06d822914610389578063d1cdf6ac1461039c578063d82555f1146103af578063e9a79a7b146103c257600080fd5b8063af9bbe5f116100de578063af9bbe5f14610338578063b9c071b41461034b578063ba414fa61461035e578063c88a5e6d1461037657600080fd5b80639082e6f01461030a57806397754ae9146103125780639a8325a01461032557600080fd5b80633bf82db11161017c5780636bce989b1161014b5780636bce989b146102c95780636f597075146102dc578063727cb043146102ef57806387289ca6146102f757600080fd5b80633bf82db11461027a5780634ebf02501461028d5780635a6c1eed146102a05780635ca33863146102c157600080fd5b806329a9e300116101b857806329a9e3001461020f57806329ce9dde146102225780632d6c17a3146102525780633a7684631461026557600080fd5b80630a9254e4146101df578063108554f2146101e9578063233240ee146101fc575b600080fd5b6101e7610405565b005b6101e76101f7366004614dca565b61040f565b6101e761020a366004614df6565b6104e0565b6101e761021d366004614e1a565b6105b4565b610235610230366004614f20565b61065f565b6040516001600160a01b0390911681526020015b60405180910390f35b6101e7610260366004614f98565b610786565b6102356000805160206163e783398151915281565b6101e7610288366004614fb1565b6107c2565b6101e761029b366004614f98565b61089c565b6102b36102ae366004614ff2565b610e8a565b604051908152602001610249565b6101e7610fb5565b6101e76102d7366004614fb1565b6113a9565b6101e76102ea366004614df6565b6113bb565b6101e761145e565b6101e761030536600461502c565b61180e565b6101e7611f15565b6101e761032036600461504a565b61202b565b61023561033336600461509d565b61224b565b6101e7610346366004614fb1565b612345565b6101e7610359366004614f98565b6123ec565b61036661240a565b6040519015158152602001610249565b6101e7610384366004614dca565b61252d565b6101e7610397366004614e1a565b612560565b6101e76103aa366004614f98565b61260b565b6101e76103bd366004614fb1565b6127c0565b6101e76103d0366004614dca565b61286b565b6101e761290a565b6000546103669060ff1681565b6101e76103f8366004614df6565b6129fe565b6101e7612c50565b61040d612eae565b565b60405163c88a5e6d60e01b81526000805160206163e78339815191529063c88a5e6d9061044290859085906004016150da565b600060405180830381600087803b15801561045c57600080fd5b505af1158015610470573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03851660048201526000805160206163e783398151915292506306447d5691506024015b600060405180830381600087803b1580156104c457600080fd5b505af11580156104d8573d6000803e3d6000fd5b505050505050565b60405163c88a5e6d60e01b81526000805160206163e78339815191529063c88a5e6d90610517908490600160801b906004016150da565b600060405180830381600087803b15801561053157600080fd5b505af1158015610545573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b03841660048201526000805160206163e7833981519152925063ca669fa791506024015b600060405180830381600087803b15801561059957600080fd5b505af11580156105ad573d6000803e3d6000fd5b5050505050565b60405163c88a5e6d60e01b81526000805160206163e78339815191529063c88a5e6d906105eb908590600160801b906004016150da565b600060405180830381600087803b15801561060557600080fd5b505af1158015610619573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b038086166004830152841660248201526000805160206163e783398151915292506347e50cce91506044016104aa565b604051638d1cc92560e01b815260009081906000805160206163e783398151915290638d1cc9259061069590879060040161514b565b6000604051808303816000875af11580156106b4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106dc919081019061515e565b836040516020016106ee9291906151cc565b60405160208183030381529060405290508051602082016000f091506001600160a01b03821661077f5760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b60648201526084015b60405180910390fd5b5092915050565b6000805160206163e783398151915263e5d6bf026107a48342615211565b6040518263ffffffff1660e01b815260040161057f91815260200190565b60405163c88a5e6d60e01b81526000805160206163e78339815191529063c88a5e6d906107f590869085906004016150da565b600060405180830381600087803b15801561080f57600080fd5b505af1158015610823573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b038087166004830152851660248201526000805160206163e783398151915292506345b5607891506044015b600060405180830381600087803b15801561087f57600080fd5b505af1158015610893573d6000803e3d6000fd5b50505050505050565b6000805160206163e7833981519152634c63e5626108bd601960001961523e565b6040516001600160e01b031960e084901b1681529084106004820152602401600060405180830381600087803b1580156108f657600080fd5b505af115801561090a573d6000803e3d6000fd5b5050600d546040516303ef4cfb60e11b815260048101859052600093506001600160a01b0390911691506307de99f690602401602060405180830381865afa15801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e9190615252565b600854600954600b54604080516001600160a01b0394851660208083018290529486168284015294909216606083018190526080830188905260a08084018790528251808503909101815260c0909301909152815191909201209293506109e591856113a9565b600b54600954610a02916001600160a01b039081169116846113a9565b600b546008546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015610a53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a779190615252565b600b546009546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa158015610ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aed9190615252565b60085460405163ca669fa760e01b81526001600160a01b0390911660048201529091506000805160206163e78339815191529063ca669fa790602401600060405180830381600087803b158015610b4357600080fd5b505af1158015610b57573d6000803e3d6000fd5b5050600d546040516381bad6f360e01b8152600160048201819052602482018190526044820181905260648201526001600160a01b0390911660848201526000805160206163e783398151915292506381bad6f3915060a401600060405180830381600087803b158015610bca57600080fd5b505af1158015610bde573d6000803e3d6000fd5b5050600954600854600b546040516001600160a01b039384169550918316935087927fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f6992610c3392909116908b908b9061526b565b60405180910390a4600854600954600b54600092610c62926001600160a01b03918216929082169116896133d5565b9050610c6e8482613458565b600d54604051639d86698560e01b8152600481018690526000918291829182918291829182916001600160a01b031690639d8669859060240160e060405180830381865afa158015610cc4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce8919061528c565b600854969d50949b50929950909750955093509150610d119088906001600160a01b0316613538565b600954610d289087906001600160a01b0316613538565b600b54610d3f9086906001600160a01b0316613538565b610d5c816002811115610d5457610d54615319565b60015b61361a565b610d678260006136e7565b610d71838d61361a565b610d7b848e61361a565b600b546008546040516370a0823160e01b81526001600160a01b039182166004820152610dfb9291909116906370a0823190602401602060405180830381865afa158015610dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df19190615252565b610d578f8d615211565b600b546009546040516370a0823160e01b81526001600160a01b039182166004820152610e7b9291909116906370a0823190602401602060405180830381865afa158015610e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e719190615252565b610d578e8c615211565b50505050505050505050505050565b600081831115610f025760405162461bcd60e51b815260206004820152603a60248201527f5465737420626f756e642875696e743235362c75696e743235362c75696e743260448201527f3536293a204d6178206973206c657373207468616e206d696e2e0000000000006064820152608401610776565b6000610f0e8484615211565b905080600003610f2057839150610f58565b6000198103610f3157849150610f58565b610f3a8161532f565b90506000610f488287615348565b9050610f54818661535c565b9250505b60408051818152600c818301526b109bdd5b990814995cdd5b1d60a21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1509392505050565b600a54600954600b54604080516001600160a01b0394851660208083018290529486168284015292851660608201819052606460808301819052601960a08085018290528551808603909101815260c09094019094528251929095019190912060085494959294909261102a929116866113a9565b600b54600954611047916001600160a01b039081169116856113a9565b600b546008546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015611098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bc9190615252565b60085460405163ca669fa760e01b81526001600160a01b0390911660048201529091506000805160206163e78339815191529063ca669fa790602401600060405180830381600087803b15801561111257600080fd5b505af1158015611126573d6000803e3d6000fd5b5050600d546040516381bad6f360e01b8152600160048201819052602482018190526044820181905260648201526001600160a01b0390911660848201526000805160206163e783398151915292506381bad6f3915060a401600060405180830381600087803b15801561119957600080fd5b505af11580156111ad573d6000803e3d6000fd5b5050600954600b546040516001600160a01b039283169450878316935086927fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f69926111fe929116908b908b9061526b565b60405180910390a4600954600b546112269185916001600160a01b03918216911660646133d5565b50600d54604051639d86698560e01b8152600481018490526000918291829182918291829182916001600160a01b031690639d8669859060240160e060405180830381865afa15801561127d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a1919061528c565b96509650965096509650965096506112b9878b613538565b6009546112d09087906001600160a01b0316613538565b600b546112e79086906001600160a01b0316613538565b6112fc816002811115610d5457610d54615319565b6113078260006136e7565b611311838c61361a565b61131b848d61361a565b600b546008546040516370a0823160e01b81526001600160a01b03918216600482015261139b9291909116906370a0823190602401602060405180830381865afa15801561136d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113919190615252565b610d578e8b615211565b505050505050505050505050565b6113b6838383600061202b565b505050565b60405163c88a5e6d60e01b81526000805160206163e78339815191529063c88a5e6d906113f2908490600160801b906004016150da565b600060405180830381600087803b15801561140c57600080fd5b505af1158015611420573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03841660048201526000805160206163e783398151915292506306447d56915060240161057f565b600d546040516303ef4cfb60e11b815260646004820181905260019290916000916001600160a01b0316906307de99f690602401602060405180830381865afa1580156114af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d39190615252565b600b546008549192506114f3916001600160a01b039182169116846113a9565b600b54600954611510916001600160a01b039081169116836113a9565b60085460405163ca669fa760e01b81526001600160a01b0390911660048201526000805160206163e78339815191529063ca669fa790602401600060405180830381600087803b15801561156357600080fd5b505af1158015611577573d6000803e3d6000fd5b5050600854600954600b54600094506115a293506001600160a01b03928316929182169116866133d5565b600d5460408051638da5cb5b60e01b815290519293506000805160206163e78339815191529263ca669fa7926001600160a01b031691638da5cb5b9160048083019260209291908290030181865afa158015611602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116269190615374565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801561166757600080fd5b505af115801561167b573d6000803e3d6000fd5b505050506116898185613842565b600d5460408051638da5cb5b60e01b815290516000805160206163e78339815191529263ca669fa7926001600160a01b0390911691638da5cb5b916004808201926020929091908290030181865afa1580156116e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170d9190615374565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401600060405180830381600087803b15801561174e57600080fd5b505af1158015611762573d6000803e3d6000fd5b505060408051602480820186905282518083039091018152604490910182526020810180516001600160e01b031663b677167760e01b179052905163f28dceb360e01b81526000805160206163e7833981519152935063f28dceb392506117cc919060040161514b565b600060405180830381600087803b1580156117e657600080fd5b505af11580156117fa573d6000803e3d6000fd5b505050506118088185613842565b50505050565b6000805160206163e7833981519152634c63e56261182f601960001961523e565b6040516001600160e01b031960e084901b1681529084106004820152602401600060405180830381600087803b15801561186857600080fd5b505af115801561187c573d6000803e3d6000fd5b5050600d546040516303ef4cfb60e11b815260048101859052600093506001600160a01b0390911691506307de99f690602401602060405180830381865afa1580156118cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f09190615252565b600b54600854919250611910916001600160a01b039182169116846113a9565b600b5460095461192d916001600160a01b039081169116836113a9565b60085460405163ca669fa760e01b81526001600160a01b0390911660048201526000805160206163e78339815191529063ca669fa790602401600060405180830381600087803b15801561198057600080fd5b505af1158015611994573d6000803e3d6000fd5b5050600d54600854600954600b54604051632bd6267f60e21b8152600096506001600160a01b03948516955063af5899fc946119dc9481169381169216908990600401615391565b6020604051808303816000875af11580156119fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1f9190615252565b600b546008546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa158015611a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a959190615252565b600b546009546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa158015611ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0b9190615252565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b869190615374565b60405163ca669fa760e01b81526001600160a01b03821660048201529091506000805160206163e78339815191529063ca669fa790602401600060405180830381600087803b158015611bd857600080fd5b505af1158015611bec573d6000803e3d6000fd5b5050600d54604051631f86c38760e31b8152600481018890528a151560248201526001600160a01b03909116925063fc361c389150604401600060405180830381600087803b158015611c3e57600080fd5b505af1158015611c52573d6000803e3d6000fd5b5050600d54604051639d86698560e01b815260048101889052600093508392506001600160a01b0390911690639d8669859060240160e060405180830381865afa158015611ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc8919061528c565b965096505050505050611ced816002811115611ce657611ce6615319565b600261361a565b611cf7828a6136e7565b881515600103611e0d57600b546008546040516370a0823160e01b81526001600160a01b039182166004820152611d8c9291909116906370a0823190602401602060405180830381865afa158015611d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d779190615252565b88611d828b8961535c565b610d57919061535c565b600b546009546040516370a0823160e01b81526001600160a01b039182166004820152611e089291909116906370a0823190602401602060405180830381865afa158015611dde573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e029190615252565b8561361a565b611f0a565b600b546008546040516370a0823160e01b81526001600160a01b039182166004820152611e899291909116906370a0823190602401602060405180830381865afa158015611e5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e839190615252565b8661361a565b600b546009546040516370a0823160e01b81526001600160a01b039182166004820152611f0a9291909116906370a0823190602401602060405180830381865afa158015611edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eff9190615252565b88611d828b8861535c565b505050505050505050565b60085460405163ca669fa760e01b81526001600160a01b0390911660048201526000805160206163e78339815191529063ca669fa790602401600060405180830381600087803b158015611f6857600080fd5b505af1158015611f7c573d6000803e3d6000fd5b505060405163f28dceb360e01b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526000805160206163e7833981519152925063f28dceb39150606401600060405180830381600087803b158015611feb57600080fd5b505af1158015611fff573d6000803e3d6000fd5b5050600854600954600b5461202894506001600160a01b039283169350908216911660646133d5565b50565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009287169161207f916153bb565b6000604051808303816000865af19150503d80600081146120bc576040519150601f19603f3d011682016040523d82523d6000602084013e6120c1565b606091505b509150506000818060200190518101906120db9190615252565b905061214784612141876121186370a0823160e01b6120fb60018d61387b565b9060038201805463ffffffff191660e09290921c91909117905590565b90600282018054600181018255600091825260209091206001600160a01b039290921691015590565b906138a0565b82156104d85760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290516000916001600160a01b0389169161218f91906153bb565b6000604051808303816000865af19150503d80600081146121cc576040519150601f19603f3d011682016040523d82523d6000602084013e6121d1565b606091505b509150506000818060200190518101906121eb9190615252565b905082861015612210576121ff8684615211565b6122099082615211565b9050612227565b61221a8387615211565b612224908261535c565b90505b612241816121416318160ddd60e01b6120fb60018d61387b565b5050505050505050565b604051638d1cc92560e01b815260009081906000805160206163e783398151915290638d1cc9259061228190869060040161514b565b6000604051808303816000875af11580156122a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122c8919081019061515e565b90508051602082016000f091506001600160a01b03821661233f5760405162461bcd60e51b815260206004820152602b60248201527f54657374206465706c6f79436f646528737472696e67293a204465706c6f796d60448201526a32b73a103330b4b632b21760a91b6064820152608401610776565b50919050565b60405163c88a5e6d60e01b81526000805160206163e78339815191529063c88a5e6d9061237890869085906004016150da565b600060405180830381600087803b15801561239257600080fd5b505af11580156123a6573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b038087166004830152851660248201526000805160206163e783398151915292506347e50cce9150604401610865565b6000805160206163e783398151915263e5d6bf026107a4834261535c565b60008054610100900460ff161561242a5750600054610100900460ff1690565b60006000805160206163e78339815191523b15612528576040516000906000805160206163e7833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4906124929083906519985a5b195960d21b906020016150da565b60408051601f19818403018152908290526124b092916020016153d7565b60408051601f19818403018152908290526124ca916153bb565b6000604051808303816000865af19150503d8060008114612507576040519150601f19603f3d011682016040523d82523d6000602084013e61250c565b606091505b50915050808060200190518101906125249190615408565b9150505b919050565b60405163c88a5e6d60e01b81526000805160206163e78339815191529063c88a5e6d906104aa90859085906004016150da565b60405163c88a5e6d60e01b81526000805160206163e78339815191529063c88a5e6d90612597908590600160801b906004016150da565b600060405180830381600087803b1580156125b157600080fd5b505af11580156125c5573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b038086166004830152841660248201526000805160206163e783398151915292506345b5607891506044016104aa565b612618601960001961523e565b811061272d57604051601160248201526000805160206163e78339815191529063f28dceb39060440160408051601f198184030181529181526020820180516001600160e01b0316634e487b7160e01b1790525160e083901b6001600160e01b031916815261268a919060040161514b565b600060405180830381600087803b1580156126a457600080fd5b505af11580156126b8573d6000803e3d6000fd5b5050600d546040516303ef4cfb60e11b8152600481018590526001600160a01b0390911692506307de99f69150602401602060405180830381865afa158015612705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127299190615252565b5050565b6000606461273c836019615425565b612746919061523e565b600d546040516303ef4cfb60e11b815260048101859052919250612729916001600160a01b03909116906307de99f690602401602060405180830381865afa158015612796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127ba9190615252565b8261361a565b7f42b963ace015abb7c727e77dec115c5f418f4f96d9ec897f85c202793274661a604051612845906020808252603b908201527f54686520607469706020737464636865617420686173206265656e206465707260408201527f6563617465642e2055736520606465616c6020696e73746561642e0000000000606082015260800190565b60405180910390a16113b681612141846121186370a0823160e01b6120fb60018a61387b565b60405163c88a5e6d60e01b81526000805160206163e78339815191529063c88a5e6d9061289e90859085906004016150da565b600060405180830381600087803b1580156128b857600080fd5b505af11580156128cc573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b03851660048201526000805160206163e7833981519152925063ca669fa791506024016104aa565b60405163f28dceb360e01b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526000805160206163e78339815191529063f28dceb390606401600060405180830381600087803b15801561296d57600080fd5b505af1158015612981573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b0390911660048201526000805160206163e7833981519152925063ca669fa79150602401600060405180830381600087803b1580156129d857600080fd5b505af11580156129ec573d6000803e3d6000fd5b5050505061040d6000801b6001613842565b600b54604051632631f2b160e11b81526001600160a01b038381169216919091141560048201526000805160206163e783398151915290634c63e56290602401600060405180830381600087803b158015612a5857600080fd5b505af1158015612a6c573d6000803e3d6000fd5b5050600c54604051632631f2b160e11b81526001600160a01b038581169216919091141560048201526000805160206163e78339815191529250634c63e5629150602401600060405180830381600087803b158015612aca57600080fd5b505af1158015612ade573d6000803e3d6000fd5b5050604080516001600160a01b03851660248083019190915282518083039091018152604490910182526020810180516001600160e01b031663010d7e6160e11b179052905163f28dceb360e01b81526000805160206163e7833981519152935063f28dceb39250612b53919060040161514b565b600060405180830381600087803b158015612b6d57600080fd5b505af1158015612b81573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b0390911660048201526000805160206163e7833981519152925063ca669fa79150602401600060405180830381600087803b158015612bd857600080fd5b505af1158015612bec573d6000803e3d6000fd5b5050600d54600854600954604051632bd6267f60e21b81526001600160a01b03938416955063af5899fc9450612c319392831692909116908690606490600401615391565b6020604051808303816000875af1158015612705573d6000803e3d6000fd5b60085460405163ca669fa760e01b81526001600160a01b0390911660048201526000805160206163e78339815191529063ca669fa790602401600060405180830381600087803b158015612ca357600080fd5b505af1158015612cb7573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350612cf392909116906000906004016150da565b6020604051808303816000875af1158015612d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d369190615408565b5060405163f28dceb360e01b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526000805160206163e78339815191529063f28dceb390606401600060405180830381600087803b158015612da257600080fd5b505af1158015612db6573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b0390911660048201526000805160206163e7833981519152925063ca669fa79150602401600060405180830381600087803b158015612e0d57600080fd5b505af1158015612e21573d6000803e3d6000fd5b5050600d54600854600954600b54604051632bd6267f60e21b81526001600160a01b03948516965063af5899fc9550612e6b94938416939283169290911690606490600401615391565b6020604051808303816000875af1158015612e8a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120289190615252565b612eb66138aa565b604051612ec290614d76565b604051809103906000f080158015612ede573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b815260048101929092526024820152601060448201526f416c6c4b6e6f77696e674f7261636c6560801b60648201526000805160206163e78339815191529063c657c71890608401600060405180830381600087803b158015612f6c57600080fd5b505af1158015612f80573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206163e783398151915292506306447d569150602401600060405180830381600087803b158015612fd757600080fd5b505af1158015612feb573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506130289290911690600019906004016150da565b6020604051808303816000875af1158015613047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306b9190615408565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926130a492911690600019906004016150da565b6020604051808303816000875af11580156130c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e79190615408565b50604080516390c5013b60e01b815290516000805160206163e7833981519152916390c5013b91600480830192600092919082900301818387803b15801561312e57600080fd5b505af1158015613142573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206163e783398151915292506306447d569150602401600060405180830381600087803b15801561319957600080fd5b505af11580156131ad573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506131ea9290911690600019906004016150da565b6020604051808303816000875af1158015613209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322d9190615408565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261326692911690600019906004016150da565b6020604051808303816000875af1158015613285573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132a99190615408565b50604080516390c5013b60e01b815290516000805160206163e7833981519152916390c5013b91600480830192600092919082900301818387803b1580156132f057600080fd5b505af1158015613304573d6000803e3d6000fd5b5050600d54600b54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b15801561335857600080fd5b505af115801561336c573d6000803e3d6000fd5b5050600d54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b91506044015b600060405180830381600087803b1580156133c157600080fd5b505af1158015611808573d6000803e3d6000fd5b600d54604051632bd6267f60e21b81526000916001600160a01b03169063af5899fc9061340c908890889088908890600401615391565b6020604051808303816000875af115801561342b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344f9190615252565b95945050505050565b808214612729576000805160206163c78339815191526040516134ba9060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b627974604082015264657333325d60d81b606082015260800190565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99816040516134f19190615444565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f9982604051613528919061547c565b60405180910390a1612729613a89565b806001600160a01b0316826001600160a01b031614612729576000805160206163c78339815191526040516135ac9060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f816040516135e391906154a6565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f8260405161352891906154ea565b808214612729576000805160206163c78339815191526040516136799060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516136b09190615444565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051613528919061547c565b80151582151514612729576000805160206163c783398151915260405161374a9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838161379b576040518060400160405280600581526020016466616c736560d81b8152506137b9565b604051806040016040528060048152602001637472756560e01b8152505b6040516137c69190615514565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358382613817576040518060400160405280600581526020016466616c736560d81b815250613835565b604051806040016040528060048152602001637472756560e01b8152505b6040516135289190615550565b600d54604051631f86c38760e31b81526004810184905282151560248201526001600160a01b039091169063fc361c38906044016104aa565b6005820180546001600160a01b0319166001600160a01b039290921691909117905590565b6127298282613b82565b600854604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526005604482015264416c69636560d81b60648201526000805160206163e78339815191529063c657c71890608401600060405180830381600087803b15801561391857600080fd5b505af115801561392c573d6000803e3d6000fd5b5050600954604080516318caf8e360e31b81526001600160a01b039092166004830152602482015260036044820152622137b160e91b60648201526000805160206163e7833981519152925063c657c7189150608401600060405180830381600087803b15801561399c57600080fd5b505af11580156139b0573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526007604482015266436861726c696560c81b60648201526000805160206163e7833981519152925063c657c7189150608401600060405180830381600087803b158015613a2457600080fd5b505af1158015613a38573d6000803e3d6000fd5b5050604080516318caf8e360e31b815230600482015260248101919091526003604482015262596f7560e81b60648201526000805160206163e7833981519152925063c657c71891506084016133a7565b6000805160206163e78339815191523b15613b71576040516000906000805160206163e7833981519152907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc490613af29083906519985a5b195960d21b9060019060200161526b565b60408051601f1981840301815290829052613b1092916020016153d7565b60408051601f1981840301815290829052613b2a916153bb565b6000604051808303816000865af19150503d8060008114613b67576040519150601f19603f3d011682016040523d82523d6000602084013e613b6c565b606091505b505050505b6000805461ff001916610100179055565b600582015460038301546004840154600285018054604080516020808402820181019092528281526001600160a01b039096169560e09590951b9460009390929091830182828015613bf357602002820191906000526020600020905b815481526020019060010190808311613bdf575b50505050509050600083613c0683613f59565b604051602001613c179291906153d7565b60408051601f198184030181528282526001600160a01b038816600090815260018b0160209081528382206001600160e01b03198a168352815292812091945090929091613c6991869188910161557a565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16613ca157613c9f87613ff9565b505b6001600160a01b0385166000908152602088815260408083206001600160e01b0319881684528252808320905190918391613ce091879189910161557a565b6040516020818303038152906040528051906020012081526020019081526020016000205460001b9050600080876001600160a01b031684604051613d2591906153bb565b600060405180830381855afa9150503d8060008114613d60576040519150601f19603f3d011682016040523d82523d6000602084013e613d65565b606091505b509150613d7e905081613d79886020615425565b614cf9565b604051630667f9d760e41b8152909250600091506000805160206163e78339815191529063667f9d7090613db8908b9087906004016150da565b6020604051808303816000875af1158015613dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dfb9190615252565b9050808214613eaf5760405162461bcd60e51b815260206004820152606e60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526d39b73a1039bab83837b93a32b21760911b60a482015260c401610776565b6040516370ca10bb60e01b81526000805160206163e7833981519152906370ca10bb90613ee4908b9087908e9060040161526b565b600060405180830381600087803b158015613efe57600080fd5b505af1158015613f12573d6000803e3d6000fd5b50505060058b0180546001600160a01b03191690555060038a01805463ffffffff19169055613f4560028b016000614d83565b896004016000905550505050505050505050565b6060600082516020613f6b9190615425565b67ffffffffffffffff811115613f8357613f83614e53565b6040519080825280601f01601f191660200182016040528015613fad576020820181803683370190505b50905060005b835181101561077f576000848281518110613fd057613fd06155b4565b602002602001015190508082602002602001840152508080613ff19061532f565b915050613fb3565b600581015460038201546004830154600284018054604080516020808402820181019092528281526000966001600160a01b03169560e01b94938793919290919083018282801561406957602002820191906000526020600020905b815481526020019060010190808311614055575b5050506001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a16845282528083209051959650949193506140b39250859187910161557a565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff161561414f576001600160a01b0384166000908152602087815260408083206001600160e01b0319871684528252808320905190929161411f91859187910161557a565b60405160208183030381529060405280519060200120815260200190815260200160002054945050505050919050565b60008361415b83613f59565b60405160200161416c9291906153d7565b604051602081830303815290604052905060008051602061640783398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156141c957600080fd5b505af11580156141dd573d6000803e3d6000fd5b50505050600080866001600160a01b0316836040516141fc91906153bb565b600060405180830381855afa9150503d8060008114614237576040519150601f19603f3d011682016040523d82523d6000602084013e61423c565b606091505b509150614250905081613d79876020615425565b6040516365bc948160e01b81526001600160a01b0389166004820152909250600091506000805160206163e7833981519152906365bc9481906024016000604051808303816000875af11580156142ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526142d3919081019061564a565b509050805160010361460c57600060008051602061640783398151915260001c6001600160a01b031663667f9d708984600081518110614315576143156155b4565b60200260200101516040518363ffffffff1660e01b815260040161433a9291906150da565b6020604051808303816000875af1158015614359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061437d9190615252565b9050806143db577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a588836000815181106143b9576143b96155b4565b602002602001015160001c6040516143d29291906150da565b60405180910390a15b80831461448c5760405162461bcd60e51b815260206004820152606d60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526c1cdb9d081cdd5c1c1bdc9d1959609a1b60a482015260c401610776565b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed888887896040516020016144c292919061557a565b60405160208183030381529060405280519060200120856000815181106144eb576144eb6155b4565b602002602001015160001c60405161450694939291906156a4565b60405180910390a181600081518110614521576145216155b4565b6020908102919091018101516001600160a01b038a1660009081528c835260408082206001600160e01b03198c168352845280822090519293909261456a918a918c910161557a565b60408051601f1981840301815291815281516020928301208352828201939093529082016000908120939093556001600160a01b038b16835260018d810182528284206001600160e01b03198c168552825282842092519093916145d2918a918c910161557a565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff191691151591909117905550614b84565b600181511115614b145760005b8151811015614b0e57600060008051602061640783398151915260001c6001600160a01b031663667f9d708a858581518110614657576146576155b4565b60200260200101516040518363ffffffff1660e01b815260040161467c9291906150da565b6020604051808303816000875af115801561469b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146bf9190615252565b90508061471c577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a5898484815181106146fa576146fa6155b4565b602002602001015160001c6040516147139291906150da565b60405180910390a15b60008051602061640783398151915260001c6001600160a01b03166370ca10bb8a85858151811061474f5761474f6155b4565b602002602001015161133760f01b6040518463ffffffff1660e01b815260040161477b9392919061526b565b600060405180830381600087803b15801561479557600080fd5b505af11580156147a9573d6000803e3d6000fd5b50505050600060608a6001600160a01b0316876040516147c991906153bb565b600060405180830381855afa9150503d8060008114614804576040519150601f19603f3d011682016040523d82523d6000602084013e614809565b606091505b50909250905061481e81613d798b6020615425565b9550818015614831575061133760f01b86145b15614a6c577f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c60405160200161486c92919061557a565b60405160208183030381529060405280519060200120888881518110614894576148946155b4565b602002602001015160001c6040516148af94939291906156a4565b60405180910390a18484815181106148c9576148c96155b4565b6020908102919091018101516001600160a01b038d1660009081528f835260408082206001600160e01b03198f1683528452808220905192939092614912918d918f910161557a565b6040516020818303038152906040528051906020012081526020019081526020016000208190555060018d60010160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160e01b0319166001600160e01b031916815260200190815260200160002060008a8c60405160200161499d92919061557a565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555060008051602061640783398151915260001c6001600160a01b03166370ca10bb8c878781518110614a0b57614a0b6155b4565b6020026020010151866040518463ffffffff1660e01b8152600401614a329392919061526b565b600060405180830381600087803b158015614a4c57600080fd5b505af1158015614a60573d6000803e3d6000fd5b50505050505050614b0e565b60008051602061640783398151915260001c6001600160a01b03166370ca10bb8c878781518110614a9f57614a9f6155b4565b6020026020010151866040518463ffffffff1660e01b8152600401614ac69392919061526b565b600060405180830381600087803b158015614ae057600080fd5b505af1158015614af4573d6000803e3d6000fd5b505050505050508080614b069061532f565b915050614619565b50614b84565b6040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e6064820152608401610776565b6001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a16845282528083209051909291614bc69188918a910161557a565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16614c535760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b6064820152608401610776565b6005890180546001600160a01b031916905560038901805463ffffffff19169055614c8260028a016000614d83565b600060048a018190556001600160a01b038816815260208a815260408083206001600160e01b03198a16845282528083209051909291614cc69188918a910161557a565b60405160208183030381529060405280519060200120815260200190815260200160002054975050505050505050919050565b60008060006020855111614d0e578451614d11565b60205b905060005b81811015614d6c57614d29816008615425565b86614d34838861535c565b81518110614d4457614d446155b4565b01602001516001600160f81b031916901c929092179180614d648161532f565b915050614d16565b5090949350505050565b610cf2806156d583390190565b508054600082559060005260206000209081019061202891905b80821115614db15760008155600101614d9d565b5090565b6001600160a01b038116811461202857600080fd5b60008060408385031215614ddd57600080fd5b8235614de881614db5565b946020939093013593505050565b600060208284031215614e0857600080fd5b8135614e1381614db5565b9392505050565b60008060408385031215614e2d57600080fd5b8235614e3881614db5565b91506020830135614e4881614db5565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614e9257614e92614e53565b604052919050565b600067ffffffffffffffff821115614eb457614eb4614e53565b50601f01601f191660200190565b6000614ed5614ed084614e9a565b614e69565b9050828152838383011115614ee957600080fd5b828260208301376000602084830101529392505050565b600082601f830112614f1157600080fd5b614e1383833560208501614ec2565b60008060408385031215614f3357600080fd5b823567ffffffffffffffff80821115614f4b57600080fd5b614f5786838701614f00565b93506020850135915080821115614f6d57600080fd5b508301601f81018513614f7f57600080fd5b614f8e85823560208401614ec2565b9150509250929050565b600060208284031215614faa57600080fd5b5035919050565b600080600060608486031215614fc657600080fd5b8335614fd181614db5565b92506020840135614fe181614db5565b929592945050506040919091013590565b60008060006060848603121561500757600080fd5b505081359360208301359350604090920135919050565b801515811461202857600080fd5b6000806040838503121561503f57600080fd5b8235614de88161501e565b6000806000806080858703121561506057600080fd5b843561506b81614db5565b9350602085013561507b81614db5565b92506040850135915060608501356150928161501e565b939692955090935050565b6000602082840312156150af57600080fd5b813567ffffffffffffffff8111156150c657600080fd5b6150d284828501614f00565b949350505050565b6001600160a01b03929092168252602082015260400190565b60005b8381101561510e5781810151838201526020016150f6565b838111156118085750506000910152565b600081518084526151378160208601602086016150f3565b601f01601f19169290920160200192915050565b602081526000614e13602083018461511f565b60006020828403121561517057600080fd5b815167ffffffffffffffff81111561518757600080fd5b8201601f8101841361519857600080fd5b80516151a6614ed082614e9a565b8181528560208385010111156151bb57600080fd5b61344f8260208301602086016150f3565b600083516151de8184602088016150f3565b8351908301906151f28183602088016150f3565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015615223576152236151fb565b500390565b634e487b7160e01b600052601260045260246000fd5b60008261524d5761524d615228565b500490565b60006020828403121561526457600080fd5b5051919050565b6001600160a01b039390931683526020830191909152604082015260600190565b600080600080600080600060e0888a0312156152a757600080fd5b87516152b281614db5565b60208901519097506152c381614db5565b60408901519096506152d481614db5565b80955050606088015193506080880151925060a08801516152f48161501e565b60c08901519092506003811061530957600080fd5b8091505092959891949750929550565b634e487b7160e01b600052602160045260246000fd5b600060018201615341576153416151fb565b5060010190565b60008261535757615357615228565b500690565b6000821982111561536f5761536f6151fb565b500190565b60006020828403121561538657600080fd5b8151614e1381614db5565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b600082516153cd8184602087016150f3565b9190910192915050565b6001600160e01b03198316815281516000906153fa8160048501602087016150f3565b919091016004019392505050565b60006020828403121561541a57600080fd5b8151614e138161501e565b600081600019048311821515161561543f5761543f6151fb565b500290565b60408152600061546e60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b60408152600061546e60408301600a815269080808081058dd1d585b60b21b602082015260400190565b6040815260006154d060408301600a8152690808115e1c1958dd195960b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b6040815260006154d060408301600a815269080808081058dd1d585b60b21b602082015260400190565b60408152600061553e60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b82810360208401526150d2818561511f565b60408152600061553e60408301600a815269080808081058dd1d585b60b21b602082015260400190565b825160009082906020808701845b838110156155a457815185529382019390820190600101615588565b5050948252509092019392505050565b634e487b7160e01b600052603260045260246000fd5b600082601f8301126155db57600080fd5b8151602067ffffffffffffffff8211156155f7576155f7614e53565b8160051b615606828201614e69565b928352848101820192828101908785111561562057600080fd5b83870192505b8483101561563f57825182529183019190830190615626565b979650505050505050565b6000806040838503121561565d57600080fd5b825167ffffffffffffffff8082111561567557600080fd5b615681868387016155ca565b9350602085015191508082111561569757600080fd5b50614f8e858286016155ca565b6001600160a01b039490941684526001600160e01b0319929092166020840152604083015260608201526080019056fe608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350601960038190556040519081527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a1610c578061009b6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461010d5780639d86698514610138578063af5899fc146101ab578063daf9c210146101be578063fc361c38146101f157600080fd5b806307de99f6146100a35780630ffb1d8b146100c957806313af4035146100de578063391fe4e2146100f15780638945bd28146100fa575b600080fd5b6100b66100b13660046109e4565b610204565b6040519081526020015b60405180910390f35b6100dc6100d7366004610a2a565b610215565b005b6100dc6100ec366004610a61565b610273565b6100b660035481565b6100dc6101083660046109e4565b6102e8565b600054610120906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b6101986101463660046109e4565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b0395861695938416949390921692909160ff8082169161010090041687565b6040516100c09796959493929190610a99565b6100b66101b9366004610aff565b61034d565b6101e16101cc366004610a61565b60026020526000908152604090205460ff1681565b60405190151581526020016100c0565b6100dc6101ff366004610b4a565b6105ee565b600061020f8261093e565b92915050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f90610b6f565b60405180910390fd5b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b6000546001600160a01b0316331461029d5760405162461bcd60e51b815260040161023f90610b6f565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103125760405162461bcd60e51b815260040161023f90610b6f565b60038190556040518181527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a150565b6001600160a01b03821660009081526002602052604081205460ff166103915760405163010d7e6160e11b81526001600160a01b038416600482015260240161023f565b600061039c8361093e565b604080516001600160a01b03808a1660208301528089169282019290925290861660608201526080810185905260a0810182905290915060009060c00160408051601f19818403018152919052805160209091012090506001600082815260016020526040902060050154610100900460ff16600281111561042057610420610a83565b036104415760405163d5e880e960e01b81526004810182905260240161023f565b60006040518060e00160405280896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b03168152602001868152602001848152602001600015158152602001600160028111156104a3576104a3610a83565b9052600083815260016020818152604092839020845181546001600160a01b03199081166001600160a01b03928316178355928601519382018054841694821694909417909355928401516002808501805490931691909316179055606083015160038301556080830151600483015560a083015160058301805460ff198116921515928317825560c0860151959650869593919261ffff1990911661ff0019909116179061010090849081111561055d5761055d610a83565b021790555061057a9150506001600160a01b03871688308661095a565b61058f6001600160a01b03871633308861095a565b604080516001600160a01b03888116825260208201889052918101859052818916918a169084907fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699060600160405180910390a4509695505050505050565b6000546001600160a01b031633146106185760405162461bcd60e51b815260040161023f90610b6f565b6000828152600160208181526040808420815160e08101835281546001600160a01b03908116825294820154851693810193909352600280820154909416918301919091526003810154606083015260048101546080830152600581015460ff808216151560a08501529293919260c085019261010090920416908111156106a2576106a2610a83565b60028111156106b3576106b3610a83565b905250905060028160c0015160028111156106d0576106d0610a83565b036106f15760405163b677167760e01b81526004810184905260240161023f565b81151560010361079c5780604001516001600160a01b031663a9059cbb8260000151836060015184608001516107279190610bab565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107969190610bc3565b50610839565b80604001516001600160a01b031663a9059cbb8260200151836060015184608001516107c89190610bab565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108379190610bc3565b505b600260c0820181815283151560a08401908152600086815260016020818152604092839020875181546001600160a01b039182166001600160a01b0319918216178355928901519382018054948216948416949094179093559287015183870180549190931691161790556060850151600382015560808501516004820155905160058201805491151560ff198316811782559351869593949093919261ff001990911661ffff1990911617906101009084908111156108fb576108fb610a83565b02179055505060405183151581528491507fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a2505050565b60006064600354836109509190610be0565b61020f9190610bff565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806109dd5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161023f565b5050505050565b6000602082840312156109f657600080fd5b5035919050565b80356001600160a01b0381168114610a1457600080fd5b919050565b8015158114610a2757600080fd5b50565b60008060408385031215610a3d57600080fd5b610a46836109fd565b91506020830135610a5681610a19565b809150509250929050565b600060208284031215610a7357600080fd5b610a7c826109fd565b9392505050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905282151560a082015260e0810160038310610aed57634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b60008060008060808587031215610b1557600080fd5b610b1e856109fd565b9350610b2c602086016109fd565b9250610b3a604086016109fd565b9396929550929360600135925050565b60008060408385031215610b5d57600080fd5b823591506020830135610a5681610a19565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610bbe57610bbe610b95565b500190565b600060208284031215610bd557600080fd5b8151610a7c81610a19565b6000816000190483118215151615610bfa57610bfa610b95565b500290565b600082610c1c57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205bdec491885dcc1ed8f1a4dbb49b3f7c52371c21a2e5f51f7e6207c148789ec264736f6c634300080d003341304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f500000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220d24e1db1273c4ad6069486b2fe85286a046db9807847d35aa6838610f2aaa9a064736f6c634300080d0033" . parse () . expect ("invalid bytecode")
        });
    pub struct AllKnowingOracleTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for AllKnowingOracleTest<M> {
        fn clone(&self) -> Self {
            AllKnowingOracleTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for AllKnowingOracleTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for AllKnowingOracleTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(AllKnowingOracleTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> AllKnowingOracleTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(
                address.into(),
                ALLKNOWINGORACLETEST_ABI.clone(),
                client,
            )
            .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                ALLKNOWINGORACLETEST_ABI.clone(),
                ALLKNOWINGORACLETEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bound` (0x5a6c1eed) function"]
        pub fn bound(
            &self,
            x: ethers::core::types::U256,
            min: ethers::core::types::U256,
            max: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([90, 108, 30, 237], (x, min, max))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x6bce989b) function"]
        pub fn deal_with_token(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([107, 206, 152, 155], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x97754ae9) function"]
        pub fn deal_with_token_and_adjust(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
            adjust: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([151, 117, 74, 233], (token, to, give, adjust))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0xc88a5e6d) function"]
        pub fn deal(
            &self,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 138, 94, 109], (to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x29ce9dde) function"]
        pub fn deploy_code_with_args(
            &self,
            what: String,
            args: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 206, 157, 222], (what, args))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x9a8325a0) function"]
        pub fn deploy_code(
            &self,
            what: String,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([154, 131, 37, 160], what)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x233240ee) function"]
        pub fn hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 50, 64, 238], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x29a9e300) function"]
        pub fn hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([41, 169, 227, 0], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xaf9bbe5f) function"]
        pub fn hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([175, 155, 190, 95], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xe9a79a7b) function"]
        pub fn hoax_4(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([233, 167, 154, 123], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewind` (0x2d6c17a3) function"]
        pub fn rewind(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([45, 108, 23, 163], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `skip` (0xb9c071b4) function"]
        pub fn skip(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([185, 192, 113, 180], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x108554f2) function"]
        pub fn start_hoax_1(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([16, 133, 84, 242], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x3bf82db1) function"]
        pub fn start_hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 248, 45, 177], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x6f597075) function"]
        pub fn start_hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([111, 89, 112, 117], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0xd06d8229) function"]
        pub fn start_hoax_4(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 109, 130, 41], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testAsk` (0x4ebf0250) function"]
        pub fn test_ask(
            &self,
            stake: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([78, 191, 2, 80], stake)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testAskForOtherProposer` (0x5ca33863) function"]
        pub fn test_ask_for_other_proposer(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([92, 163, 56, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testBondForStake` (0xd1cdf6ac) function"]
        pub fn test_bond_for_stake(
            &self,
            s: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([209, 205, 246, 172], s)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotAskIfNoAllowance` (0xff0ced17) function"]
        pub fn test_cannot_ask_if_no_allowance(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([255, 12, 237, 23], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotAskWithInsufficientBalanceForBond` (0x9082e6f0) function"]
        pub fn test_cannot_ask_with_insufficient_balance_for_bond(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([144, 130, 230, 240], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotAskWithNonWhitelistedToken` (0xfad89493) function"]
        pub fn test_cannot_ask_with_non_whitelisted_token(
            &self,
            bond_token: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([250, 216, 148, 147], bond_token)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotSettleAsNonOwner` (0xfa3e2d69) function"]
        pub fn test_cannot_settle_as_non_owner(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([250, 62, 45, 105], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotSettleIfAlreadySettled` (0x727cb043) function"]
        pub fn test_cannot_settle_if_already_settled(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([114, 124, 176, 67], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testSettle` (0x87289ca6) function"]
        pub fn test_settle(
            &self,
            answer: bool,
            stake: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([135, 40, 156, 166], (answer, stake))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tip` (0xd82555f1) function"]
        pub fn tip(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 37, 85, 241], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `BondPctChanged` event"]
        pub fn bond_pct_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, BondPctChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `NewRequest` event"]
        pub fn new_request_filter(&self) -> ethers::contract::builders::Event<M, NewRequestFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `RequestSettled` event"]
        pub fn request_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, RequestSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenWhitelisted` event"]
        pub fn token_whitelisted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenWhitelistedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `WARNING_Deprecated` event"]
        pub fn warning_deprecated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, WarningDeprecatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, AllKnowingOracleTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>>
        for AllKnowingOracleTest<M>
    {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "BondPctChanged", abi = "BondPctChanged(uint256)")]
    pub struct BondPctChangedFilter {
        pub new_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "NewRequest",
        abi = "NewRequest(bytes32,address,address,address,uint256,uint256)"
    )]
    pub struct NewRequestFilter {
        #[ethevent(indexed)]
        pub id: [u8; 32],
        #[ethevent(indexed)]
        pub proposer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub disputer: ethers::core::types::Address,
        pub bond_token: ethers::core::types::Address,
        pub stake: ethers::core::types::U256,
        pub bond: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "RequestSettled", abi = "RequestSettled(bytes32,bool)")]
    pub struct RequestSettledFilter {
        pub id: [u8; 32],
        pub answer: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokenWhitelisted", abi = "TokenWhitelisted(address,bool)")]
    pub struct TokenWhitelistedFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
        pub enabled: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "WARNING_Deprecated", abi = "WARNING_Deprecated(string)")]
    pub struct WarningDeprecatedFilter {
        pub msg: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum AllKnowingOracleTestEvents {
        BondPctChangedFilter(BondPctChangedFilter),
        NewRequestFilter(NewRequestFilter),
        RequestSettledFilter(RequestSettledFilter),
        TokenWhitelistedFilter(TokenWhitelistedFilter),
        WarningDeprecatedFilter(WarningDeprecatedFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for AllKnowingOracleTestEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = BondPctChangedFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::BondPctChangedFilter(decoded));
            }
            if let Ok(decoded) = NewRequestFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::NewRequestFilter(decoded));
            }
            if let Ok(decoded) = RequestSettledFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::RequestSettledFilter(decoded));
            }
            if let Ok(decoded) = TokenWhitelistedFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::TokenWhitelistedFilter(decoded));
            }
            if let Ok(decoded) = WarningDeprecatedFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::WarningDeprecatedFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedDecimalIntFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedDecimalUintFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(AllKnowingOracleTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for AllKnowingOracleTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                AllKnowingOracleTestEvents::BondPctChangedFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::NewRequestFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::RequestSettledFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::TokenWhitelistedFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::WarningDeprecatedFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogAddressFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogBytesFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogBytes32Filter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogIntFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogStringFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogUintFilter(element) => element.fmt(f),
                AllKnowingOracleTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST`function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `bound`function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bound", abi = "bound(uint256,uint256,uint256)")]
    pub struct BoundCall {
        pub x: ethers::core::types::U256,
        pub min: ethers::core::types::U256,
        pub max: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256)` and selector `[107, 206, 152, 155]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256)")]
    pub struct DealWithTokenCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256,bool)` and selector `[151, 117, 74, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256,bool)")]
    pub struct DealWithTokenAndAdjustCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
        pub adjust: bool,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,uint256)` and selector `[200, 138, 94, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,uint256)")]
    pub struct DealCall {
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string,bytes)")]
    pub struct DeployCodeWithArgsCall {
        pub what: String,
        pub args: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string)")]
    pub struct DeployCodeCall {
        pub what: String,
    }
    #[doc = "Container type for all input parameters for the `failed`function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address)` and selector `[35, 50, 64, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address)")]
    pub struct Hoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address)` and selector `[41, 169, 227, 0]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address)")]
    pub struct Hoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address,uint256)` and selector `[175, 155, 190, 95]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address,uint256)")]
    pub struct Hoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,uint256)` and selector `[233, 167, 154, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,uint256)")]
    pub struct Hoax4Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `rewind`function with signature `rewind(uint256)` and selector `[45, 108, 23, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewind", abi = "rewind(uint256)")]
    pub struct RewindCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setUp`function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `skip`function with signature `skip(uint256)` and selector `[185, 192, 113, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "skip", abi = "skip(uint256)")]
    pub struct SkipCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,uint256)` and selector `[16, 133, 84, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,uint256)")]
    pub struct StartHoax1Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address,uint256)` and selector `[59, 248, 45, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address,uint256)")]
    pub struct StartHoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address)` and selector `[111, 89, 112, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address)")]
    pub struct StartHoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address)` and selector `[208, 109, 130, 41]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address)")]
    pub struct StartHoax4Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `testAsk`function with signature `testAsk(uint256)` and selector `[78, 191, 2, 80]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testAsk", abi = "testAsk(uint256)")]
    pub struct TestAskCall {
        pub stake: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testAskForOtherProposer`function with signature `testAskForOtherProposer()` and selector `[92, 163, 56, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testAskForOtherProposer", abi = "testAskForOtherProposer()")]
    pub struct TestAskForOtherProposerCall;
    #[doc = "Container type for all input parameters for the `testBondForStake`function with signature `testBondForStake(uint256)` and selector `[209, 205, 246, 172]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testBondForStake", abi = "testBondForStake(uint256)")]
    pub struct TestBondForStakeCall {
        pub s: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testCannotAskIfNoAllowance`function with signature `testCannotAskIfNoAllowance()` and selector `[255, 12, 237, 23]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotAskIfNoAllowance",
        abi = "testCannotAskIfNoAllowance()"
    )]
    pub struct TestCannotAskIfNoAllowanceCall;
    #[doc = "Container type for all input parameters for the `testCannotAskWithInsufficientBalanceForBond`function with signature `testCannotAskWithInsufficientBalanceForBond()` and selector `[144, 130, 230, 240]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotAskWithInsufficientBalanceForBond",
        abi = "testCannotAskWithInsufficientBalanceForBond()"
    )]
    pub struct TestCannotAskWithInsufficientBalanceForBondCall;
    #[doc = "Container type for all input parameters for the `testCannotAskWithNonWhitelistedToken`function with signature `testCannotAskWithNonWhitelistedToken(address)` and selector `[250, 216, 148, 147]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotAskWithNonWhitelistedToken",
        abi = "testCannotAskWithNonWhitelistedToken(address)"
    )]
    pub struct TestCannotAskWithNonWhitelistedTokenCall {
        pub bond_token: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `testCannotSettleAsNonOwner`function with signature `testCannotSettleAsNonOwner()` and selector `[250, 62, 45, 105]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotSettleAsNonOwner",
        abi = "testCannotSettleAsNonOwner()"
    )]
    pub struct TestCannotSettleAsNonOwnerCall;
    #[doc = "Container type for all input parameters for the `testCannotSettleIfAlreadySettled`function with signature `testCannotSettleIfAlreadySettled()` and selector `[114, 124, 176, 67]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotSettleIfAlreadySettled",
        abi = "testCannotSettleIfAlreadySettled()"
    )]
    pub struct TestCannotSettleIfAlreadySettledCall;
    #[doc = "Container type for all input parameters for the `testSettle`function with signature `testSettle(bool,uint256)` and selector `[135, 40, 156, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testSettle", abi = "testSettle(bool,uint256)")]
    pub struct TestSettleCall {
        pub answer: bool,
        pub stake: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `tip`function with signature `tip(address,address,uint256)` and selector `[216, 37, 85, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tip", abi = "tip(address,address,uint256)")]
    pub struct TipCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `vm`function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum AllKnowingOracleTestCalls {
        IsTest(IsTestCall),
        Bound(BoundCall),
        DealWithToken(DealWithTokenCall),
        DealWithTokenAndAdjust(DealWithTokenAndAdjustCall),
        Deal(DealCall),
        DeployCodeWithArgs(DeployCodeWithArgsCall),
        DeployCode(DeployCodeCall),
        Failed(FailedCall),
        Hoax0(Hoax0Call),
        Hoax2(Hoax2Call),
        Hoax3(Hoax3Call),
        Hoax4(Hoax4Call),
        Rewind(RewindCall),
        SetUp(SetUpCall),
        Skip(SkipCall),
        StartHoax1(StartHoax1Call),
        StartHoax2(StartHoax2Call),
        StartHoax0(StartHoax0Call),
        StartHoax4(StartHoax4Call),
        TestAsk(TestAskCall),
        TestAskForOtherProposer(TestAskForOtherProposerCall),
        TestBondForStake(TestBondForStakeCall),
        TestCannotAskIfNoAllowance(TestCannotAskIfNoAllowanceCall),
        TestCannotAskWithInsufficientBalanceForBond(
            TestCannotAskWithInsufficientBalanceForBondCall,
        ),
        TestCannotAskWithNonWhitelistedToken(TestCannotAskWithNonWhitelistedTokenCall),
        TestCannotSettleAsNonOwner(TestCannotSettleAsNonOwnerCall),
        TestCannotSettleIfAlreadySettled(TestCannotSettleIfAlreadySettledCall),
        TestSettle(TestSettleCall),
        Tip(TipCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for AllKnowingOracleTestCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <BoundCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::Bound(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::DealWithToken(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenAndAdjustCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::DealWithTokenAndAdjust(decoded));
            }
            if let Ok(decoded) = <DealCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AllKnowingOracleTestCalls::Deal(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeWithArgsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::DeployCodeWithArgs(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::DeployCode(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <Hoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::Hoax0(decoded));
            }
            if let Ok(decoded) = <Hoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::Hoax2(decoded));
            }
            if let Ok(decoded) = <Hoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::Hoax3(decoded));
            }
            if let Ok(decoded) = <Hoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::Hoax4(decoded));
            }
            if let Ok(decoded) = <RewindCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::Rewind(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) = <SkipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AllKnowingOracleTestCalls::Skip(decoded));
            }
            if let Ok(decoded) =
                <StartHoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::StartHoax1(decoded));
            }
            if let Ok(decoded) =
                <StartHoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::StartHoax2(decoded));
            }
            if let Ok(decoded) =
                <StartHoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::StartHoax0(decoded));
            }
            if let Ok(decoded) =
                <StartHoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::StartHoax4(decoded));
            }
            if let Ok(decoded) =
                <TestAskCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::TestAsk(decoded));
            }
            if let Ok(decoded) =
                <TestAskForOtherProposerCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::TestAskForOtherProposer(decoded));
            }
            if let Ok(decoded) =
                <TestBondForStakeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::TestBondForStake(decoded));
            }
            if let Ok(decoded) =
                <TestCannotAskIfNoAllowanceCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(AllKnowingOracleTestCalls::TestCannotAskIfNoAllowance(
                    decoded,
                ));
            }
            if let Ok (decoded) = < TestCannotAskWithInsufficientBalanceForBondCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (AllKnowingOracleTestCalls :: TestCannotAskWithInsufficientBalanceForBond (decoded)) }
            if let Ok(decoded) =
                <TestCannotAskWithNonWhitelistedTokenCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(AllKnowingOracleTestCalls::TestCannotAskWithNonWhitelistedToken(decoded));
            }
            if let Ok(decoded) =
                <TestCannotSettleAsNonOwnerCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(AllKnowingOracleTestCalls::TestCannotSettleAsNonOwner(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestCannotSettleIfAlreadySettledCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(AllKnowingOracleTestCalls::TestCannotSettleIfAlreadySettled(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestSettleCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AllKnowingOracleTestCalls::TestSettle(decoded));
            }
            if let Ok(decoded) = <TipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AllKnowingOracleTestCalls::Tip(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AllKnowingOracleTestCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for AllKnowingOracleTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                AllKnowingOracleTestCalls::IsTest(element) => element.encode(),
                AllKnowingOracleTestCalls::Bound(element) => element.encode(),
                AllKnowingOracleTestCalls::DealWithToken(element) => element.encode(),
                AllKnowingOracleTestCalls::DealWithTokenAndAdjust(element) => element.encode(),
                AllKnowingOracleTestCalls::Deal(element) => element.encode(),
                AllKnowingOracleTestCalls::DeployCodeWithArgs(element) => element.encode(),
                AllKnowingOracleTestCalls::DeployCode(element) => element.encode(),
                AllKnowingOracleTestCalls::Failed(element) => element.encode(),
                AllKnowingOracleTestCalls::Hoax0(element) => element.encode(),
                AllKnowingOracleTestCalls::Hoax2(element) => element.encode(),
                AllKnowingOracleTestCalls::Hoax3(element) => element.encode(),
                AllKnowingOracleTestCalls::Hoax4(element) => element.encode(),
                AllKnowingOracleTestCalls::Rewind(element) => element.encode(),
                AllKnowingOracleTestCalls::SetUp(element) => element.encode(),
                AllKnowingOracleTestCalls::Skip(element) => element.encode(),
                AllKnowingOracleTestCalls::StartHoax1(element) => element.encode(),
                AllKnowingOracleTestCalls::StartHoax2(element) => element.encode(),
                AllKnowingOracleTestCalls::StartHoax0(element) => element.encode(),
                AllKnowingOracleTestCalls::StartHoax4(element) => element.encode(),
                AllKnowingOracleTestCalls::TestAsk(element) => element.encode(),
                AllKnowingOracleTestCalls::TestAskForOtherProposer(element) => element.encode(),
                AllKnowingOracleTestCalls::TestBondForStake(element) => element.encode(),
                AllKnowingOracleTestCalls::TestCannotAskIfNoAllowance(element) => element.encode(),
                AllKnowingOracleTestCalls::TestCannotAskWithInsufficientBalanceForBond(element) => {
                    element.encode()
                }
                AllKnowingOracleTestCalls::TestCannotAskWithNonWhitelistedToken(element) => {
                    element.encode()
                }
                AllKnowingOracleTestCalls::TestCannotSettleAsNonOwner(element) => element.encode(),
                AllKnowingOracleTestCalls::TestCannotSettleIfAlreadySettled(element) => {
                    element.encode()
                }
                AllKnowingOracleTestCalls::TestSettle(element) => element.encode(),
                AllKnowingOracleTestCalls::Tip(element) => element.encode(),
                AllKnowingOracleTestCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for AllKnowingOracleTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                AllKnowingOracleTestCalls::IsTest(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Bound(element) => element.fmt(f),
                AllKnowingOracleTestCalls::DealWithToken(element) => element.fmt(f),
                AllKnowingOracleTestCalls::DealWithTokenAndAdjust(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Deal(element) => element.fmt(f),
                AllKnowingOracleTestCalls::DeployCodeWithArgs(element) => element.fmt(f),
                AllKnowingOracleTestCalls::DeployCode(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Failed(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Hoax0(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Hoax2(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Hoax3(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Hoax4(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Rewind(element) => element.fmt(f),
                AllKnowingOracleTestCalls::SetUp(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Skip(element) => element.fmt(f),
                AllKnowingOracleTestCalls::StartHoax1(element) => element.fmt(f),
                AllKnowingOracleTestCalls::StartHoax2(element) => element.fmt(f),
                AllKnowingOracleTestCalls::StartHoax0(element) => element.fmt(f),
                AllKnowingOracleTestCalls::StartHoax4(element) => element.fmt(f),
                AllKnowingOracleTestCalls::TestAsk(element) => element.fmt(f),
                AllKnowingOracleTestCalls::TestAskForOtherProposer(element) => element.fmt(f),
                AllKnowingOracleTestCalls::TestBondForStake(element) => element.fmt(f),
                AllKnowingOracleTestCalls::TestCannotAskIfNoAllowance(element) => element.fmt(f),
                AllKnowingOracleTestCalls::TestCannotAskWithInsufficientBalanceForBond(element) => {
                    element.fmt(f)
                }
                AllKnowingOracleTestCalls::TestCannotAskWithNonWhitelistedToken(element) => {
                    element.fmt(f)
                }
                AllKnowingOracleTestCalls::TestCannotSettleAsNonOwner(element) => element.fmt(f),
                AllKnowingOracleTestCalls::TestCannotSettleIfAlreadySettled(element) => {
                    element.fmt(f)
                }
                AllKnowingOracleTestCalls::TestSettle(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Tip(element) => element.fmt(f),
                AllKnowingOracleTestCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for AllKnowingOracleTestCalls {
        fn from(var: IsTestCall) -> Self {
            AllKnowingOracleTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<BoundCall> for AllKnowingOracleTestCalls {
        fn from(var: BoundCall) -> Self {
            AllKnowingOracleTestCalls::Bound(var)
        }
    }
    impl ::std::convert::From<DealWithTokenCall> for AllKnowingOracleTestCalls {
        fn from(var: DealWithTokenCall) -> Self {
            AllKnowingOracleTestCalls::DealWithToken(var)
        }
    }
    impl ::std::convert::From<DealWithTokenAndAdjustCall> for AllKnowingOracleTestCalls {
        fn from(var: DealWithTokenAndAdjustCall) -> Self {
            AllKnowingOracleTestCalls::DealWithTokenAndAdjust(var)
        }
    }
    impl ::std::convert::From<DealCall> for AllKnowingOracleTestCalls {
        fn from(var: DealCall) -> Self {
            AllKnowingOracleTestCalls::Deal(var)
        }
    }
    impl ::std::convert::From<DeployCodeWithArgsCall> for AllKnowingOracleTestCalls {
        fn from(var: DeployCodeWithArgsCall) -> Self {
            AllKnowingOracleTestCalls::DeployCodeWithArgs(var)
        }
    }
    impl ::std::convert::From<DeployCodeCall> for AllKnowingOracleTestCalls {
        fn from(var: DeployCodeCall) -> Self {
            AllKnowingOracleTestCalls::DeployCode(var)
        }
    }
    impl ::std::convert::From<FailedCall> for AllKnowingOracleTestCalls {
        fn from(var: FailedCall) -> Self {
            AllKnowingOracleTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<Hoax0Call> for AllKnowingOracleTestCalls {
        fn from(var: Hoax0Call) -> Self {
            AllKnowingOracleTestCalls::Hoax0(var)
        }
    }
    impl ::std::convert::From<Hoax2Call> for AllKnowingOracleTestCalls {
        fn from(var: Hoax2Call) -> Self {
            AllKnowingOracleTestCalls::Hoax2(var)
        }
    }
    impl ::std::convert::From<Hoax3Call> for AllKnowingOracleTestCalls {
        fn from(var: Hoax3Call) -> Self {
            AllKnowingOracleTestCalls::Hoax3(var)
        }
    }
    impl ::std::convert::From<Hoax4Call> for AllKnowingOracleTestCalls {
        fn from(var: Hoax4Call) -> Self {
            AllKnowingOracleTestCalls::Hoax4(var)
        }
    }
    impl ::std::convert::From<RewindCall> for AllKnowingOracleTestCalls {
        fn from(var: RewindCall) -> Self {
            AllKnowingOracleTestCalls::Rewind(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for AllKnowingOracleTestCalls {
        fn from(var: SetUpCall) -> Self {
            AllKnowingOracleTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<SkipCall> for AllKnowingOracleTestCalls {
        fn from(var: SkipCall) -> Self {
            AllKnowingOracleTestCalls::Skip(var)
        }
    }
    impl ::std::convert::From<StartHoax1Call> for AllKnowingOracleTestCalls {
        fn from(var: StartHoax1Call) -> Self {
            AllKnowingOracleTestCalls::StartHoax1(var)
        }
    }
    impl ::std::convert::From<StartHoax2Call> for AllKnowingOracleTestCalls {
        fn from(var: StartHoax2Call) -> Self {
            AllKnowingOracleTestCalls::StartHoax2(var)
        }
    }
    impl ::std::convert::From<StartHoax0Call> for AllKnowingOracleTestCalls {
        fn from(var: StartHoax0Call) -> Self {
            AllKnowingOracleTestCalls::StartHoax0(var)
        }
    }
    impl ::std::convert::From<StartHoax4Call> for AllKnowingOracleTestCalls {
        fn from(var: StartHoax4Call) -> Self {
            AllKnowingOracleTestCalls::StartHoax4(var)
        }
    }
    impl ::std::convert::From<TestAskCall> for AllKnowingOracleTestCalls {
        fn from(var: TestAskCall) -> Self {
            AllKnowingOracleTestCalls::TestAsk(var)
        }
    }
    impl ::std::convert::From<TestAskForOtherProposerCall> for AllKnowingOracleTestCalls {
        fn from(var: TestAskForOtherProposerCall) -> Self {
            AllKnowingOracleTestCalls::TestAskForOtherProposer(var)
        }
    }
    impl ::std::convert::From<TestBondForStakeCall> for AllKnowingOracleTestCalls {
        fn from(var: TestBondForStakeCall) -> Self {
            AllKnowingOracleTestCalls::TestBondForStake(var)
        }
    }
    impl ::std::convert::From<TestCannotAskIfNoAllowanceCall> for AllKnowingOracleTestCalls {
        fn from(var: TestCannotAskIfNoAllowanceCall) -> Self {
            AllKnowingOracleTestCalls::TestCannotAskIfNoAllowance(var)
        }
    }
    impl ::std::convert::From<TestCannotAskWithInsufficientBalanceForBondCall>
        for AllKnowingOracleTestCalls
    {
        fn from(var: TestCannotAskWithInsufficientBalanceForBondCall) -> Self {
            AllKnowingOracleTestCalls::TestCannotAskWithInsufficientBalanceForBond(var)
        }
    }
    impl ::std::convert::From<TestCannotAskWithNonWhitelistedTokenCall> for AllKnowingOracleTestCalls {
        fn from(var: TestCannotAskWithNonWhitelistedTokenCall) -> Self {
            AllKnowingOracleTestCalls::TestCannotAskWithNonWhitelistedToken(var)
        }
    }
    impl ::std::convert::From<TestCannotSettleAsNonOwnerCall> for AllKnowingOracleTestCalls {
        fn from(var: TestCannotSettleAsNonOwnerCall) -> Self {
            AllKnowingOracleTestCalls::TestCannotSettleAsNonOwner(var)
        }
    }
    impl ::std::convert::From<TestCannotSettleIfAlreadySettledCall> for AllKnowingOracleTestCalls {
        fn from(var: TestCannotSettleIfAlreadySettledCall) -> Self {
            AllKnowingOracleTestCalls::TestCannotSettleIfAlreadySettled(var)
        }
    }
    impl ::std::convert::From<TestSettleCall> for AllKnowingOracleTestCalls {
        fn from(var: TestSettleCall) -> Self {
            AllKnowingOracleTestCalls::TestSettle(var)
        }
    }
    impl ::std::convert::From<TipCall> for AllKnowingOracleTestCalls {
        fn from(var: TipCall) -> Self {
            AllKnowingOracleTestCalls::Tip(var)
        }
    }
    impl ::std::convert::From<VmCall> for AllKnowingOracleTestCalls {
        fn from(var: VmCall) -> Self {
            AllKnowingOracleTestCalls::Vm(var)
        }
    }
}
