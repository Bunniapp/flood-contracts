pub use dispute_fixture::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod dispute_fixture {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "DisputeFixture was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static DISPUTEFIXTURE_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeBondPct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeRebatePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"relayerRefundPct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"FeeCombinationSet\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSafeBlockThreshold\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"SafeBlockThresholdSet\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"disputeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"answer\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeDisputeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"disputeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeDisputed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeFilled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeRequested\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"newFeePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"UpdatedFeeForTrade\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"WARNING_Deprecated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"adjust\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rewind\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"skip\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tip\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static DISPUTEFIXTURE_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060408190526000805460ff191660011790556001625e79b760e01b031990527f81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a608452737109709ecfa91a80626ff3989d68f67f5b1dd12d63ffa1864960a46020604051808303816000875af115801562000080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a6919062000624565b600880546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b66004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156200013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000161919062000624565b600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f9791f723bf26b668c8cac0664b66d058cdb2a424cfb08c05dd9da570be0eff6f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015620001f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021c919062000624565b600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002bb73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506006604051602001620002a591906200064f565b60408051601f198184030181529190526200044d565b600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200038c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506012604051602001620002a591906060808252600d908201526c2bb930b83832b21022ba3432b960991b608082015260a060208201819052600490820152630ae8aa8960e31b60c082015260ff91909116604082015260e00190565b600c80546001600160a01b039283166001600160a01b031991821681179092556064600f55601460108190556011819055603c601255601380548316909317909255600b548254821690841617909155662386f26fc10000601555670de0b6b3a76400006016556335a4e900601755600854601880548316918416919091179055600954601b80548316918416919091179055600a54601c805490921692169190911790556377359400601d553480156200044657600080fd5b506200082c565b60006001600160a01b0384163b80156200046b5784915050620004e9565b6000620004798585620004f0565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620004ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004e491908101906200076f565b509150505b9392505050565b604051638d1cc92560e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc925906200052e908790600401620007c4565b6000604051808303816000875af11580156200054e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200057891908101906200076f565b836040516020016200058c929190620007f9565b60405160208183030381529060405290508051602082016000f091506001600160a01b0382166200061d5760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b606482015260840160405180910390fd5b5092915050565b6000602082840312156200063757600080fd5b81516001600160a01b0381168114620004e957600080fd5b606081526000620006746060830160048152635553444360e01b602082015260400190565b8281036020840152620006988160048152635553444360e01b602082015260400190565b91505060ff8316604083015292915050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620006dd578181015183820152602001620006c3565b83811115620006ed576000848401525b50505050565b60006001600160401b0380841115620007105762000710620006aa565b604051601f8501601f19908116603f011681019082821181831017156200073b576200073b620006aa565b816040528093508581528686860111156200075557600080fd5b62000765866020830187620006c0565b5050509392505050565b6000602082840312156200078257600080fd5b81516001600160401b038111156200079957600080fd5b8201601f81018413620007ab57600080fd5b620007bc84825160208401620006f3565b949350505050565b6020815260008251806020840152620007e5816040850160208701620006c0565b601f01601f19169190910160400192915050565b600083516200080d818460208801620006c0565b83519083019062000823818360208801620006c0565b01949350505050565b617cce806200083c6000396000f3fe60806040523480156200001157600080fd5b5060043610620001515760003560e01c80636f59707511620000c7578063ba414fa61162000086578063ba414fa614620002d0578063c88a5e6d14620002eb578063d06d82291462000302578063d82555f11462000319578063e9a79a7b1462000330578063fa7626d4146200034757600080fd5b80636f597075146200025d57806397754ae914620002745780639a8325a0146200028b578063af9bbe5f14620002a2578063b9c071b414620002b957600080fd5b80632d6c17a311620001145780632d6c17a314620001db5780633a76846314620001f25780633bf82db114620002095780635a6c1eed14620002205780636bce989b146200024657600080fd5b80630a9254e41462000156578063108554f21462000162578063233240ee146200017957806329a9e300146200019057806329ce9dde14620001a7575b600080fd5b6200016062000355565b005b62000160620001733660046200427c565b62000607565b620001606200018a366004620042ab565b620006e0565b62000160620001a1366004620042d2565b620007bc565b620001be620001b8366004620043eb565b6200086e565b6040516001600160a01b0390911681526020015b60405180910390f35b62000160620001ec3660046200446b565b6200099e565b620001be60008051602062007c5983398151915281565b620001606200021a36600462004485565b620009de565b6200023762000231366004620044cb565b62000ac0565b604051908152602001620001d2565b620001606200025736600462004485565b62000bf9565b620001606200026e366004620042ab565b62000c0d565b620001606200028536600462004507565b62000cb7565b620001be6200029c36600462004561565b62000ef8565b62000160620002b336600462004485565b62000ffa565b62000160620002ca3660046200446b565b620010a8565b620002da620010c9565b6040519015158152602001620001d2565b62000160620002fc3660046200427c565b620011fa565b6200016062000313366004620042d2565b62001230565b620001606200032a36600462004485565b620012e2565b62000160620003413660046200427c565b62001393565b600054620002da9060ff1681565b6200035f62001439565b600d54600e5460405163889590f160e01b81526001600160a01b039283169263889590f1926200039892911690600190600401620045a2565b600060405180830381600087803b158015620003b357600080fd5b505af1158015620003c8573d6000803e3d6000fd5b5050601354600854601654620003ef94506001600160a01b03928316935091169062000bf9565b60135460145460165460175460155460185460085462000425966001600160a01b03908116968116959493928116911662001bb0565b601a55601955601454601b54601d546200044d926001600160a01b0390811692169062000bf9565b601b5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007c598339815191529063ca669fa790602401600060405180830381600087803b158015620004a257600080fd5b505af1158015620004b7573d6000803e3d6000fd5b5050601354601454601654601754601554601854601954601d54620004f999506001600160a01b03978816985095871696949593949293929091169162001da4565b601a54601b546200051591906001600160a01b03164362001e43565b601c5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007c598339815191529063ca669fa790602401600060405180830381600087803b1580156200056a57600080fd5b505af11580156200057f573d6000803e3d6000fd5b5050601354600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620005be929091169060001990600401620045bd565b6020604051808303816000875af1158015620005de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006049190620045d6565b50565b60405163c88a5e6d60e01b815260008051602062007c598339815191529063c88a5e6d906200063d9085908590600401620045bd565b600060405180830381600087803b1580156200065857600080fd5b505af11580156200066d573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b038516600482015260008051602062007c5983398151915292506306447d5691506024015b600060405180830381600087803b158015620006c357600080fd5b505af1158015620006d8573d6000803e3d6000fd5b505050505050565b60405163c88a5e6d60e01b815260008051602062007c598339815191529063c88a5e6d906200071a908490600160801b90600401620045bd565b600060405180830381600087803b1580156200073557600080fd5b505af11580156200074a573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038416600482015260008051602062007c59833981519152925063ca669fa791506024015b600060405180830381600087803b158015620007a057600080fd5b505af1158015620007b5573d6000803e3d6000fd5b5050505050565b60405163c88a5e6d60e01b815260008051602062007c598339815191529063c88a5e6d90620007f6908590600160801b90600401620045bd565b600060405180830381600087803b1580156200081157600080fd5b505af115801562000826573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b0380861660048301528416602482015260008051602062007c5983398151915292506347e50cce9150604401620006a8565b604051638d1cc92560e01b8152600090819060008051602062007c5983398151915290638d1cc92590620008a790879060040162004625565b6000604051808303816000875af1158015620008c7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620008f191908101906200465a565b8360405160200162000905929190620046da565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620009975760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b60648201526084015b60405180910390fd5b5092915050565b60008051602062007c5983398151915263e5d6bf02620009bf834262004723565b6040518263ffffffff1660e01b81526004016200078591815260200190565b60405163c88a5e6d60e01b815260008051602062007c598339815191529063c88a5e6d9062000a149086908590600401620045bd565b600060405180830381600087803b15801562000a2f57600080fd5b505af115801562000a44573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b0380871660048301528516602482015260008051602062007c5983398151915292506345b5607891506044015b600060405180830381600087803b15801562000aa257600080fd5b505af115801562000ab7573d6000803e3d6000fd5b50505050505050565b60008183111562000b3a5760405162461bcd60e51b815260206004820152603a60248201527f5465737420626f756e642875696e743235362c75696e743235362c75696e743260448201527f3536293a204d6178206973206c657373207468616e206d696e2e00000000000060648201526084016200098e565b600062000b48848462004723565b90508060000362000b5c5783915062000b9c565b600019810362000b6f5784915062000b9c565b62000b7a816200473d565b9050600062000b8a828762004759565b905062000b9881866200477c565b9250505b60408051818152600c818301526b109bdd5b990814995cdd5b1d60a21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1509392505050565b62000c08838383600062000cb7565b505050565b60405163c88a5e6d60e01b815260008051602062007c598339815191529063c88a5e6d9062000c47908490600160801b90600401620045bd565b600060405180830381600087803b15801562000c6257600080fd5b505af115801562000c77573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b038416600482015260008051602062007c5983398151915292506306447d56915060240162000785565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009287169162000d0d9162004797565b6000604051808303816000865af19150503d806000811462000d4c576040519150601f19603f3d011682016040523d82523d6000602084013e62000d51565b606091505b5091505060008180602001905181019062000d6d9190620047b5565b905062000ddf8462000dd88762000daf6370a0823160e01b62000d9260018d62001eed565b9060038201805463ffffffff191660e09290921c91909117905590565b90600282018054600181018255600091825260209091206001600160a01b039290921691015590565b9062001f12565b8215620006d85760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290516000916001600160a01b0389169162000e2a919062004797565b6000604051808303816000865af19150503d806000811462000e69576040519150601f19603f3d011682016040523d82523d6000602084013e62000e6e565b606091505b5091505060008180602001905181019062000e8a9190620047b5565b90508286101562000eb55762000ea1868462004723565b62000ead908262004723565b905062000ed0565b62000ec1838762004723565b62000ecd90826200477c565b90505b62000eee8162000dd86318160ddd60e01b62000d9260018d62001eed565b5050505050505050565b604051638d1cc92560e01b8152600090819060008051602062007c5983398151915290638d1cc9259062000f3190869060040162004625565b6000604051808303816000875af115801562000f51573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000f7b91908101906200465a565b90508051602082016000f091506001600160a01b03821662000ff45760405162461bcd60e51b815260206004820152602b60248201527f54657374206465706c6f79436f646528737472696e67293a204465706c6f796d60448201526a32b73a103330b4b632b21760a91b60648201526084016200098e565b50919050565b60405163c88a5e6d60e01b815260008051602062007c598339815191529063c88a5e6d90620010309086908590600401620045bd565b600060405180830381600087803b1580156200104b57600080fd5b505af115801562001060573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b0380871660048301528516602482015260008051602062007c5983398151915292506347e50cce915060440162000a87565b60008051602062007c5983398151915263e5d6bf02620009bf83426200477c565b60008054610100900460ff1615620010ea5750600054610100900460ff1690565b600060008051602062007c598339815191523b15620011f55760405160009060008051602062007c59833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc490620011579083906519985a5b195960d21b90602001620045bd565b60408051601f1981840301815290829052620011779291602001620047cf565b60408051601f1981840301815290829052620011939162004797565b6000604051808303816000865af19150503d8060008114620011d2576040519150601f19603f3d011682016040523d82523d6000602084013e620011d7565b606091505b5091505080806020019051810190620011f19190620045d6565b9150505b919050565b60405163c88a5e6d60e01b815260008051602062007c598339815191529063c88a5e6d90620006a89085908590600401620045bd565b60405163c88a5e6d60e01b815260008051602062007c598339815191529063c88a5e6d906200126a908590600160801b90600401620045bd565b600060405180830381600087803b1580156200128557600080fd5b505af11580156200129a573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b0380861660048301528416602482015260008051602062007c5983398151915292506345b560789150604401620006a8565b7f42b963ace015abb7c727e77dec115c5f418f4f96d9ec897f85c202793274661a60405162001368906020808252603b908201527f54686520607469706020737464636865617420686173206265656e206465707260408201527f6563617465642e2055736520606465616c6020696e73746561642e0000000000606082015260800190565b60405180910390a162000c088162000dd88462000daf6370a0823160e01b62000d9260018a62001eed565b60405163c88a5e6d60e01b815260008051602062007c598339815191529063c88a5e6d90620013c99085908590600401620045bd565b600060405180830381600087803b158015620013e457600080fd5b505af1158015620013f9573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038516600482015260008051602062007c59833981519152925063ca669fa79150602401620006a8565b6200144362001f22565b600e54600b54604051630ffb1d8b60e01b81526001600160a01b0392831692630ffb1d8b926200147c92911690600190600401620045a2565b600060405180830381600087803b1580156200149757600080fd5b505af1158015620014ac573d6000803e3d6000fd5b5050600e54600c54604051630ffb1d8b60e01b81526001600160a01b039283169450630ffb1d8b9350620014ea9290911690600190600401620045a2565b600060405180830381600087803b1580156200150557600080fd5b505af11580156200151a573d6000803e3d6000fd5b5050600b54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152635553444360e01b606482015260008051602062007c59833981519152925063c657c7189150608401600060405180830381600087803b1580156200159257600080fd5b505af1158015620015a7573d6000803e3d6000fd5b5050600c54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152630ae8aa8960e31b606482015260008051602062007c59833981519152925063c657c7189150608401600060405180830381600087803b1580156200161f57600080fd5b505af115801562001634573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c5983398151915292506306447d569150602401600060405180830381600087803b1580156200168d57600080fd5b505af1158015620016a2573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620016e1929091169060001990600401620045bd565b6020604051808303816000875af115801562001701573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017279190620045d6565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620017629291169060001990600401620045bd565b6020604051808303816000875af115801562001782573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017a89190620045d6565b50604080516390c5013b60e01b8152905160008051602062007c59833981519152916390c5013b91600480830192600092919082900301818387803b158015620017f157600080fd5b505af115801562001806573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c5983398151915292506306447d569150602401600060405180830381600087803b1580156200185f57600080fd5b505af115801562001874573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620018b3929091169060001990600401620045bd565b6020604051808303816000875af1158015620018d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018f99190620045d6565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620019349291169060001990600401620045bd565b6020604051808303816000875af115801562001954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200197a9190620045d6565b50604080516390c5013b60e01b8152905160008051602062007c59833981519152916390c5013b91600480830192600092919082900301818387803b158015620019c357600080fd5b505af1158015620019d8573d6000803e3d6000fd5b5050600a546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c5983398151915292506306447d569150602401600060405180830381600087803b15801562001a3157600080fd5b505af115801562001a46573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062001a85929091169060001990600401620045bd565b6020604051808303816000875af115801562001aa5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001acb9190620045d6565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262001b069291169060001990600401620045bd565b6020604051808303816000875af115801562001b26573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b4c9190620045d6565b50604080516390c5013b60e01b8152905160008051602062007c59833981519152916390c5013b91600480830192600092919082900301818387803b15801562001b9557600080fd5b505af115801562001baa573d6000803e3d6000fd5b50505050565b6000806000600e60009054906101000a90046001600160a01b03166001600160a01b031663cd805d5e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001c09573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c2f9190620047b5565b6040805160608d811b6bffffffffffffffffffffffff199081166020808501919091528e831b82166034850152604884018e9052606884018d9052608884018c9052918a901b1660a883015260bc8083018590528351808403909101815260dc909201909252805191012090915060009060405163ca669fa760e01b81526001600160a01b038716600482015290915060008051602062007c598339815191529063ca669fa790602401600060405180830381600087803b15801562001cf457600080fd5b505af115801562001d09573d6000803e3d6000fd5b5050600e5460405163ad3e762560e01b81526001600160a01b038f811660048301528e81166024830152604482018e9052606482018d9052608482018c90528a811660a4830152909116925063ad3e7625915060c401600060405180830381600087803b15801562001d7a57600080fd5b505af115801562001d8f573d6000803e3d6000fd5b50939d929c50919a5050505050505050505050565b600e54604051631655b32360e01b81526001600160a01b038a81166004830152898116602483015260448201899052606482018890526084820187905285811660a483015260c4820185905260e4820184905290911690631655b3239061010401600060405180830381600087803b15801562001e2057600080fd5b505af115801562001e35573d6000803e3d6000fd5b505050505050505050505050565b600e5462001ea690839062001ea09062001e9a90879062001e7e9063d70e3dfd60e01b9062000d92906001906001600160a01b031662001eed565b9060028201805460018101825560009182526020909120015590565b62002026565b6200204e565b600e5462000c0890829062001ee79062001ee190879062001e7e90639501325f60e01b9062000d92906001906001600160a01b031662001eed565b6200215a565b6200217c565b6005820180546001600160a01b0319166001600160a01b039290921691909117905590565b62001f1e828262002260565b5050565b62001f2c6200265b565b600d54600f546010546011546012546040516001600160a01b039095169462001f55906200420f565b6001600160a01b039095168552602085019390935260408401919091526060830152608082015260a001604051809103906000f08015801562001f9c573d6000803e3d6000fd5b50600e80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b81526004808201939093526024810191909152604481019190915263426f6f6b60e01b606482015260008051602062007c598339815191529063c657c718906084015b600060405180830381600087803b15801562001b9557600080fd5b6000620020338262002f9a565b80602001905181019062002048919062004802565b92915050565b806001600160a01b0316826001600160a01b03161462001f1e577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620020d69060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f816040516200210f919062004822565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f8260405162002148919062004867565b60405180910390a162001f1e62003062565b6000620021678262002f9a565b806020019051810190620020489190620047b5565b80821462001f1e577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620021ee9060208082526021908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b696e746040820152605d60f81b606082015260800190565b60405180910390a17f2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f1688160405162002227919062004892565b60405180910390a17f2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f16882604051620021489190620048cb565b600582015460038301546004840154600285018054604080516020808402820181019092528281526001600160a01b039096169560e09590951b9460009390929091830182828015620022d357602002820191906000526020600020905b815481526020019060010190808311620022be575b50505050509050600083620022e88362003166565b604051602001620022fb929190620047cf565b60408051601f198184030181528282526001600160a01b038816600090815260018b0160209081528382206001600160e01b03198a1683528152928120919450909290916200234f918691889101620048f6565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff166200238a57620023888762003213565b505b6001600160a01b0385166000908152602088815260408083206001600160e01b0319881684528252808320905190918391620023cb918791899101620048f6565b6040516020818303038152906040528051906020012081526020019081526020016000205460001b9050600080876001600160a01b03168460405162002412919062004797565b600060405180830381855afa9150503d80600081146200244f576040519150601f19603f3d011682016040523d82523d6000602084013e62002454565b606091505b509150620024719050816200246b88602062004932565b62003f9b565b604051630667f9d760e41b81529092506000915060008051602062007c598339815191529063667f9d7090620024ae908b908790600401620045bd565b6020604051808303816000875af1158015620024ce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620024f49190620047b5565b9050808214620025aa5760405162461bcd60e51b815260206004820152606e60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526d39b73a1039bab83837b93a32b21760911b60a482015260c4016200098e565b6040516370ca10bb60e01b815260008051602062007c59833981519152906370ca10bb90620025e2908b9087908e9060040162004954565b600060405180830381600087803b158015620025fd57600080fd5b505af115801562002612573d6000803e3d6000fd5b50505060058b0180546001600160a01b03191690555060038a01805463ffffffff191690556200264760028b0160006200421d565b896004016000905550505050505050505050565b6200266562004025565b60405162002673906200423d565b604051809103906000f08015801562002690573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b03928316908117909155600b5460405163095ea7b360e01b815292169163095ea7b391620026db9160001990600401620045bd565b6020604051808303816000875af1158015620026fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027219190620045d6565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200275c9291169060001990600401620045bd565b6020604051808303816000875af11580156200277c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027a29190620045d6565b50600d54604080516318caf8e360e31b81526001600160a01b0390921660048301526024820152601060448201526f416c6c4b6e6f77696e674f7261636c6560801b606482015260008051602062007c598339815191529063c657c71890608401600060405180830381600087803b1580156200281e57600080fd5b505af115801562002833573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c5983398151915292506306447d569150602401600060405180830381600087803b1580156200288c57600080fd5b505af1158015620028a1573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620028e0929091169060001990600401620045bd565b6020604051808303816000875af115801562002900573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620029269190620045d6565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620029619291169060001990600401620045bd565b6020604051808303816000875af115801562002981573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620029a79190620045d6565b50604080516390c5013b60e01b8152905160008051602062007c59833981519152916390c5013b91600480830192600092919082900301818387803b158015620029f057600080fd5b505af115801562002a05573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c5983398151915292506306447d569150602401600060405180830381600087803b15801562002a5e57600080fd5b505af115801562002a73573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062002ab2929091169060001990600401620045bd565b6020604051808303816000875af115801562002ad2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002af89190620045d6565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262002b339291169060001990600401620045bd565b6020604051808303816000875af115801562002b53573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b799190620045d6565b50604080516390c5013b60e01b8152905160008051602062007c59833981519152916390c5013b91600480830192600092919082900301818387803b15801562002bc257600080fd5b505af115801562002bd7573d6000803e3d6000fd5b5050600a546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c5983398151915292506306447d569150602401600060405180830381600087803b15801562002c3057600080fd5b505af115801562002c45573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062002c84929091169060001990600401620045bd565b6020604051808303816000875af115801562002ca4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002cca9190620045d6565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262002d059291169060001990600401620045bd565b6020604051808303816000875af115801562002d25573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002d4b9190620045d6565b50604080516390c5013b60e01b8152905160008051602062007c59833981519152916390c5013b91600480830192600092919082900301818387803b15801562002d9457600080fd5b505af115801562002da9573d6000803e3d6000fd5b5050600d54600b54604051630ffb1d8b60e01b81526001600160a01b039283169450630ffb1d8b935062002de79290911690600190600401620045a2565b600060405180830381600087803b15801562002e0257600080fd5b505af115801562002e17573d6000803e3d6000fd5b5050600d54600c54604051630ffb1d8b60e01b81526001600160a01b039283169450630ffb1d8b935062002e559290911690600190600401620045a2565b600060405180830381600087803b15801562002e7057600080fd5b505af115801562002e85573d6000803e3d6000fd5b5050600d54600a5460405163194f29df60e11b81526001600160a01b03928316945063329e53be935062002ec39290911690600190600401620045a2565b600060405180830381600087803b15801562002ede57600080fd5b505af115801562002ef3573d6000803e3d6000fd5b5050600d54600a5460405163889590f160e01b81526001600160a01b03928316945063889590f1935062002f319290911690600190600401620045a2565b600060405180830381600087803b15801562002f4c57600080fd5b505af115801562002f61573d6000803e3d6000fd5b5050600d5460405163889590f160e01b81526001600160a01b03909116925063889590f191506200200b903090600190600401620045a2565b60058101546060906001600160a01b0316600062002fb88462003213565b604051630667f9d760e41b815290915060008051602062007c598339815191529063667f9d709062002ff19085908590600401620045bd565b6020604051808303816000875af115801562003011573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620030379190620047b5565b6040516020016200304a91815260200190565b60405160208183030381529060405292505050919050565b60008051602062007c598339815191523b15620031555760405160009060008051602062007c59833981519152907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc490620030d09083906519985a5b195960d21b9060019060200162004954565b60408051601f1981840301815290829052620030f09291602001620047cf565b60408051601f19818403018152908290526200310c9162004797565b6000604051808303816000865af19150503d80600081146200314b576040519150601f19603f3d011682016040523d82523d6000602084013e62003150565b606091505b505050505b6000805461ff001916610100179055565b60606000825160206200317a919062004932565b67ffffffffffffffff81111562003195576200319562004310565b6040519080825280601f01601f191660200182016040528015620031c0576020820181803683370190505b50905060005b835181101562000997576000848281518110620031e757620031e762004975565b6020026020010151905080826020026020018401525080806200320a906200473d565b915050620031c6565b600581015460038201546004830154600284018054604080516020808402820181019092528281526000966001600160a01b03169560e01b9493879391929091908301828280156200328557602002820191906000526020600020905b81548152602001906001019080831162003270575b5050506001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a1684528252808320905195965094919350620032d192508591879101620048f6565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff161562003370576001600160a01b0384166000908152602087815260408083206001600160e01b0319871684528252808320905190929162003340918591879101620048f6565b60405160208183030381529060405280519060200120815260200190815260200160002054945050505050919050565b6000836200337e8362003166565b60405160200162003391929190620047cf565b604051602081830303815290604052905060008051602062007c7983398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620033f057600080fd5b505af115801562003405573d6000803e3d6000fd5b50505050600080866001600160a01b03168360405162003426919062004797565b600060405180830381855afa9150503d806000811462003463576040519150601f19603f3d011682016040523d82523d6000602084013e62003468565b606091505b5091506200347f9050816200246b87602062004932565b6040516365bc948160e01b81526001600160a01b03891660048201529092506000915060008051602062007c59833981519152906365bc9481906024016000604051808303816000875af1158015620034dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262003506919081019062004a14565b50905080516001036200386057600060008051602062007c7983398151915260001c6001600160a01b031663667f9d7089846000815181106200354d576200354d62004975565b60200260200101516040518363ffffffff1660e01b815260040162003574929190620045bd565b6020604051808303816000875af115801562003594573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620035ba9190620047b5565b9050806200361e577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a58883600081518110620035fa57620035fa62004975565b602002602001015160001c60405162003615929190620045bd565b60405180910390a15b808314620036d15760405162461bcd60e51b815260206004820152606d60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526c1cdb9d081cdd5c1c1bdc9d1959609a1b60a482015260c4016200098e565b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8888878960405160200162003709929190620048f6565b604051602081830303815290604052805190602001208560008151811062003735576200373562004975565b602002602001015160001c60405162003752949392919062004a75565b60405180910390a18160008151811062003770576200377062004975565b6020908102919091018101516001600160a01b038a1660009081528c835260408082206001600160e01b03198c1683528452808220905192939092620037bb918a918c9101620048f6565b60408051601f1981840301815291815281516020928301208352828201939093529082016000908120939093556001600160a01b038b16835260018d810182528284206001600160e01b03198c1685528252828420925190939162003825918a918c9101620048f6565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff19169115159190911790555062003e1e565b60018151111562003dad5760005b815181101562003da657600060008051602062007c7983398151915260001c6001600160a01b031663667f9d708a858581518110620038b157620038b162004975565b60200260200101516040518363ffffffff1660e01b8152600401620038d8929190620045bd565b6020604051808303816000875af1158015620038f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200391e9190620047b5565b90508062003981577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a5898484815181106200395d576200395d62004975565b602002602001015160001c60405162003978929190620045bd565b60405180910390a15b60008051602062007c7983398151915260001c6001600160a01b03166370ca10bb8a858581518110620039b857620039b862004975565b602002602001015161133760f01b6040518463ffffffff1660e01b8152600401620039e69392919062004954565b600060405180830381600087803b15801562003a0157600080fd5b505af115801562003a16573d6000803e3d6000fd5b50505050600060608a6001600160a01b03168760405162003a38919062004797565b600060405180830381855afa9150503d806000811462003a75576040519150601f19603f3d011682016040523d82523d6000602084013e62003a7a565b606091505b50909250905062003a92816200246b8b602062004932565b955081801562003aa6575061133760f01b86145b1562003cf9577f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c60405160200162003ae4929190620048f6565b6040516020818303038152906040528051906020012088888151811062003b0f5762003b0f62004975565b602002602001015160001c60405162003b2c949392919062004a75565b60405180910390a184848151811062003b495762003b4962004975565b6020908102919091018101516001600160a01b038d1660009081528f835260408082206001600160e01b03198f168352845280822090519293909262003b94918d918f9101620048f6565b6040516020818303038152906040528051906020012081526020019081526020016000208190555060018d60010160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160e01b0319166001600160e01b031916815260200190815260200160002060008a8c60405160200162003c21929190620048f6565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555060008051602062007c7983398151915260001c6001600160a01b03166370ca10bb8c87878151811062003c935762003c9362004975565b6020026020010151866040518463ffffffff1660e01b815260040162003cbc9392919062004954565b600060405180830381600087803b15801562003cd757600080fd5b505af115801562003cec573d6000803e3d6000fd5b5050505050505062003da6565b60008051602062007c7983398151915260001c6001600160a01b03166370ca10bb8c87878151811062003d305762003d3062004975565b6020026020010151866040518463ffffffff1660e01b815260040162003d599392919062004954565b600060405180830381600087803b15801562003d7457600080fd5b505af115801562003d89573d6000803e3d6000fd5b50505050505050808062003d9d906200473d565b9150506200386e565b5062003e1e565b6040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e60648201526084016200098e565b6001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a1684528252808320905190929162003e629188918a9101620048f6565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff1662003ef15760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b60648201526084016200098e565b6005890180546001600160a01b031916905560038901805463ffffffff1916905562003f2260028a0160006200421d565b600060048a018190556001600160a01b038816815260208a815260408083206001600160e01b03198a1684528252808320905190929162003f689188918a9101620048f6565b60405160208183030381529060405280519060200120815260200190815260200160002054975050505050505050919050565b6000806000602085511162003fb257845162003fb5565b60205b905060005b818110156200401b5762003fd081600862004932565b8662003fdd83886200477c565b8151811062003ff05762003ff062004975565b01602001516001600160f81b031916901c92909217918062004012816200473d565b91505062003fba565b5090949350505050565b600854604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526005604482015264416c69636560d81b606482015260008051602062007c598339815191529063c657c71890608401600060405180830381600087803b1580156200409557600080fd5b505af1158015620040aa573d6000803e3d6000fd5b5050600954604080516318caf8e360e31b81526001600160a01b039092166004830152602482015260036044820152622137b160e91b606482015260008051602062007c59833981519152925063c657c7189150608401600060405180830381600087803b1580156200411c57600080fd5b505af115801562004131573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526007604482015266436861726c696560c81b606482015260008051602062007c59833981519152925063c657c7189150608401600060405180830381600087803b158015620041a757600080fd5b505af1158015620041bc573d6000803e3d6000fd5b5050604080516318caf8e360e31b815230600482015260248101919091526003604482015262596f7560e81b606482015260008051602062007c59833981519152925063c657c71891506084016200200b565b6120578062004aa683390190565b50805460008255906000526020600020908101906200060491906200424b565b61115c8062006afd83390190565b5b808211156200426257600081556001016200424c565b5090565b6001600160a01b03811681146200060457600080fd5b600080604083850312156200429057600080fd5b82356200429d8162004266565b946020939093013593505050565b600060208284031215620042be57600080fd5b8135620042cb8162004266565b9392505050565b60008060408385031215620042e657600080fd5b8235620042f38162004266565b91506020830135620043058162004266565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562004352576200435262004310565b604052919050565b600067ffffffffffffffff82111562004377576200437762004310565b50601f01601f191660200190565b60006200439c62004396846200435a565b62004326565b9050828152838383011115620043b157600080fd5b828260208301376000602084830101529392505050565b600082601f830112620043da57600080fd5b620042cb8383356020850162004385565b60008060408385031215620043ff57600080fd5b823567ffffffffffffffff808211156200441857600080fd5b6200442686838701620043c8565b935060208501359150808211156200443d57600080fd5b508301601f810185136200445057600080fd5b620044618582356020840162004385565b9150509250929050565b6000602082840312156200447e57600080fd5b5035919050565b6000806000606084860312156200449b57600080fd5b8335620044a88162004266565b92506020840135620044ba8162004266565b929592945050506040919091013590565b600080600060608486031215620044e157600080fd5b505081359360208301359350604090920135919050565b80151581146200060457600080fd5b600080600080608085870312156200451e57600080fd5b84356200452b8162004266565b935060208501356200453d8162004266565b92506040850135915060608501356200455681620044f8565b939692955090935050565b6000602082840312156200457457600080fd5b813567ffffffffffffffff8111156200458c57600080fd5b6200459a84828501620043c8565b949350505050565b6001600160a01b039290921682521515602082015260400190565b6001600160a01b03929092168252602082015260400190565b600060208284031215620045e957600080fd5b8151620042cb81620044f8565b60005b8381101562004613578181015183820152602001620045f9565b8381111562001baa5750506000910152565b602081526000825180602084015262004646816040850160208701620045f6565b601f01601f19169190910160400192915050565b6000602082840312156200466d57600080fd5b815167ffffffffffffffff8111156200468557600080fd5b8201601f810184136200469757600080fd5b8051620046a862004396826200435a565b818152856020838501011115620046be57600080fd5b620046d1826020830160208601620045f6565b95945050505050565b60008351620046ee818460208801620045f6565b83519083019062004704818360208801620045f6565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156200473857620047386200470d565b500390565b6000600182016200475257620047526200470d565b5060010190565b6000826200477757634e487b7160e01b600052601260045260246000fd5b500690565b600082198211156200479257620047926200470d565b500190565b60008251620047ab818460208701620045f6565b9190910192915050565b600060208284031215620047c857600080fd5b5051919050565b6001600160e01b0319831681528151600090620047f4816004850160208701620045f6565b919091016004019392505050565b6000602082840312156200481557600080fd5b8151620042cb8162004266565b6040815260006200484d60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b6040815260006200484d60408301600a815269080808081058dd1d585b60b21b602082015260400190565b604081526000620048bd60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b604081526000620048bd60408301600a815269080808081058dd1d585b60b21b602082015260400190565b825160009082906020808701845b83811015620049225781518552938201939082019060010162004904565b5050948252509092019392505050565b60008160001904831182151516156200494f576200494f6200470d565b500290565b6001600160a01b039390931683526020830191909152604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600082601f8301126200499d57600080fd5b8151602067ffffffffffffffff821115620049bc57620049bc62004310565b8160051b620049cd82820162004326565b9283528481018201928281019087851115620049e857600080fd5b83870192505b8483101562004a0957825182529183019190830190620049ee565b979650505050505050565b6000806040838503121562004a2857600080fd5b825167ffffffffffffffff8082111562004a4157600080fd5b62004a4f868387016200498b565b9350602085015191508082111562004a6657600080fd5b5062004461858286016200498b565b6001600160a01b039490941684526001600160e01b0319929092166020840152604083015260608201526080019056fe61012060405260006001553480156200001757600080fd5b5060405162002057380380620020578339810160408190526200003a9162000156565b600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506001600160a01b0385166101005260808490526040518481527f882885d0e4612a71677644a9d70e58ca05fc5a1ea1b0875f6e46c315241bfe149060200160405180910390a180620000ce8385620001ad565b620000da9190620001ad565b606414620000fb5760405163bcf1e5b360e01b815260040160405180910390fd5b60a083905260c082905260e081905260408051848152602081018490529081018290527ff33486d12ebec978385318eaf8163e096679d7eab14d4def8f26b7a5fda0f5829060600160405180910390a15050505050620001d4565b600080600080600060a086880312156200016f57600080fd5b85516001600160a01b03811681146200018757600080fd5b602087015160408801516060890151608090990151929a91995097965090945092505050565b60008219821115620001cf57634e487b7160e01b600052601160045260246000fd5b500190565b60805160a05160c05160e05161010051611ddc6200027b60003960008181610214015281816103ce0152818161068d015281816106bc015281816107ba0152818161081d01526108dc0152600081816101c701528181610e320152611085015260008181610299015261094a0152600081816101a00152818161064d01526106eb01526000818161012b015281816105ce01528181610d5f0152610dae0152611ddc6000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063cb7b1ec811610071578063cb7b1ec8146102ce578063cd805d5e146102e1578063d70e3dfd146102ea578063daf9c21014610313578063ee35a4f91461034657600080fd5b80638da5cb5b1461024e5780639501325f14610261578063ad3e762514610281578063c16402bb14610294578063c3f6f431146102bb57600080fd5b8063391fe4e2116100f4578063391fe4e21461019b57806353906a59146101c257806369cf50c1146101e9578063734d1627146101fc5780637dc0d1d01461020f57600080fd5b80630ff0c00e146101265780630ffb1d8b1461016057806313af4035146101755780631655b32314610188575b600080fd5b61014d7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61017361016e36600461179f565b610359565b005b6101736101833660046117d8565b6104c3565b6101736101963660046117fc565b610557565b61014d7f000000000000000000000000000000000000000000000000000000000000000081565b61014d7f000000000000000000000000000000000000000000000000000000000000000081565b6101736101f7366004611876565b610587565b61017361020a3660046118e8565b6108d1565b6102367f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610157565b600054610236906001600160a01b031681565b61014d61026f36600461192c565b60036020526000908152604090205481565b61017361028f366004611945565b610a45565b61014d7f000000000000000000000000000000000000000000000000000000000000000081565b6101736102c93660046119ee565b610c0a565b6101736102dc366004611876565b610d0a565b61014d60015481565b6102366102f836600461192c565b6004602052600090815260409020546001600160a01b031681565b6103366103213660046117d8565b60026020526000908152604090205460ff1681565b6040519015158152602001610157565b610173610354366004611ab2565b610ec3565b6000546001600160a01b031633146103a75760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064015b60405180910390fd5b80801561043b5750604051630daf9c2160e41b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063daf9c21090602401602060405180830381865afa158015610415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104399190611b82565b155b15610464576040516313c42eef60e21b81526001600160a01b038316600482015260240161039e565b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d92910160405180910390a25050565b6000546001600160a01b0316331461050c5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161039e565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b600061056889898989898989610f04565b905061057c89898989898989888a33610f72565b505050505050505050565b600061059888888888888888610f04565b60008181526003602052604081205491925081136105cc57604051635c8aa24760e11b81526004810183905260240161039e565b7f00000000000000000000000000000000000000000000000000000000000000006105f78243611bb5565b1061061557604051632c02744560e11b815260040160405180910390fd5b61061e81611bcc565b60008381526003602090815260408083209390935560049052908120546001600160a01b0316915060646106727f00000000000000000000000000000000000000000000000000000000000000008a611be8565b61067c9190611c07565b90506106b26001600160a01b038b167f0000000000000000000000000000000000000000000000000000000000000000836110d7565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f7d3b58b83338d60646107107f00000000000000000000000000000000000000000000000000000000000000008f611be8565b61071a9190611c07565b8d8b8b604051602001610749939291909283526001600160a01b03919091166020830152604082015260600190565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401610778959493929190611c29565b600060405180830381600087803b15801561079257600080fd5b505af11580156107a6573d6000803e3d6000fd5b506107e0925050506001600160a01b038b167f000000000000000000000000000000000000000000000000000000000000000060006110d7565b60405163e6717ce760e01b81523060048201526001600160a01b0383811660248301523360448301528b81166064830152608482018390526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6717ce79060a401602060405180830381865afa158015610866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088a9190611caa565b90508085846001600160a01b03167f9d73f906175a4bba053798779b2fecfd9be16a058ac834d1c4a23c0dd2f56ea960405160405180910390a45050505050505050505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461091c5760405163179a2eb160e01b815233600482015260240161039e565b6000808061092d60e0850185611cc3565b81019061093a9190611d0a565b919450925090506000606461096f7f000000000000000000000000000000000000000000000000000000000000000086611be8565b6109799190611c07565b905061098b60e0860160c08701611d42565b156109c9576109c46109a360408701602088016117d8565b826109b46080890160608a016117d8565b6001600160a01b03169190611154565b6109de565b6109de83826109b46080890160608a016117d8565b85826109f060408801602089016117d8565b6001600160a01b03167f5346d9dd24f7f5e01b23ca4dada136d909acecf7ff9e4ed41474140d5d1319f6610a2a60e08a0160c08b01611d42565b604051901515815260200160405180910390a4505050505050565b6001600160a01b03861660009081526002602052604090205460ff16610a895760405163f602627d60e01b81526001600160a01b038716600482015260240161039e565b6001600160a01b03851660009081526002602052604090205460ff16610acd5760405163f602627d60e01b81526001600160a01b038616600482015260240161039e565b846001600160a01b0316866001600160a01b031603610aff57604051631d2792fb60e31b815260040160405180910390fd5b6703782dace9d90000821115610b2b576040516305bf279d60e41b81526004810183905260240161039e565b831580610b36575082155b15610b545760405163abc5ee6f60e01b815260040160405180910390fd5b6001600160a01b038116610b7b57604051631feef77d60e01b815260040160405180910390fd5b60015460408051868152602081018690529081018490526001600160a01b03838116606083015280881691908916907ff4650f30e27746417929b97bf256a6022b15957ffef5971ddbe48867d9e01d459060800160405180910390a460018054906000610be783611d5f565b90915550610c0290506001600160a01b0387163330876111cc565b505050505050565b6000610c1b8c8c8c8c8c8c8c610f04565b90506703782dace9d90000841115610c49576040516305bf279d60e41b81526004810185905260240161039e565b6000818152600360205260408120541215610c7a57604051635c8aa24760e11b81526004810182905260240161039e565b6000818152600360205260408120541315610cab576040516304daa62560e21b81526004810182905260240161039e565b610cb88582868686611256565b85856001600160a01b03167f6ab91dbc42f726b630639350395426be048c50255f12e82d28e2dffac417459386604051610cf491815260200190565b60405180910390a3505050505050505050505050565b6000610d1b88888888888888610f04565b60008181526003602052604081205491925012610d4e57604051635c8aa24760e11b81526004810182905260240161039e565b6000818152600360205260409020547f000000000000000000000000000000000000000000000000000000000000000090610d899043611bb5565b1015610df157600081815260036020526040812054610da89043611bb5565b610dd2907f0000000000000000000000000000000000000000000000000000000000000000611bb5565b9050806040516325797e0360e11b815260040161039e91815260200190565b60008181526004602081815260408084208054600384529185208590559290915281546001600160a01b0319169091556001600160a01b0316906064610e577f000000000000000000000000000000000000000000000000000000000000000082611bb5565b610e61908a611be8565b610e6b9190611c07565b9050610e816001600160a01b038b168383611154565b60405184906001600160a01b038416907f382f68c82822f6657aadccce431cdfacd962b37a0e1a15071c182d2c34f7557590600090a350505050505050505050565b6000610ed48d8d8d8d8d8d8d610f04565b9050610ee38582868686611256565b610ef58d8d8d8d888d8d888e33610f72565b50505050505050505050505050565b604080516bffffffffffffffffffffffff196060998a1b8116602080840191909152988a1b81166034830152604882019790975260688101959095526088850193909352951b90921660a882015260bc808201949094528151808203909401845260dc019052815191012090565b6000838152600360205260408120541215610fa357604051635c8aa24760e11b81526004810184905260240161039e565b6000838152600360205260408120541315610fd4576040516304daa62560e21b81526004810184905260240161039e565b86821015610ff55760405163a53754a760e01b815260040160405180910390fd5b6000838152600360209081526040808320439055600482529182902080546001600160a01b0319166001600160a01b0385169081179091558251898152918201859052869290917f942417ccf4f356e8d909c054f8a8147622647605cbeafd9c63b4fc3cc1dd2a53910160405180910390a361107c6001600160a01b038a168287856111cc565b600060646110aa7f00000000000000000000000000000000000000000000000000000000000000008b611be8565b6110b49190611c07565b90506110ca6001600160a01b038c168383611154565b5050505050505050505050565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061114e5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640161039e565b50505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061114e5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640161039e565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d116001600051141617169150508061124f5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161039e565b5050505050565b6703782dace9d90000831115611282576040516305bf279d60e41b81526004810184905260240161039e565b60008481526003602052604081205412156112b357604051635c8aa24760e11b81526004810185905260240161039e565b60008481526003602052604081205413156112e4576040516304daa62560e21b81526004810185905260240161039e565b604080517f582b2ba4cf2b931b2e1a054db15a958a1d2222e9e884ffc3c15f79da7d0177ba6020808301919091528183018790526060808301879052835180840390910181526080830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a084015260bc8084018290528451808503909101815260dc909301909352815191012060006113bd8286868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506113fb92505050565b9050876001600160a01b0316816001600160a01b0316146113f1576040516324a0dbd760e21b815260040160405180910390fd5b5050505050505050565b600080600061140a858561141f565b915091506114178161148d565b509392505050565b60008082516041036114555760208301516040840151606085015160001a61144987828585611646565b94509450505050611486565b825160400361147e5760208301516040840151611473868383611733565b935093505050611486565b506000905060025b9250929050565b60008160048111156114a1576114a1611d78565b036114a95750565b60018160048111156114bd576114bd611d78565b0361150a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161039e565b600281600481111561151e5761151e611d78565b0361156b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161039e565b600381600481111561157f5761157f611d78565b036115d75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161039e565b60048160048111156115eb576115eb611d78565b036116435760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161039e565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561167d575060009050600361172a565b8460ff16601b1415801561169557508460ff16601c14155b156116a6575060009050600461172a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156116fa573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166117235760006001925092505061172a565b9150600090505b94509492505050565b6000806001600160ff1b0383168161175060ff86901c601b611d8e565b905061175e87828885611646565b935093505050935093915050565b6001600160a01b038116811461164357600080fd5b803561178c8161176c565b919050565b801515811461164357600080fd5b600080604083850312156117b257600080fd5b82356117bd8161176c565b915060208301356117cd81611791565b809150509250929050565b6000602082840312156117ea57600080fd5b81356117f58161176c565b9392505050565b600080600080600080600080610100898b03121561181957600080fd5b88356118248161176c565b975060208901356118348161176c565b965060408901359550606089013594506080890135935060a08901356118598161176c565b979a969950949793969295929450505060c08201359160e0013590565b600080600080600080600060e0888a03121561189157600080fd5b873561189c8161176c565b965060208801356118ac8161176c565b955060408801359450606088013593506080880135925060a08801356118d18161176c565b8092505060c0880135905092959891949750929550565b600080604083850312156118fb57600080fd5b82359150602083013567ffffffffffffffff81111561191957600080fd5b830161010081860312156117cd57600080fd5b60006020828403121561193e57600080fd5b5035919050565b60008060008060008060c0878903121561195e57600080fd5b86356119698161176c565b955060208701356119798161176c565b945060408701359350606087013592506080870135915060a087013561199e8161176c565b809150509295509295509295565b60008083601f8401126119be57600080fd5b50813567ffffffffffffffff8111156119d657600080fd5b60208301915083602082850101111561148657600080fd5b60008060008060008060008060008060006101408c8e031215611a1057600080fd5b8b35611a1b8161176c565b9a5060208c0135611a2b8161176c565b995060408c0135985060608c0135975060808c0135965060a08c0135611a508161176c565b955060c08c0135945060e08c0135611a678161176c565b93506101008c013592506101208c013567ffffffffffffffff811115611a8c57600080fd5b611a988e828f016119ac565b915080935050809150509295989b509295989b9093969950565b6000806000806000806000806000806000806101608d8f031215611ad557600080fd5b611adf8d3561176c565b8c359b50611af060208e013561176c565b60208d01359a5060408d0135995060608d0135985060808d01359750611b1860a08e01611781565b965060c08d0135955060e08d01359450611b356101008e01611781565b93506101208d0135925067ffffffffffffffff6101408e01351115611b5957600080fd5b611b6a8e6101408f01358f016119ac565b81935080925050509295989b509295989b509295989b565b600060208284031215611b9457600080fd5b81516117f581611791565b634e487b7160e01b600052601160045260246000fd5b600082821015611bc757611bc7611b9f565b500390565b6000600160ff1b8201611be157611be1611b9f565b5060000390565b6000816000190483118215151615611c0257611c02611b9f565b500290565b600082611c2457634e487b7160e01b600052601260045260246000fd5b500490565b600060018060a01b038088168352602081881681850152818716604085015285606085015260a06080850152845191508160a085015260005b82811015611c7e5785810182015185820160c001528101611c62565b82811115611c9057600060c084870101525b5050601f01601f19169190910160c0019695505050505050565b600060208284031215611cbc57600080fd5b5051919050565b6000808335601e19843603018112611cda57600080fd5b83018035915067ffffffffffffffff821115611cf557600080fd5b60200191503681900382131561148657600080fd5b600080600060608486031215611d1f57600080fd5b833592506020840135611d318161176c565b929592945050506040919091013590565b600060208284031215611d5457600080fd5b81356117f581611791565b600060018201611d7157611d71611b9f565b5060010190565b634e487b7160e01b600052602160045260246000fd5b60008219821115611da157611da1611b9f565b50019056fea26469706673582212205fc441f04e37d2345326daf0d50df1f65158ea3507369ddb82dbf1fd4b0e1fb364736f6c634300080f0033608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350336000908152600360205260409020805460ff191660011790556110e18061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063c70a900f11610071578063c70a900f1461015e578063d6f8307f14610191578063daf9c210146101b4578063e6717ce7146101d7578063f7d3b58b146101f8578063fc361c381461020b57600080fd5b80630ffb1d8b146100b957806313af4035146100ce578063329e53be146100e1578063889590f1146100f45780638da5cb5b146101075780639d86698514610137575b600080fd5b6100cc6100c7366004610b40565b61021e565b005b6100cc6100dc366004610b73565b6102b1565b6100cc6100ef366004610b40565b610326565b6100cc610102366004610b40565b6103a8565b60005461011a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014a610145366004610b95565b61042a565b60405161012e989796959493929190610be6565b61018161016c366004610b73565b60036020526000908152604090205460ff1681565b604051901515815260200161012e565b61018161019f366004610b73565b60046020526000908152604090205460ff1681565b6101816101c2366004610b73565b60026020526000908152604090205460ff1681565b6101ea6101e5366004610c8f565b610511565b60405190815260200161012e565b6100cc610206366004610ceb565b61052a565b6100cc610219366004610d98565b610805565b6000546001600160a01b031633146102515760405162461bcd60e51b815260040161024890610dbb565b60405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d9291015b60405180910390a25050565b6000546001600160a01b031633146102db5760405162461bcd60e51b815260040161024890610dbb565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103505760405162461bcd60e51b815260040161024890610dbb565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f8cc72bec7e2cf5979aefd933f40a28eb590098d522a5c458e497e71c5e6fa90f91016102a5565b6000546001600160a01b031633146103d25760405162461bcd60e51b815260040161024890610dbb565b6001600160a01b038216600081815260046020908152604091829020805460ff191685151590811790915591519182527f2bf32d6c1bf8a8d32ace419214cf1c0fa979b6ed1135840088771f67f25f104991016102a5565b600160208190526000918252604090912080549181015460028201546003830154600484015460058501546006860180546001600160a01b0398891698968716979587169690941694929360ff808416946101009094041692919061048e90610de1565b80601f01602080910402602001604051908101604052809291908181526020018280546104ba90610de1565b80156105075780601f106104dc57610100808354040283529160200191610507565b820191906000526020600020905b8154815290600101906020018083116104ea57829003601f168201915b5050505050905088565b600061052086868686866109aa565b9695505050505050565b3360009081526004602052604090205460ff1661055a576040516325c0cb7960e11b815260040160405180910390fd5b6001600160a01b03841660009081526002602052604090205460ff1661059e5760405163028511d160e51b81526001600160a01b0385166004820152602401610248565b60006105ad33888888886109aa565b90506000808281526001602052604090206005015460ff1660028111156105d6576105d6610bae565b146105f75760405163d5e880e960e01b815260048101829052602401610248565b6000604051806101000160405280336001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b031681526020018681526020016001600281111561065a5761065a610bae565b815260200160001515815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505084815260016020818152604092839020855181546001600160a01b03199081166001600160a01b039283161783559287015182850180548516918316919091179055938601516002808301805485169287169290921790915560608701516003830180549094169516949094179091556080850151600482015560a085015160058201805496975087969295509093909260ff199092169190849081111561074a5761074a610bae565b021790555060c08201516005820180549115156101000261ff001990921691909117905560e082015160068201906107829082610e80565b5050604080516001600160a01b03898116825260208201899052808b1693508b169185917f2609e116ca576195fecb47831f147fd6fee721377e4d88fff48807f3e9442a42910160405180910390a46107e66001600160a01b038716333088610a12565b6107fb6001600160a01b038716883088610a12565b5050505050505050565b3360009081526003602052604090205460ff16610835576040516314e9dd3960e31b815260040160405180910390fd5b60008281526001602052604090206002600582015460ff16600281111561085e5761085e610bae565b0361087f5760405163b677167760e01b815260048101849052602401610248565b6000816004015460026108929190610f40565b905082156108c057600182015460038301546108bb916001600160a01b03918216911683610a9c565b6108e1565b600282015460038301546108e1916001600160a01b03918216911683610a9c565b60058201805461ffff19166101008515159081029190911760021790915560405190815284907fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a281546001600160a01b03163b156109a457815460405163734d162760e01b81526001600160a01b039091169063734d1627906109769087908690600401610fea565b600060405180830381600087803b15801561099057600080fd5b505af11580156107fb573d6000803e3d6000fd5b50505050565b6040516bffffffffffffffffffffffff19606087811b8216602084015286811b8216603484015285811b8216604884015284901b16605c8201526070810182905260009060900160405160208183030381529060405280519060200120905095945050505050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610a955760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610248565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806109a45760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610248565b80356001600160a01b0381168114610b2b57600080fd5b919050565b80358015158114610b2b57600080fd5b60008060408385031215610b5357600080fd5b610b5c83610b14565b9150610b6a60208401610b30565b90509250929050565b600060208284031215610b8557600080fd5b610b8e82610b14565b9392505050565b600060208284031215610ba757600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60038110610be257634e487b7160e01b600052602160045260246000fd5b9052565b600061010060018060a01b03808c1684526020818c1681860152818b166040860152818a166060860152886080860152610c2360a0860189610bc4565b86151560c08601528260e0860152855191508183860152600092505b81831015610c5e57858301810151858401610120015291820191610c3f565b5080821115610c7257600061012082860101525b601f01601f191692909201610120019a9950505050505050505050565b600080600080600060a08688031215610ca757600080fd5b610cb086610b14565b9450610cbe60208701610b14565b9350610ccc60408701610b14565b9250610cda60608701610b14565b949793965091946080013592915050565b60008060008060008060a08789031215610d0457600080fd5b610d0d87610b14565b9550610d1b60208801610b14565b9450610d2960408801610b14565b935060608701359250608087013567ffffffffffffffff80821115610d4d57600080fd5b818901915089601f830112610d6157600080fd5b813581811115610d7057600080fd5b8a6020828501011115610d8257600080fd5b6020830194508093505050509295509295509295565b60008060408385031215610dab57600080fd5b82359150610b6a60208401610b30565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b600181811c90821680610df557607f821691505b602082108103610e1557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f821115610e7b57600081815260208120601f850160051c81016020861015610e585750805b601f850160051c820191505b81811015610e7757828155600101610e64565b5050505b505050565b815167ffffffffffffffff811115610e9a57610e9a610e1b565b610eae81610ea88454610de1565b84610e31565b602080601f831160018114610ee35760008415610ecb5750858301515b600019600386901b1c1916600185901b178555610e77565b600085815260208120601f198616915b82811015610f1257888601518255948401946001909101908401610ef3565b5085821015610f305787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000816000190483118215151615610f6857634e487b7160e01b600052601160045260246000fd5b500290565b60008154610f7a81610de1565b808552602060018381168015610f975760018114610fb157610fdf565b60ff1985168884015283151560051b880183019550610fdf565b866000528260002060005b85811015610fd75781548a8201860152908301908401610fbc565b890184019650505b505050505092915050565b828152604060208201526110196040820161100c84546001600160a01b031690565b6001600160a01b03169052565b600061102f60018401546001600160a01b031690565b6001600160a01b03908116606084015260028401548116608084015260038401541660a0830152600483015460c0830152600583015461107560e0840160ff8316610bc4565b61010061108b81850160ff8460081c1615159052565b610120840152506110a3610140830160068501610f6d565b94935050505056fea26469706673582212200cfd2765c5abbc8b3f2da5fa834fb40124c8fa9f4f26ebbe1e10f84740c8077464736f6c634300080f00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220cc6aae9c6fdbd8257e77c103342c1fc618d80791880a1c252c4f8718beefd75364736f6c634300080f0033" . parse () . expect ("invalid bytecode")
        });
    pub struct DisputeFixture<M>(ethers::contract::Contract<M>);
    impl<M> Clone for DisputeFixture<M> {
        fn clone(&self) -> Self {
            DisputeFixture(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for DisputeFixture<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for DisputeFixture<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(DisputeFixture))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> DisputeFixture<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), DISPUTEFIXTURE_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                DISPUTEFIXTURE_ABI.clone(),
                DISPUTEFIXTURE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bound` (0x5a6c1eed) function"]
        pub fn bound(
            &self,
            x: ethers::core::types::U256,
            min: ethers::core::types::U256,
            max: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([90, 108, 30, 237], (x, min, max))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x6bce989b) function"]
        pub fn deal_with_token(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([107, 206, 152, 155], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x97754ae9) function"]
        pub fn deal_with_token_and_adjust(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
            adjust: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([151, 117, 74, 233], (token, to, give, adjust))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0xc88a5e6d) function"]
        pub fn deal(
            &self,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 138, 94, 109], (to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x29ce9dde) function"]
        pub fn deploy_code_with_args(
            &self,
            what: String,
            args: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 206, 157, 222], (what, args))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x9a8325a0) function"]
        pub fn deploy_code(
            &self,
            what: String,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([154, 131, 37, 160], what)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x233240ee) function"]
        pub fn hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 50, 64, 238], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x29a9e300) function"]
        pub fn hoax_1(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([41, 169, 227, 0], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xaf9bbe5f) function"]
        pub fn hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([175, 155, 190, 95], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xe9a79a7b) function"]
        pub fn hoax_2(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([233, 167, 154, 123], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewind` (0x2d6c17a3) function"]
        pub fn rewind(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([45, 108, 23, 163], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `skip` (0xb9c071b4) function"]
        pub fn skip(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([185, 192, 113, 180], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x108554f2) function"]
        pub fn start_hoax_1(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([16, 133, 84, 242], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x3bf82db1) function"]
        pub fn start_hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 248, 45, 177], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x6f597075) function"]
        pub fn start_hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([111, 89, 112, 117], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0xd06d8229) function"]
        pub fn start_hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 109, 130, 41], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tip` (0xd82555f1) function"]
        pub fn tip(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 37, 85, 241], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `FeeCombinationSet` event"]
        pub fn fee_combination_set_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, FeeCombinationSetFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `SafeBlockThresholdSet` event"]
        pub fn safe_block_threshold_set_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, SafeBlockThresholdSetFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenWhitelisted` event"]
        pub fn token_whitelisted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenWhitelistedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputeSettled` event"]
        pub fn trade_dispute_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputed` event"]
        pub fn trade_disputed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeFilled` event"]
        pub fn trade_filled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeFilledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeRequested` event"]
        pub fn trade_requested_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeRequestedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeSettled` event"]
        pub fn trade_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `UpdatedFeeForTrade` event"]
        pub fn updated_fee_for_trade_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, UpdatedFeeForTradeFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `WARNING_Deprecated` event"]
        pub fn warning_deprecated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, WarningDeprecatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, DisputeFixtureEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for DisputeFixture<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "FeeCombinationSet",
        abi = "FeeCombinationSet(uint256,uint256,uint256)"
    )]
    pub struct FeeCombinationSetFilter {
        pub dispute_bond_pct: ethers::core::types::U256,
        pub trade_rebate_pct: ethers::core::types::U256,
        pub relayer_refund_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "SafeBlockThresholdSet", abi = "SafeBlockThresholdSet(uint256)")]
    pub struct SafeBlockThresholdSetFilter {
        pub new_safe_block_threshold: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokenWhitelisted", abi = "TokenWhitelisted(address,bool)")]
    pub struct TokenWhitelistedFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
        pub whitelisted: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeDisputeSettled",
        abi = "TradeDisputeSettled(address,uint256,bytes32,bool)"
    )]
    pub struct TradeDisputeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub dispute_id: [u8; 32],
        pub answer: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TradeDisputed", abi = "TradeDisputed(address,uint256,bytes32)")]
    pub struct TradeDisputedFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub dispute_id: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeFilled",
        abi = "TradeFilled(address,uint256,uint256,uint256)"
    )]
    pub struct TradeFilledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeRequested",
        abi = "TradeRequested(address,address,uint256,uint256,uint256,address,uint256)"
    )]
    pub struct TradeRequestedFilter {
        #[ethevent(indexed)]
        pub token_in: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub token_out: ethers::core::types::Address,
        pub amount_in: ethers::core::types::U256,
        pub min_amount_out: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub to: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TradeSettled", abi = "TradeSettled(address,uint256)")]
    pub struct TradeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "UpdatedFeeForTrade",
        abi = "UpdatedFeeForTrade(address,uint256,uint256)"
    )]
    pub struct UpdatedFeeForTradeFilter {
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        pub new_fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "WARNING_Deprecated", abi = "WARNING_Deprecated(string)")]
    pub struct WarningDeprecatedFilter {
        pub msg: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum DisputeFixtureEvents {
        FeeCombinationSetFilter(FeeCombinationSetFilter),
        SafeBlockThresholdSetFilter(SafeBlockThresholdSetFilter),
        TokenWhitelistedFilter(TokenWhitelistedFilter),
        TradeDisputeSettledFilter(TradeDisputeSettledFilter),
        TradeDisputedFilter(TradeDisputedFilter),
        TradeFilledFilter(TradeFilledFilter),
        TradeRequestedFilter(TradeRequestedFilter),
        TradeSettledFilter(TradeSettledFilter),
        UpdatedFeeForTradeFilter(UpdatedFeeForTradeFilter),
        WarningDeprecatedFilter(WarningDeprecatedFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for DisputeFixtureEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = FeeCombinationSetFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::FeeCombinationSetFilter(decoded));
            }
            if let Ok(decoded) = SafeBlockThresholdSetFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::SafeBlockThresholdSetFilter(decoded));
            }
            if let Ok(decoded) = TokenWhitelistedFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::TokenWhitelistedFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputeSettledFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::TradeDisputeSettledFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputedFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::TradeDisputedFilter(decoded));
            }
            if let Ok(decoded) = TradeFilledFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::TradeFilledFilter(decoded));
            }
            if let Ok(decoded) = TradeRequestedFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::TradeRequestedFilter(decoded));
            }
            if let Ok(decoded) = TradeSettledFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::TradeSettledFilter(decoded));
            }
            if let Ok(decoded) = UpdatedFeeForTradeFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::UpdatedFeeForTradeFilter(decoded));
            }
            if let Ok(decoded) = WarningDeprecatedFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::WarningDeprecatedFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(DisputeFixtureEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for DisputeFixtureEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                DisputeFixtureEvents::FeeCombinationSetFilter(element) => element.fmt(f),
                DisputeFixtureEvents::SafeBlockThresholdSetFilter(element) => element.fmt(f),
                DisputeFixtureEvents::TokenWhitelistedFilter(element) => element.fmt(f),
                DisputeFixtureEvents::TradeDisputeSettledFilter(element) => element.fmt(f),
                DisputeFixtureEvents::TradeDisputedFilter(element) => element.fmt(f),
                DisputeFixtureEvents::TradeFilledFilter(element) => element.fmt(f),
                DisputeFixtureEvents::TradeRequestedFilter(element) => element.fmt(f),
                DisputeFixtureEvents::TradeSettledFilter(element) => element.fmt(f),
                DisputeFixtureEvents::UpdatedFeeForTradeFilter(element) => element.fmt(f),
                DisputeFixtureEvents::WarningDeprecatedFilter(element) => element.fmt(f),
                DisputeFixtureEvents::LogFilter(element) => element.fmt(f),
                DisputeFixtureEvents::LogAddressFilter(element) => element.fmt(f),
                DisputeFixtureEvents::LogBytesFilter(element) => element.fmt(f),
                DisputeFixtureEvents::LogBytes32Filter(element) => element.fmt(f),
                DisputeFixtureEvents::LogIntFilter(element) => element.fmt(f),
                DisputeFixtureEvents::LogNamedAddressFilter(element) => element.fmt(f),
                DisputeFixtureEvents::LogNamedBytesFilter(element) => element.fmt(f),
                DisputeFixtureEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                DisputeFixtureEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                DisputeFixtureEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                DisputeFixtureEvents::LogNamedIntFilter(element) => element.fmt(f),
                DisputeFixtureEvents::LogNamedStringFilter(element) => element.fmt(f),
                DisputeFixtureEvents::LogNamedUintFilter(element) => element.fmt(f),
                DisputeFixtureEvents::LogStringFilter(element) => element.fmt(f),
                DisputeFixtureEvents::LogUintFilter(element) => element.fmt(f),
                DisputeFixtureEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `bound` function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bound", abi = "bound(uint256,uint256,uint256)")]
    pub struct BoundCall {
        pub x: ethers::core::types::U256,
        pub min: ethers::core::types::U256,
        pub max: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal` function with signature `deal(address,address,uint256)` and selector `[107, 206, 152, 155]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256)")]
    pub struct DealWithTokenCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal` function with signature `deal(address,address,uint256,bool)` and selector `[151, 117, 74, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256,bool)")]
    pub struct DealWithTokenAndAdjustCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
        pub adjust: bool,
    }
    #[doc = "Container type for all input parameters for the `deal` function with signature `deal(address,uint256)` and selector `[200, 138, 94, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,uint256)")]
    pub struct DealCall {
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deployCode` function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string,bytes)")]
    pub struct DeployCodeWithArgsCall {
        pub what: String,
        pub args: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `deployCode` function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string)")]
    pub struct DeployCodeCall {
        pub what: String,
    }
    #[doc = "Container type for all input parameters for the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address)` and selector `[35, 50, 64, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address)")]
    pub struct Hoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address,address)` and selector `[41, 169, 227, 0]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address)")]
    pub struct Hoax1Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address,address,uint256)` and selector `[175, 155, 190, 95]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address,uint256)")]
    pub struct Hoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `hoax` function with signature `hoax(address,uint256)` and selector `[233, 167, 154, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,uint256)")]
    pub struct Hoax2Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `rewind` function with signature `rewind(uint256)` and selector `[45, 108, 23, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewind", abi = "rewind(uint256)")]
    pub struct RewindCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setUp` function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `skip` function with signature `skip(uint256)` and selector `[185, 192, 113, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "skip", abi = "skip(uint256)")]
    pub struct SkipCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address,uint256)` and selector `[16, 133, 84, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,uint256)")]
    pub struct StartHoax1Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address,address,uint256)` and selector `[59, 248, 45, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address,uint256)")]
    pub struct StartHoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address)` and selector `[111, 89, 112, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address)")]
    pub struct StartHoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `startHoax` function with signature `startHoax(address,address)` and selector `[208, 109, 130, 41]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address)")]
    pub struct StartHoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `tip` function with signature `tip(address,address,uint256)` and selector `[216, 37, 85, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tip", abi = "tip(address,address,uint256)")]
    pub struct TipCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum DisputeFixtureCalls {
        IsTest(IsTestCall),
        Bound(BoundCall),
        DealWithToken(DealWithTokenCall),
        DealWithTokenAndAdjust(DealWithTokenAndAdjustCall),
        Deal(DealCall),
        DeployCodeWithArgs(DeployCodeWithArgsCall),
        DeployCode(DeployCodeCall),
        Failed(FailedCall),
        Hoax0(Hoax0Call),
        Hoax1(Hoax1Call),
        Hoax3(Hoax3Call),
        Hoax2(Hoax2Call),
        Rewind(RewindCall),
        SetUp(SetUpCall),
        Skip(SkipCall),
        StartHoax1(StartHoax1Call),
        StartHoax3(StartHoax3Call),
        StartHoax0(StartHoax0Call),
        StartHoax2(StartHoax2Call),
        Tip(TipCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for DisputeFixtureCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <BoundCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::Bound(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::DealWithToken(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenAndAdjustCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::DealWithTokenAndAdjust(decoded));
            }
            if let Ok(decoded) = <DealCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DisputeFixtureCalls::Deal(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeWithArgsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::DeployCodeWithArgs(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::DeployCode(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::Failed(decoded));
            }
            if let Ok(decoded) = <Hoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::Hoax0(decoded));
            }
            if let Ok(decoded) = <Hoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::Hoax1(decoded));
            }
            if let Ok(decoded) = <Hoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::Hoax3(decoded));
            }
            if let Ok(decoded) = <Hoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::Hoax2(decoded));
            }
            if let Ok(decoded) = <RewindCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::Rewind(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::SetUp(decoded));
            }
            if let Ok(decoded) = <SkipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DisputeFixtureCalls::Skip(decoded));
            }
            if let Ok(decoded) =
                <StartHoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::StartHoax1(decoded));
            }
            if let Ok(decoded) =
                <StartHoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::StartHoax3(decoded));
            }
            if let Ok(decoded) =
                <StartHoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::StartHoax0(decoded));
            }
            if let Ok(decoded) =
                <StartHoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeFixtureCalls::StartHoax2(decoded));
            }
            if let Ok(decoded) = <TipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DisputeFixtureCalls::Tip(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DisputeFixtureCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for DisputeFixtureCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                DisputeFixtureCalls::IsTest(element) => element.encode(),
                DisputeFixtureCalls::Bound(element) => element.encode(),
                DisputeFixtureCalls::DealWithToken(element) => element.encode(),
                DisputeFixtureCalls::DealWithTokenAndAdjust(element) => element.encode(),
                DisputeFixtureCalls::Deal(element) => element.encode(),
                DisputeFixtureCalls::DeployCodeWithArgs(element) => element.encode(),
                DisputeFixtureCalls::DeployCode(element) => element.encode(),
                DisputeFixtureCalls::Failed(element) => element.encode(),
                DisputeFixtureCalls::Hoax0(element) => element.encode(),
                DisputeFixtureCalls::Hoax1(element) => element.encode(),
                DisputeFixtureCalls::Hoax3(element) => element.encode(),
                DisputeFixtureCalls::Hoax2(element) => element.encode(),
                DisputeFixtureCalls::Rewind(element) => element.encode(),
                DisputeFixtureCalls::SetUp(element) => element.encode(),
                DisputeFixtureCalls::Skip(element) => element.encode(),
                DisputeFixtureCalls::StartHoax1(element) => element.encode(),
                DisputeFixtureCalls::StartHoax3(element) => element.encode(),
                DisputeFixtureCalls::StartHoax0(element) => element.encode(),
                DisputeFixtureCalls::StartHoax2(element) => element.encode(),
                DisputeFixtureCalls::Tip(element) => element.encode(),
                DisputeFixtureCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for DisputeFixtureCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                DisputeFixtureCalls::IsTest(element) => element.fmt(f),
                DisputeFixtureCalls::Bound(element) => element.fmt(f),
                DisputeFixtureCalls::DealWithToken(element) => element.fmt(f),
                DisputeFixtureCalls::DealWithTokenAndAdjust(element) => element.fmt(f),
                DisputeFixtureCalls::Deal(element) => element.fmt(f),
                DisputeFixtureCalls::DeployCodeWithArgs(element) => element.fmt(f),
                DisputeFixtureCalls::DeployCode(element) => element.fmt(f),
                DisputeFixtureCalls::Failed(element) => element.fmt(f),
                DisputeFixtureCalls::Hoax0(element) => element.fmt(f),
                DisputeFixtureCalls::Hoax1(element) => element.fmt(f),
                DisputeFixtureCalls::Hoax3(element) => element.fmt(f),
                DisputeFixtureCalls::Hoax2(element) => element.fmt(f),
                DisputeFixtureCalls::Rewind(element) => element.fmt(f),
                DisputeFixtureCalls::SetUp(element) => element.fmt(f),
                DisputeFixtureCalls::Skip(element) => element.fmt(f),
                DisputeFixtureCalls::StartHoax1(element) => element.fmt(f),
                DisputeFixtureCalls::StartHoax3(element) => element.fmt(f),
                DisputeFixtureCalls::StartHoax0(element) => element.fmt(f),
                DisputeFixtureCalls::StartHoax2(element) => element.fmt(f),
                DisputeFixtureCalls::Tip(element) => element.fmt(f),
                DisputeFixtureCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for DisputeFixtureCalls {
        fn from(var: IsTestCall) -> Self {
            DisputeFixtureCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<BoundCall> for DisputeFixtureCalls {
        fn from(var: BoundCall) -> Self {
            DisputeFixtureCalls::Bound(var)
        }
    }
    impl ::std::convert::From<DealWithTokenCall> for DisputeFixtureCalls {
        fn from(var: DealWithTokenCall) -> Self {
            DisputeFixtureCalls::DealWithToken(var)
        }
    }
    impl ::std::convert::From<DealWithTokenAndAdjustCall> for DisputeFixtureCalls {
        fn from(var: DealWithTokenAndAdjustCall) -> Self {
            DisputeFixtureCalls::DealWithTokenAndAdjust(var)
        }
    }
    impl ::std::convert::From<DealCall> for DisputeFixtureCalls {
        fn from(var: DealCall) -> Self {
            DisputeFixtureCalls::Deal(var)
        }
    }
    impl ::std::convert::From<DeployCodeWithArgsCall> for DisputeFixtureCalls {
        fn from(var: DeployCodeWithArgsCall) -> Self {
            DisputeFixtureCalls::DeployCodeWithArgs(var)
        }
    }
    impl ::std::convert::From<DeployCodeCall> for DisputeFixtureCalls {
        fn from(var: DeployCodeCall) -> Self {
            DisputeFixtureCalls::DeployCode(var)
        }
    }
    impl ::std::convert::From<FailedCall> for DisputeFixtureCalls {
        fn from(var: FailedCall) -> Self {
            DisputeFixtureCalls::Failed(var)
        }
    }
    impl ::std::convert::From<Hoax0Call> for DisputeFixtureCalls {
        fn from(var: Hoax0Call) -> Self {
            DisputeFixtureCalls::Hoax0(var)
        }
    }
    impl ::std::convert::From<Hoax1Call> for DisputeFixtureCalls {
        fn from(var: Hoax1Call) -> Self {
            DisputeFixtureCalls::Hoax1(var)
        }
    }
    impl ::std::convert::From<Hoax3Call> for DisputeFixtureCalls {
        fn from(var: Hoax3Call) -> Self {
            DisputeFixtureCalls::Hoax3(var)
        }
    }
    impl ::std::convert::From<Hoax2Call> for DisputeFixtureCalls {
        fn from(var: Hoax2Call) -> Self {
            DisputeFixtureCalls::Hoax2(var)
        }
    }
    impl ::std::convert::From<RewindCall> for DisputeFixtureCalls {
        fn from(var: RewindCall) -> Self {
            DisputeFixtureCalls::Rewind(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for DisputeFixtureCalls {
        fn from(var: SetUpCall) -> Self {
            DisputeFixtureCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<SkipCall> for DisputeFixtureCalls {
        fn from(var: SkipCall) -> Self {
            DisputeFixtureCalls::Skip(var)
        }
    }
    impl ::std::convert::From<StartHoax1Call> for DisputeFixtureCalls {
        fn from(var: StartHoax1Call) -> Self {
            DisputeFixtureCalls::StartHoax1(var)
        }
    }
    impl ::std::convert::From<StartHoax3Call> for DisputeFixtureCalls {
        fn from(var: StartHoax3Call) -> Self {
            DisputeFixtureCalls::StartHoax3(var)
        }
    }
    impl ::std::convert::From<StartHoax0Call> for DisputeFixtureCalls {
        fn from(var: StartHoax0Call) -> Self {
            DisputeFixtureCalls::StartHoax0(var)
        }
    }
    impl ::std::convert::From<StartHoax2Call> for DisputeFixtureCalls {
        fn from(var: StartHoax2Call) -> Self {
            DisputeFixtureCalls::StartHoax2(var)
        }
    }
    impl ::std::convert::From<TipCall> for DisputeFixtureCalls {
        fn from(var: TipCall) -> Self {
            DisputeFixtureCalls::Tip(var)
        }
    }
    impl ::std::convert::From<VmCall> for DisputeFixtureCalls {
        fn from(var: VmCall) -> Self {
            DisputeFixtureCalls::Vm(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsTestReturn(pub bool);
    #[doc = "Container type for all return fields from the `bound` function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct BoundReturn {
        pub result: ethers::core::types::U256,
    }
    #[doc = "Container type for all return fields from the `deployCode` function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct DeployCodeWithArgsReturn {
        pub addr: ethers::core::types::Address,
    }
    #[doc = "Container type for all return fields from the `deployCode` function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct DeployCodeReturn {
        pub addr: ethers::core::types::Address,
    }
    #[doc = "Container type for all return fields from the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct FailedReturn(pub bool);
    #[doc = "Container type for all return fields from the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct VmReturn(pub ethers::core::types::Address);
}
