pub use oraclefixture_mod::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod oraclefixture_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "OracleFixture was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static ORACLEFIXTURE_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"WARNING_Deprecated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"adjust\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rewind\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"skip\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tip\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static ORACLEFIXTURE_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060408190526000805460ff191660011790556001625e79b760e01b031990527f81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a608452737109709ecfa91a80626ff3989d68f67f5b1dd12d63ffa1864960a46020604051808303816000875af115801562000080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a6919062000597565b600880546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b66004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156200013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000161919062000597565b600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f9791f723bf26b668c8cac0664b66d058cdb2a424cfb08c05dd9da570be0eff6f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015620001f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021c919062000597565b600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002bb73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506006604051602001620002a59190620005c2565b60408051601f19818403018152919052620003c0565b600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200038c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506012604051602001620002a591906060808252600d908201526c2bb930b83832b21022ba3432b960991b608082015260a060208201819052600490820152630ae8aa8960e31b60c082015260ff91909116604082015260e00190565b600c80546001600160a01b0319166001600160a01b0392909216919091179055348015620003b957600080fd5b506200079f565b60006001600160a01b0384163b8015620003de57849150506200045c565b6000620003ec858562000463565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200042d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004579190810190620006e2565b509150505b9392505050565b604051638d1cc92560e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc92590620004a190879060040162000737565b6000604051808303816000875af1158015620004c1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004eb9190810190620006e2565b83604051602001620004ff9291906200076c565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620005905760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b606482015260840160405180910390fd5b5092915050565b600060208284031215620005aa57600080fd5b81516001600160a01b03811681146200045c57600080fd5b606081526000620005e76060830160048152635553444360e01b602082015260400190565b82810360208401526200060b8160048152635553444360e01b602082015260400190565b91505060ff8316604083015292915050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200065057818101518382015260200162000636565b8381111562000660576000848401525b50505050565b60006001600160401b03808411156200068357620006836200061d565b604051601f8501601f19908116603f01168101908282118183101715620006ae57620006ae6200061d565b81604052809350858152868686011115620006c857600080fd5b620006d886602083018762000633565b5050509392505050565b600060208284031215620006f557600080fd5b81516001600160401b038111156200070c57600080fd5b8201601f810184136200071e57600080fd5b6200072f8482516020840162000666565b949350505050565b60208152600082518060208401526200075881604085016020870162000633565b601f01601f19169190910160400192915050565b600083516200078081846020880162000633565b8351908301906200079681836020880162000633565b01949350505050565b613e1880620007af6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80636f597075116100b8578063ba414fa61161007c578063ba414fa61461027d578063c88a5e6d14610295578063d06d8229146102a8578063d82555f1146102bb578063e9a79a7b146102ce578063fa7626d4146102e157600080fd5b80636f5970751461021e57806397754ae9146102315780639a8325a014610244578063af9bbe5f14610257578063b9c071b41461026a57600080fd5b80632d6c17a3116100ff5780632d6c17a3146101af5780633a768463146101c25780633bf82db1146101d75780635a6c1eed146101ea5780636bce989b1461020b57600080fd5b80630a9254e41461013c578063108554f214610146578063233240ee1461015957806329a9e3001461016c57806329ce9dde1461017f575b600080fd5b6101446102ee565b005b610144610154366004612a16565b61081b565b610144610167366004612a40565b6108ec565b61014461017a366004612a62565b6109c0565b61019261018d366004612b62565b610a6b565b6040516001600160a01b0390911681526020015b60405180910390f35b6101446101bd366004612bda565b610b92565b610192600080516020613da383398151915281565b6101446101e5366004612bf3565b610bce565b6101fd6101f8366004612c2f565b610ca8565b6040519081526020016101a6565b610144610219366004612bf3565b610dd3565b61014461022c366004612a40565b610de5565b61014461023f366004612c69565b610e88565b610192610252366004612cb8565b6110a8565b610144610265366004612bf3565b6111a2565b610144610278366004612bda565b611249565b610285611267565b60405190151581526020016101a6565b6101446102a3366004612a16565b61138a565b6101446102b6366004612a62565b6113bd565b6101446102c9366004612bf3565b611468565b6101446102dc366004612a16565b611513565b6000546102859060ff1681565b6102f66115b2565b604051610302906129b8565b604051809103906000f08015801561031e573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b815260048101929092526024820152601060448201526f416c6c4b6e6f77696e674f7261636c6560801b6064820152600080516020613da38339815191529063c657c71890608401600060405180830381600087803b1580156103ac57600080fd5b505af11580156103c0573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b039091166004820152600080516020613da383398151915292506306447d569150602401600060405180830381600087803b15801561041757600080fd5b505af115801561042b573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350610468929091169060001990600401612cf5565b6020604051808303816000875af1158015610487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ab9190612d0e565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926104e49291169060001990600401612cf5565b6020604051808303816000875af1158015610503573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105279190612d0e565b50604080516390c5013b60e01b81529051600080516020613da3833981519152916390c5013b91600480830192600092919082900301818387803b15801561056e57600080fd5b505af1158015610582573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b039091166004820152600080516020613da383398151915292506306447d569150602401600060405180830381600087803b1580156105d957600080fd5b505af11580156105ed573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935061062a929091169060001990600401612cf5565b6020604051808303816000875af1158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190612d0e565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926106a69291169060001990600401612cf5565b6020604051808303816000875af11580156106c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e99190612d0e565b50604080516390c5013b60e01b81529051600080516020613da3833981519152916390c5013b91600480830192600092919082900301818387803b15801561073057600080fd5b505af1158015610744573d6000803e3d6000fd5b5050600d54600b54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b15801561079857600080fd5b505af11580156107ac573d6000803e3d6000fd5b5050600d54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b91506044015b600060405180830381600087803b15801561080157600080fd5b505af1158015610815573d6000803e3d6000fd5b50505050565b60405163c88a5e6d60e01b8152600080516020613da38339815191529063c88a5e6d9061084e9085908590600401612cf5565b600060405180830381600087803b15801561086857600080fd5b505af115801561087c573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b0385166004820152600080516020613da383398151915292506306447d5691506024015b600060405180830381600087803b1580156108d057600080fd5b505af11580156108e4573d6000803e3d6000fd5b505050505050565b60405163c88a5e6d60e01b8152600080516020613da38339815191529063c88a5e6d90610923908490600160801b90600401612cf5565b600060405180830381600087803b15801561093d57600080fd5b505af1158015610951573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b0384166004820152600080516020613da3833981519152925063ca669fa791506024015b600060405180830381600087803b1580156109a557600080fd5b505af11580156109b9573d6000803e3d6000fd5b5050505050565b60405163c88a5e6d60e01b8152600080516020613da38339815191529063c88a5e6d906109f7908590600160801b90600401612cf5565b600060405180830381600087803b158015610a1157600080fd5b505af1158015610a25573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b03808616600483015284166024820152600080516020613da383398151915292506347e50cce91506044016108b6565b604051638d1cc92560e01b81526000908190600080516020613da383398151915290638d1cc92590610aa1908790600401612d57565b6000604051808303816000875af1158015610ac0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ae89190810190612d8a565b83604051602001610afa929190612e01565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216610b8b5760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b60648201526084015b60405180910390fd5b5092915050565b600080516020613da383398151915263e5d6bf02610bb08342612e46565b6040518263ffffffff1660e01b815260040161098b91815260200190565b60405163c88a5e6d60e01b8152600080516020613da38339815191529063c88a5e6d90610c019086908590600401612cf5565b600060405180830381600087803b158015610c1b57600080fd5b505af1158015610c2f573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b03808716600483015285166024820152600080516020613da383398151915292506345b5607891506044015b600060405180830381600087803b158015610c8b57600080fd5b505af1158015610c9f573d6000803e3d6000fd5b50505050505050565b600081831115610d205760405162461bcd60e51b815260206004820152603a60248201527f5465737420626f756e642875696e743235362c75696e743235362c75696e743260448201527f3536293a204d6178206973206c657373207468616e206d696e2e0000000000006064820152608401610b82565b6000610d2c8484612e46565b905080600003610d3e57839150610d76565b6000198103610d4f57849150610d76565b610d5881612e5d565b90506000610d668287612e76565b9050610d728186612e98565b9250505b60408051818152600c818301526b109bdd5b990814995cdd5b1d60a21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1509392505050565b610de08383836000610e88565b505050565b60405163c88a5e6d60e01b8152600080516020613da38339815191529063c88a5e6d90610e1c908490600160801b90600401612cf5565b600060405180830381600087803b158015610e3657600080fd5b505af1158015610e4a573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b0384166004820152600080516020613da383398151915292506306447d56915060240161098b565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b1790529151600092871691610edc91612eb0565b6000604051808303816000865af19150503d8060008114610f19576040519150601f19603f3d011682016040523d82523d6000602084013e610f1e565b606091505b50915050600081806020019051810190610f389190612ecc565b9050610fa484610f9e87610f756370a0823160e01b610f5860018d611791565b9060038201805463ffffffff191660e09290921c91909117905590565b90600282018054600181018255600091825260209091206001600160a01b039290921691015590565b906117b6565b82156108e45760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290516000916001600160a01b03891691610fec9190612eb0565b6000604051808303816000865af19150503d8060008114611029576040519150601f19603f3d011682016040523d82523d6000602084013e61102e565b606091505b509150506000818060200190518101906110489190612ecc565b90508286101561106d5761105c8684612e46565b6110669082612e46565b9050611084565b6110778387612e46565b6110819082612e98565b90505b61109e81610f9e6318160ddd60e01b610f5860018d611791565b5050505050505050565b604051638d1cc92560e01b81526000908190600080516020613da383398151915290638d1cc925906110de908690600401612d57565b6000604051808303816000875af11580156110fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111259190810190612d8a565b90508051602082016000f091506001600160a01b03821661119c5760405162461bcd60e51b815260206004820152602b60248201527f54657374206465706c6f79436f646528737472696e67293a204465706c6f796d60448201526a32b73a103330b4b632b21760a91b6064820152608401610b82565b50919050565b60405163c88a5e6d60e01b8152600080516020613da38339815191529063c88a5e6d906111d59086908590600401612cf5565b600060405180830381600087803b1580156111ef57600080fd5b505af1158015611203573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b03808716600483015285166024820152600080516020613da383398151915292506347e50cce9150604401610c71565b600080516020613da383398151915263e5d6bf02610bb08342612e98565b60008054610100900460ff16156112875750600054610100900460ff1690565b6000600080516020613da38339815191523b1561138557604051600090600080516020613da3833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4906112ef9083906519985a5b195960d21b90602001612cf5565b60408051601f198184030181529082905261130d9291602001612ee5565b60408051601f198184030181529082905261132791612eb0565b6000604051808303816000865af19150503d8060008114611364576040519150601f19603f3d011682016040523d82523d6000602084013e611369565b606091505b50915050808060200190518101906113819190612d0e565b9150505b919050565b60405163c88a5e6d60e01b8152600080516020613da38339815191529063c88a5e6d906108b69085908590600401612cf5565b60405163c88a5e6d60e01b8152600080516020613da38339815191529063c88a5e6d906113f4908590600160801b90600401612cf5565b600060405180830381600087803b15801561140e57600080fd5b505af1158015611422573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b03808616600483015284166024820152600080516020613da383398151915292506345b5607891506044016108b6565b7f42b963ace015abb7c727e77dec115c5f418f4f96d9ec897f85c202793274661a6040516114ed906020808252603b908201527f54686520607469706020737464636865617420686173206265656e206465707260408201527f6563617465642e2055736520606465616c6020696e73746561642e0000000000606082015260800190565b60405180910390a1610de081610f9e84610f756370a0823160e01b610f5860018a611791565b60405163c88a5e6d60e01b8152600080516020613da38339815191529063c88a5e6d906115469085908590600401612cf5565b600060405180830381600087803b15801561156057600080fd5b505af1158015611574573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b0385166004820152600080516020613da3833981519152925063ca669fa791506024016108b6565b600854604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526005604482015264416c69636560d81b6064820152600080516020613da38339815191529063c657c71890608401600060405180830381600087803b15801561162057600080fd5b505af1158015611634573d6000803e3d6000fd5b5050600954604080516318caf8e360e31b81526001600160a01b039092166004830152602482015260036044820152622137b160e91b6064820152600080516020613da3833981519152925063c657c7189150608401600060405180830381600087803b1580156116a457600080fd5b505af11580156116b8573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526007604482015266436861726c696560c81b6064820152600080516020613da3833981519152925063c657c7189150608401600060405180830381600087803b15801561172c57600080fd5b505af1158015611740573d6000803e3d6000fd5b5050604080516318caf8e360e31b815230600482015260248101919091526003604482015262596f7560e81b6064820152600080516020613da3833981519152925063c657c71891506084016107e7565b6005820180546001600160a01b0319166001600160a01b039290921691909117905590565b6117c082826117c4565b5050565b600582015460038301546004840154600285018054604080516020808402820181019092528281526001600160a01b039096169560e09590951b946000939092909183018282801561183557602002820191906000526020600020905b815481526020019060010190808311611821575b5050505050905060008361184883611b9b565b604051602001611859929190612ee5565b60408051601f198184030181528282526001600160a01b038816600090815260018b0160209081528382206001600160e01b03198a1683528152928120919450909290916118ab918691889101612f16565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff166118e3576118e187611c3b565b505b6001600160a01b0385166000908152602088815260408083206001600160e01b0319881684528252808320905190918391611922918791899101612f16565b6040516020818303038152906040528051906020012081526020019081526020016000205460001b9050600080876001600160a01b0316846040516119679190612eb0565b600060405180830381855afa9150503d80600081146119a2576040519150601f19603f3d011682016040523d82523d6000602084013e6119a7565b606091505b5091506119c09050816119bb886020612f50565b61293b565b604051630667f9d760e41b815290925060009150600080516020613da38339815191529063667f9d70906119fa908b908790600401612cf5565b6020604051808303816000875af1158015611a19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3d9190612ecc565b9050808214611af15760405162461bcd60e51b815260206004820152606e60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526d39b73a1039bab83837b93a32b21760911b60a482015260c401610b82565b6040516370ca10bb60e01b8152600080516020613da3833981519152906370ca10bb90611b26908b9087908e90600401612f6f565b600060405180830381600087803b158015611b4057600080fd5b505af1158015611b54573d6000803e3d6000fd5b50505060058b0180546001600160a01b03191690555060038a01805463ffffffff19169055611b8760028b0160006129c5565b896004016000905550505050505050505050565b6060600082516020611bad9190612f50565b67ffffffffffffffff811115611bc557611bc5612a95565b6040519080825280601f01601f191660200182016040528015611bef576020820181803683370190505b50905060005b8351811015610b8b576000848281518110611c1257611c12612f90565b602002602001015190508082602002602001840152508080611c3390612e5d565b915050611bf5565b600581015460038201546004830154600284018054604080516020808402820181019092528281526000966001600160a01b03169560e01b949387939192909190830182828015611cab57602002820191906000526020600020905b815481526020019060010190808311611c97575b5050506001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a1684528252808320905195965094919350611cf592508591879101612f16565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff1615611d91576001600160a01b0384166000908152602087815260408083206001600160e01b03198716845282528083209051909291611d61918591879101612f16565b60405160208183030381529060405280519060200120815260200190815260200160002054945050505050919050565b600083611d9d83611b9b565b604051602001611dae929190612ee5565b6040516020818303038152906040529050600080516020613dc383398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611e0b57600080fd5b505af1158015611e1f573d6000803e3d6000fd5b50505050600080866001600160a01b031683604051611e3e9190612eb0565b600060405180830381855afa9150503d8060008114611e79576040519150601f19603f3d011682016040523d82523d6000602084013e611e7e565b606091505b509150611e929050816119bb876020612f50565b6040516365bc948160e01b81526001600160a01b038916600482015290925060009150600080516020613da3833981519152906365bc9481906024016000604051808303816000875af1158015611eed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f159190810190613026565b509050805160010361224e576000600080516020613dc383398151915260001c6001600160a01b031663667f9d708984600081518110611f5757611f57612f90565b60200260200101516040518363ffffffff1660e01b8152600401611f7c929190612cf5565b6020604051808303816000875af1158015611f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbf9190612ecc565b90508061201d577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a58883600081518110611ffb57611ffb612f90565b602002602001015160001c604051612014929190612cf5565b60405180910390a15b8083146120ce5760405162461bcd60e51b815260206004820152606d60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526c1cdb9d081cdd5c1c1bdc9d1959609a1b60a482015260c401610b82565b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed88888789604051602001612104929190612f16565b604051602081830303815290604052805190602001208560008151811061212d5761212d612f90565b602002602001015160001c6040516121489493929190613080565b60405180910390a18160008151811061216357612163612f90565b6020908102919091018101516001600160a01b038a1660009081528c835260408082206001600160e01b03198c16835284528082209051929390926121ac918a918c9101612f16565b60408051601f1981840301815291815281516020928301208352828201939093529082016000908120939093556001600160a01b038b16835260018d810182528284206001600160e01b03198c16855282528284209251909391612214918a918c9101612f16565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff1916911515919091179055506127c6565b6001815111156127565760005b8151811015612750576000600080516020613dc383398151915260001c6001600160a01b031663667f9d708a85858151811061229957612299612f90565b60200260200101516040518363ffffffff1660e01b81526004016122be929190612cf5565b6020604051808303816000875af11580156122dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123019190612ecc565b90508061235e577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a58984848151811061233c5761233c612f90565b602002602001015160001c604051612355929190612cf5565b60405180910390a15b600080516020613dc383398151915260001c6001600160a01b03166370ca10bb8a85858151811061239157612391612f90565b602002602001015161133760f01b6040518463ffffffff1660e01b81526004016123bd93929190612f6f565b600060405180830381600087803b1580156123d757600080fd5b505af11580156123eb573d6000803e3d6000fd5b50505050600060608a6001600160a01b03168760405161240b9190612eb0565b600060405180830381855afa9150503d8060008114612446576040519150601f19603f3d011682016040523d82523d6000602084013e61244b565b606091505b509092509050612460816119bb8b6020612f50565b9550818015612473575061133760f01b86145b156126ae577f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c6040516020016124ae929190612f16565b604051602081830303815290604052805190602001208888815181106124d6576124d6612f90565b602002602001015160001c6040516124f19493929190613080565b60405180910390a184848151811061250b5761250b612f90565b6020908102919091018101516001600160a01b038d1660009081528f835260408082206001600160e01b03198f1683528452808220905192939092612554918d918f9101612f16565b6040516020818303038152906040528051906020012081526020019081526020016000208190555060018d60010160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160e01b0319166001600160e01b031916815260200190815260200160002060008a8c6040516020016125df929190612f16565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff021916908315150217905550600080516020613dc383398151915260001c6001600160a01b03166370ca10bb8c87878151811061264d5761264d612f90565b6020026020010151866040518463ffffffff1660e01b815260040161267493929190612f6f565b600060405180830381600087803b15801561268e57600080fd5b505af11580156126a2573d6000803e3d6000fd5b50505050505050612750565b600080516020613dc383398151915260001c6001600160a01b03166370ca10bb8c8787815181106126e1576126e1612f90565b6020026020010151866040518463ffffffff1660e01b815260040161270893929190612f6f565b600060405180830381600087803b15801561272257600080fd5b505af1158015612736573d6000803e3d6000fd5b50505050505050808061274890612e5d565b91505061225b565b506127c6565b6040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e6064820152608401610b82565b6001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a168452825280832090519092916128089188918a9101612f16565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff166128955760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b6064820152608401610b82565b6005890180546001600160a01b031916905560038901805463ffffffff191690556128c460028a0160006129c5565b600060048a018190556001600160a01b038816815260208a815260408083206001600160e01b03198a168452825280832090519092916129089188918a9101612f16565b60405160208183030381529060405280519060200120815260200190815260200160002054975050505050505050919050565b60008060006020855111612950578451612953565b60205b905060005b818110156129ae5761296b816008612f50565b866129768388612e98565b8151811061298657612986612f90565b01602001516001600160f81b031916901c9290921791806129a681612e5d565b915050612958565b5090949350505050565b610cf2806130b183390190565b50805460008255906000526020600020908101906129e391906129e6565b50565b5b808211156129fb57600081556001016129e7565b5090565b80356001600160a01b038116811461138557600080fd5b60008060408385031215612a2957600080fd5b612a32836129ff565b946020939093013593505050565b600060208284031215612a5257600080fd5b612a5b826129ff565b9392505050565b60008060408385031215612a7557600080fd5b612a7e836129ff565b9150612a8c602084016129ff565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612ad457612ad4612a95565b604052919050565b600067ffffffffffffffff821115612af657612af6612a95565b50601f01601f191660200190565b6000612b17612b1284612adc565b612aab565b9050828152838383011115612b2b57600080fd5b828260208301376000602084830101529392505050565b600082601f830112612b5357600080fd5b612a5b83833560208501612b04565b60008060408385031215612b7557600080fd5b823567ffffffffffffffff80821115612b8d57600080fd5b612b9986838701612b42565b93506020850135915080821115612baf57600080fd5b508301601f81018513612bc157600080fd5b612bd085823560208401612b04565b9150509250929050565b600060208284031215612bec57600080fd5b5035919050565b600080600060608486031215612c0857600080fd5b612c11846129ff565b9250612c1f602085016129ff565b9150604084013590509250925092565b600080600060608486031215612c4457600080fd5b505081359360208301359350604090920135919050565b80151581146129e357600080fd5b60008060008060808587031215612c7f57600080fd5b612c88856129ff565b9350612c96602086016129ff565b9250604085013591506060850135612cad81612c5b565b939692955090935050565b600060208284031215612cca57600080fd5b813567ffffffffffffffff811115612ce157600080fd5b612ced84828501612b42565b949350505050565b6001600160a01b03929092168252602082015260400190565b600060208284031215612d2057600080fd5b8151612a5b81612c5b565b60005b83811015612d46578181015183820152602001612d2e565b838111156108155750506000910152565b6020815260008251806020840152612d76816040850160208701612d2b565b601f01601f19169190910160400192915050565b600060208284031215612d9c57600080fd5b815167ffffffffffffffff811115612db357600080fd5b8201601f81018413612dc457600080fd5b8051612dd2612b1282612adc565b818152856020838501011115612de757600080fd5b612df8826020830160208601612d2b565b95945050505050565b60008351612e13818460208801612d2b565b835190830190612e27818360208801612d2b565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015612e5857612e58612e30565b500390565b600060018201612e6f57612e6f612e30565b5060010190565b600082612e9357634e487b7160e01b600052601260045260246000fd5b500690565b60008219821115612eab57612eab612e30565b500190565b60008251612ec2818460208701612d2b565b9190910192915050565b600060208284031215612ede57600080fd5b5051919050565b6001600160e01b0319831681528151600090612f08816004850160208701612d2b565b919091016004019392505050565b825160009082906020808701845b83811015612f4057815185529382019390820190600101612f24565b5050948252509092019392505050565b6000816000190483118215151615612f6a57612f6a612e30565b500290565b6001600160a01b039390931683526020830191909152604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600082601f830112612fb757600080fd5b8151602067ffffffffffffffff821115612fd357612fd3612a95565b8160051b612fe2828201612aab565b9283528481018201928281019087851115612ffc57600080fd5b83870192505b8483101561301b57825182529183019190830190613002565b979650505050505050565b6000806040838503121561303957600080fd5b825167ffffffffffffffff8082111561305157600080fd5b61305d86838701612fa6565b9350602085015191508082111561307357600080fd5b50612bd085828601612fa6565b6001600160a01b039490941684526001600160e01b0319929092166020840152604083015260608201526080019056fe608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350601960038190556040519081527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a1610c578061009b6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461010d5780639d86698514610138578063af5899fc146101ab578063daf9c210146101be578063fc361c38146101f157600080fd5b806307de99f6146100a35780630ffb1d8b146100c957806313af4035146100de578063391fe4e2146100f15780638945bd28146100fa575b600080fd5b6100b66100b13660046109e4565b610204565b6040519081526020015b60405180910390f35b6100dc6100d7366004610a2a565b610215565b005b6100dc6100ec366004610a61565b610273565b6100b660035481565b6100dc6101083660046109e4565b6102e8565b600054610120906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b6101986101463660046109e4565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b0395861695938416949390921692909160ff8082169161010090041687565b6040516100c09796959493929190610a99565b6100b66101b9366004610aff565b61034d565b6101e16101cc366004610a61565b60026020526000908152604090205460ff1681565b60405190151581526020016100c0565b6100dc6101ff366004610b4a565b6105ee565b600061020f8261093e565b92915050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f90610b6f565b60405180910390fd5b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b6000546001600160a01b0316331461029d5760405162461bcd60e51b815260040161023f90610b6f565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103125760405162461bcd60e51b815260040161023f90610b6f565b60038190556040518181527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a150565b6001600160a01b03821660009081526002602052604081205460ff166103915760405163010d7e6160e11b81526001600160a01b038416600482015260240161023f565b600061039c8361093e565b604080516001600160a01b03808a1660208301528089169282019290925290861660608201526080810185905260a0810182905290915060009060c00160408051601f19818403018152919052805160209091012090506001600082815260016020526040902060050154610100900460ff16600281111561042057610420610a83565b036104415760405163d5e880e960e01b81526004810182905260240161023f565b60006040518060e00160405280896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b03168152602001868152602001848152602001600015158152602001600160028111156104a3576104a3610a83565b9052600083815260016020818152604092839020845181546001600160a01b03199081166001600160a01b03928316178355928601519382018054841694821694909417909355928401516002808501805490931691909316179055606083015160038301556080830151600483015560a083015160058301805460ff198116921515928317825560c0860151959650869593919261ffff1990911661ff0019909116179061010090849081111561055d5761055d610a83565b021790555061057a9150506001600160a01b03871688308661095a565b61058f6001600160a01b03871633308861095a565b604080516001600160a01b03888116825260208201889052918101859052818916918a169084907fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699060600160405180910390a4509695505050505050565b6000546001600160a01b031633146106185760405162461bcd60e51b815260040161023f90610b6f565b6000828152600160208181526040808420815160e08101835281546001600160a01b03908116825294820154851693810193909352600280820154909416918301919091526003810154606083015260048101546080830152600581015460ff808216151560a08501529293919260c085019261010090920416908111156106a2576106a2610a83565b60028111156106b3576106b3610a83565b905250905060028160c0015160028111156106d0576106d0610a83565b036106f15760405163b677167760e01b81526004810184905260240161023f565b81151560010361079c5780604001516001600160a01b031663a9059cbb8260000151836060015184608001516107279190610bab565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107969190610bc3565b50610839565b80604001516001600160a01b031663a9059cbb8260200151836060015184608001516107c89190610bab565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108379190610bc3565b505b600260c0820181815283151560a08401908152600086815260016020818152604092839020875181546001600160a01b039182166001600160a01b0319918216178355928901519382018054948216948416949094179093559287015183870180549190931691161790556060850151600382015560808501516004820155905160058201805491151560ff198316811782559351869593949093919261ff001990911661ffff1990911617906101009084908111156108fb576108fb610a83565b02179055505060405183151581528491507fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a2505050565b60006064600354836109509190610be0565b61020f9190610bff565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806109dd5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161023f565b5050505050565b6000602082840312156109f657600080fd5b5035919050565b80356001600160a01b0381168114610a1457600080fd5b919050565b8015158114610a2757600080fd5b50565b60008060408385031215610a3d57600080fd5b610a46836109fd565b91506020830135610a5681610a19565b809150509250929050565b600060208284031215610a7357600080fd5b610a7c826109fd565b9392505050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905282151560a082015260e0810160038310610aed57634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b60008060008060808587031215610b1557600080fd5b610b1e856109fd565b9350610b2c602086016109fd565b9250610b3a604086016109fd565b9396929550929360600135925050565b60008060408385031215610b5d57600080fd5b823591506020830135610a5681610a19565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610bbe57610bbe610b95565b500190565b600060208284031215610bd557600080fd5b8151610a7c81610a19565b6000816000190483118215151615610bfa57610bfa610b95565b500290565b600082610c1c57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205bdec491885dcc1ed8f1a4dbb49b3f7c52371c21a2e5f51f7e6207c148789ec264736f6c634300080d00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220cea7375b567dc4d83a7710b0d19984e73514ac237bb7ca8283469a4993240ce264736f6c634300080d0033" . parse () . expect ("invalid bytecode")
        });
    pub struct OracleFixture<M>(ethers::contract::Contract<M>);
    impl<M> Clone for OracleFixture<M> {
        fn clone(&self) -> Self {
            OracleFixture(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for OracleFixture<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for OracleFixture<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(OracleFixture))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> OracleFixture<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), ORACLEFIXTURE_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                ORACLEFIXTURE_ABI.clone(),
                ORACLEFIXTURE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bound` (0x5a6c1eed) function"]
        pub fn bound(
            &self,
            x: ethers::core::types::U256,
            min: ethers::core::types::U256,
            max: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([90, 108, 30, 237], (x, min, max))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x6bce989b) function"]
        pub fn deal_with_token(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([107, 206, 152, 155], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x97754ae9) function"]
        pub fn deal_with_token_and_adjust(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
            adjust: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([151, 117, 74, 233], (token, to, give, adjust))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0xc88a5e6d) function"]
        pub fn deal(
            &self,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 138, 94, 109], (to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x29ce9dde) function"]
        pub fn deploy_code_with_args(
            &self,
            what: String,
            args: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 206, 157, 222], (what, args))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x9a8325a0) function"]
        pub fn deploy_code(
            &self,
            what: String,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([154, 131, 37, 160], what)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x233240ee) function"]
        pub fn hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 50, 64, 238], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x29a9e300) function"]
        pub fn hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([41, 169, 227, 0], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xaf9bbe5f) function"]
        pub fn hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([175, 155, 190, 95], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xe9a79a7b) function"]
        pub fn hoax_4(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([233, 167, 154, 123], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewind` (0x2d6c17a3) function"]
        pub fn rewind(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([45, 108, 23, 163], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `skip` (0xb9c071b4) function"]
        pub fn skip(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([185, 192, 113, 180], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x108554f2) function"]
        pub fn start_hoax_1(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([16, 133, 84, 242], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x3bf82db1) function"]
        pub fn start_hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 248, 45, 177], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x6f597075) function"]
        pub fn start_hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([111, 89, 112, 117], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0xd06d8229) function"]
        pub fn start_hoax_4(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 109, 130, 41], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tip` (0xd82555f1) function"]
        pub fn tip(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 37, 85, 241], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `WARNING_Deprecated` event"]
        pub fn warning_deprecated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, WarningDeprecatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, OracleFixtureEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for OracleFixture<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "WARNING_Deprecated", abi = "WARNING_Deprecated(string)")]
    pub struct WarningDeprecatedFilter {
        pub msg: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum OracleFixtureEvents {
        WarningDeprecatedFilter(WarningDeprecatedFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for OracleFixtureEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = WarningDeprecatedFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::WarningDeprecatedFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(OracleFixtureEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for OracleFixtureEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                OracleFixtureEvents::WarningDeprecatedFilter(element) => element.fmt(f),
                OracleFixtureEvents::LogFilter(element) => element.fmt(f),
                OracleFixtureEvents::LogAddressFilter(element) => element.fmt(f),
                OracleFixtureEvents::LogBytesFilter(element) => element.fmt(f),
                OracleFixtureEvents::LogBytes32Filter(element) => element.fmt(f),
                OracleFixtureEvents::LogIntFilter(element) => element.fmt(f),
                OracleFixtureEvents::LogNamedAddressFilter(element) => element.fmt(f),
                OracleFixtureEvents::LogNamedBytesFilter(element) => element.fmt(f),
                OracleFixtureEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                OracleFixtureEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                OracleFixtureEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                OracleFixtureEvents::LogNamedIntFilter(element) => element.fmt(f),
                OracleFixtureEvents::LogNamedStringFilter(element) => element.fmt(f),
                OracleFixtureEvents::LogNamedUintFilter(element) => element.fmt(f),
                OracleFixtureEvents::LogStringFilter(element) => element.fmt(f),
                OracleFixtureEvents::LogUintFilter(element) => element.fmt(f),
                OracleFixtureEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST`function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `bound`function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bound", abi = "bound(uint256,uint256,uint256)")]
    pub struct BoundCall {
        pub x: ethers::core::types::U256,
        pub min: ethers::core::types::U256,
        pub max: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256)` and selector `[107, 206, 152, 155]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256)")]
    pub struct DealWithTokenCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256,bool)` and selector `[151, 117, 74, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256,bool)")]
    pub struct DealWithTokenAndAdjustCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
        pub adjust: bool,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,uint256)` and selector `[200, 138, 94, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,uint256)")]
    pub struct DealCall {
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string,bytes)")]
    pub struct DeployCodeWithArgsCall {
        pub what: String,
        pub args: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string)")]
    pub struct DeployCodeCall {
        pub what: String,
    }
    #[doc = "Container type for all input parameters for the `failed`function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address)` and selector `[35, 50, 64, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address)")]
    pub struct Hoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address)` and selector `[41, 169, 227, 0]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address)")]
    pub struct Hoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address,uint256)` and selector `[175, 155, 190, 95]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address,uint256)")]
    pub struct Hoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,uint256)` and selector `[233, 167, 154, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,uint256)")]
    pub struct Hoax4Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `rewind`function with signature `rewind(uint256)` and selector `[45, 108, 23, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewind", abi = "rewind(uint256)")]
    pub struct RewindCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setUp`function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `skip`function with signature `skip(uint256)` and selector `[185, 192, 113, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "skip", abi = "skip(uint256)")]
    pub struct SkipCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,uint256)` and selector `[16, 133, 84, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,uint256)")]
    pub struct StartHoax1Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address,uint256)` and selector `[59, 248, 45, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address,uint256)")]
    pub struct StartHoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address)` and selector `[111, 89, 112, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address)")]
    pub struct StartHoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address)` and selector `[208, 109, 130, 41]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address)")]
    pub struct StartHoax4Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `tip`function with signature `tip(address,address,uint256)` and selector `[216, 37, 85, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tip", abi = "tip(address,address,uint256)")]
    pub struct TipCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `vm`function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum OracleFixtureCalls {
        IsTest(IsTestCall),
        Bound(BoundCall),
        DealWithToken(DealWithTokenCall),
        DealWithTokenAndAdjust(DealWithTokenAndAdjustCall),
        Deal(DealCall),
        DeployCodeWithArgs(DeployCodeWithArgsCall),
        DeployCode(DeployCodeCall),
        Failed(FailedCall),
        Hoax0(Hoax0Call),
        Hoax2(Hoax2Call),
        Hoax3(Hoax3Call),
        Hoax4(Hoax4Call),
        Rewind(RewindCall),
        SetUp(SetUpCall),
        Skip(SkipCall),
        StartHoax1(StartHoax1Call),
        StartHoax2(StartHoax2Call),
        StartHoax0(StartHoax0Call),
        StartHoax4(StartHoax4Call),
        Tip(TipCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for OracleFixtureCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <BoundCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::Bound(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::DealWithToken(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenAndAdjustCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::DealWithTokenAndAdjust(decoded));
            }
            if let Ok(decoded) = <DealCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(OracleFixtureCalls::Deal(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeWithArgsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::DeployCodeWithArgs(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::DeployCode(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::Failed(decoded));
            }
            if let Ok(decoded) = <Hoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::Hoax0(decoded));
            }
            if let Ok(decoded) = <Hoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::Hoax2(decoded));
            }
            if let Ok(decoded) = <Hoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::Hoax3(decoded));
            }
            if let Ok(decoded) = <Hoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::Hoax4(decoded));
            }
            if let Ok(decoded) = <RewindCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::Rewind(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::SetUp(decoded));
            }
            if let Ok(decoded) = <SkipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(OracleFixtureCalls::Skip(decoded));
            }
            if let Ok(decoded) =
                <StartHoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::StartHoax1(decoded));
            }
            if let Ok(decoded) =
                <StartHoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::StartHoax2(decoded));
            }
            if let Ok(decoded) =
                <StartHoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::StartHoax0(decoded));
            }
            if let Ok(decoded) =
                <StartHoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(OracleFixtureCalls::StartHoax4(decoded));
            }
            if let Ok(decoded) = <TipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(OracleFixtureCalls::Tip(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(OracleFixtureCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for OracleFixtureCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                OracleFixtureCalls::IsTest(element) => element.encode(),
                OracleFixtureCalls::Bound(element) => element.encode(),
                OracleFixtureCalls::DealWithToken(element) => element.encode(),
                OracleFixtureCalls::DealWithTokenAndAdjust(element) => element.encode(),
                OracleFixtureCalls::Deal(element) => element.encode(),
                OracleFixtureCalls::DeployCodeWithArgs(element) => element.encode(),
                OracleFixtureCalls::DeployCode(element) => element.encode(),
                OracleFixtureCalls::Failed(element) => element.encode(),
                OracleFixtureCalls::Hoax0(element) => element.encode(),
                OracleFixtureCalls::Hoax2(element) => element.encode(),
                OracleFixtureCalls::Hoax3(element) => element.encode(),
                OracleFixtureCalls::Hoax4(element) => element.encode(),
                OracleFixtureCalls::Rewind(element) => element.encode(),
                OracleFixtureCalls::SetUp(element) => element.encode(),
                OracleFixtureCalls::Skip(element) => element.encode(),
                OracleFixtureCalls::StartHoax1(element) => element.encode(),
                OracleFixtureCalls::StartHoax2(element) => element.encode(),
                OracleFixtureCalls::StartHoax0(element) => element.encode(),
                OracleFixtureCalls::StartHoax4(element) => element.encode(),
                OracleFixtureCalls::Tip(element) => element.encode(),
                OracleFixtureCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for OracleFixtureCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                OracleFixtureCalls::IsTest(element) => element.fmt(f),
                OracleFixtureCalls::Bound(element) => element.fmt(f),
                OracleFixtureCalls::DealWithToken(element) => element.fmt(f),
                OracleFixtureCalls::DealWithTokenAndAdjust(element) => element.fmt(f),
                OracleFixtureCalls::Deal(element) => element.fmt(f),
                OracleFixtureCalls::DeployCodeWithArgs(element) => element.fmt(f),
                OracleFixtureCalls::DeployCode(element) => element.fmt(f),
                OracleFixtureCalls::Failed(element) => element.fmt(f),
                OracleFixtureCalls::Hoax0(element) => element.fmt(f),
                OracleFixtureCalls::Hoax2(element) => element.fmt(f),
                OracleFixtureCalls::Hoax3(element) => element.fmt(f),
                OracleFixtureCalls::Hoax4(element) => element.fmt(f),
                OracleFixtureCalls::Rewind(element) => element.fmt(f),
                OracleFixtureCalls::SetUp(element) => element.fmt(f),
                OracleFixtureCalls::Skip(element) => element.fmt(f),
                OracleFixtureCalls::StartHoax1(element) => element.fmt(f),
                OracleFixtureCalls::StartHoax2(element) => element.fmt(f),
                OracleFixtureCalls::StartHoax0(element) => element.fmt(f),
                OracleFixtureCalls::StartHoax4(element) => element.fmt(f),
                OracleFixtureCalls::Tip(element) => element.fmt(f),
                OracleFixtureCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for OracleFixtureCalls {
        fn from(var: IsTestCall) -> Self {
            OracleFixtureCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<BoundCall> for OracleFixtureCalls {
        fn from(var: BoundCall) -> Self {
            OracleFixtureCalls::Bound(var)
        }
    }
    impl ::std::convert::From<DealWithTokenCall> for OracleFixtureCalls {
        fn from(var: DealWithTokenCall) -> Self {
            OracleFixtureCalls::DealWithToken(var)
        }
    }
    impl ::std::convert::From<DealWithTokenAndAdjustCall> for OracleFixtureCalls {
        fn from(var: DealWithTokenAndAdjustCall) -> Self {
            OracleFixtureCalls::DealWithTokenAndAdjust(var)
        }
    }
    impl ::std::convert::From<DealCall> for OracleFixtureCalls {
        fn from(var: DealCall) -> Self {
            OracleFixtureCalls::Deal(var)
        }
    }
    impl ::std::convert::From<DeployCodeWithArgsCall> for OracleFixtureCalls {
        fn from(var: DeployCodeWithArgsCall) -> Self {
            OracleFixtureCalls::DeployCodeWithArgs(var)
        }
    }
    impl ::std::convert::From<DeployCodeCall> for OracleFixtureCalls {
        fn from(var: DeployCodeCall) -> Self {
            OracleFixtureCalls::DeployCode(var)
        }
    }
    impl ::std::convert::From<FailedCall> for OracleFixtureCalls {
        fn from(var: FailedCall) -> Self {
            OracleFixtureCalls::Failed(var)
        }
    }
    impl ::std::convert::From<Hoax0Call> for OracleFixtureCalls {
        fn from(var: Hoax0Call) -> Self {
            OracleFixtureCalls::Hoax0(var)
        }
    }
    impl ::std::convert::From<Hoax2Call> for OracleFixtureCalls {
        fn from(var: Hoax2Call) -> Self {
            OracleFixtureCalls::Hoax2(var)
        }
    }
    impl ::std::convert::From<Hoax3Call> for OracleFixtureCalls {
        fn from(var: Hoax3Call) -> Self {
            OracleFixtureCalls::Hoax3(var)
        }
    }
    impl ::std::convert::From<Hoax4Call> for OracleFixtureCalls {
        fn from(var: Hoax4Call) -> Self {
            OracleFixtureCalls::Hoax4(var)
        }
    }
    impl ::std::convert::From<RewindCall> for OracleFixtureCalls {
        fn from(var: RewindCall) -> Self {
            OracleFixtureCalls::Rewind(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for OracleFixtureCalls {
        fn from(var: SetUpCall) -> Self {
            OracleFixtureCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<SkipCall> for OracleFixtureCalls {
        fn from(var: SkipCall) -> Self {
            OracleFixtureCalls::Skip(var)
        }
    }
    impl ::std::convert::From<StartHoax1Call> for OracleFixtureCalls {
        fn from(var: StartHoax1Call) -> Self {
            OracleFixtureCalls::StartHoax1(var)
        }
    }
    impl ::std::convert::From<StartHoax2Call> for OracleFixtureCalls {
        fn from(var: StartHoax2Call) -> Self {
            OracleFixtureCalls::StartHoax2(var)
        }
    }
    impl ::std::convert::From<StartHoax0Call> for OracleFixtureCalls {
        fn from(var: StartHoax0Call) -> Self {
            OracleFixtureCalls::StartHoax0(var)
        }
    }
    impl ::std::convert::From<StartHoax4Call> for OracleFixtureCalls {
        fn from(var: StartHoax4Call) -> Self {
            OracleFixtureCalls::StartHoax4(var)
        }
    }
    impl ::std::convert::From<TipCall> for OracleFixtureCalls {
        fn from(var: TipCall) -> Self {
            OracleFixtureCalls::Tip(var)
        }
    }
    impl ::std::convert::From<VmCall> for OracleFixtureCalls {
        fn from(var: VmCall) -> Self {
            OracleFixtureCalls::Vm(var)
        }
    }
}
