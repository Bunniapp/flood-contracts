pub use deployscript_mod::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod deployscript_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "DeployScript was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static DEPLOYSCRIPT_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"run\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static DEPLOYSCRIPT_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060405234801561001057600080fd5b50612a0a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633a7684631461003b578063c040622614610072575b600080fd5b610056737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b03909116815260200160405180910390f35b61007a61007c565b005b60408051637fb5297f60e01b815290516101f491737109709ecfa91a80626ff3989d68f67f5b1dd12d91637fb5297f9160048082019260009290919082900301818387803b1580156100cd57600080fd5b505af11580156100e1573d6000803e3d6000fd5b5050505060006040516100f3906101ba565b604051809103906000f08015801561010f573d6000803e3d6000fd5b5090508181604051610120906101c7565b9182526001600160a01b03166020820152604001604051809103906000f080158015610150573d6000803e3d6000fd5b505060408051633b756e9b60e11b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d916376eadd3691600480830192600092919082900301818387803b15801561019e57600080fd5b505af11580156101b2573d6000803e3d6000fd5b505050505050565b610de7806101d583390190565b611a1980610fbc8339019056fe608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350601960049081553360009081526003602052604090819020805460ff19166001179055905490517fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e031996951916100a89190815260200190565b60405180910390a1610d28806100bf6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638945bd281161008c578063af5899fc11610066578063af5899fc14610202578063c70a900f14610215578063daf9c21014610248578063fc361c381461026b57600080fd5b80638945bd28146101515780638da5cb5b146101645780639d8669851461018f57600080fd5b806307de99f6146100d45780630ffb1d8b146100fa57806313af40351461010f578063329e53be14610122578063391fe4e21461013557806384bfabcf1461013e575b600080fd5b6100e76100e2366004610ad9565b61027e565b6040519081526020015b60405180910390f35b61010d610108366004610b1e565b61028f565b005b61010d61011d366004610b51565b610322565b61010d610130366004610b1e565b610397565b6100e760045481565b6100e761014c366004610b73565b610419565b61010d61015f366004610ad9565b61043e565b600054610177906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b6101ef61019d366004610ad9565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b0395861695938416949390921692909160ff8082169161010090041687565b6040516100f19796959493929190610bd4565b61010d610210366004610b73565b6104a3565b610238610223366004610b51565b60036020526000908152604090205460ff1681565b60405190151581526020016100f1565b610238610256366004610b51565b60026020526000908152604090205460ff1681565b61010d610279366004610c3a565b6106fe565b600061028982610962565b92915050565b6000546001600160a01b031633146102c25760405162461bcd60e51b81526004016102b990610c5d565b60405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d9291015b60405180910390a25050565b6000546001600160a01b0316331461034c5760405162461bcd60e51b81526004016102b990610c5d565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103c15760405162461bcd60e51b81526004016102b990610c5d565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f8cc72bec7e2cf5979aefd933f40a28eb590098d522a5c458e497e71c5e6fa90f9101610316565b60008061042583610962565b9050610434868686868561097e565b9695505050505050565b6000546001600160a01b031633146104685760405162461bcd60e51b81526004016102b990610c5d565b60048190556040518181527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a150565b6001600160a01b03821660009081526002602052604090205460ff166104e75760405163010d7e6160e11b81526001600160a01b03831660048201526024016102b9565b60006104f282610962565b90506000610503868686868661097e565b90506001600082815260016020526040902060050154610100900460ff16600281111561053257610532610bbe565b036105535760405163d5e880e960e01b8152600481018290526024016102b9565b60006040518060e00160405280886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001858152602001848152602001600015158152602001600160028111156105b5576105b5610bbe565b9052600083815260016020818152604092839020845181546001600160a01b03199081166001600160a01b03928316178355928601519382018054841694821694909417909355928401516002808501805490931691909316179055606083015160038301556080830151600483015560a083015160058301805460ff198116921515928317825560c0860151959650869593919261ffff1990911661ff0019909116179061010090849081111561066f5761066f610bbe565b021790555061068c9150506001600160a01b0386168730866109d1565b6106a16001600160a01b0386163330876109d1565b604080516001600160a01b038781168252602082018790529181018590528188169189169084907fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699060600160405180910390a450505050505050565b3360009081526003602052604090205460ff1661072e576040516314e9dd3960e31b815260040160405180910390fd5b6000828152600160208181526040808420815160e08101835281546001600160a01b03908116825294820154851693810193909352600280820154909416918301919091526003810154606083015260048101546080830152600581015460ff808216151560a08501529293919260c085019261010090920416908111156107b8576107b8610bbe565b60028111156107c9576107c9610bbe565b905250905060028160c0015160028111156107e6576107e6610bbe565b036108075760405163b677167760e01b8152600481018490526024016102b9565b81156108415780516060820151608083015161083c929161082791610c99565b60408401516001600160a01b03169190610a5b565b61085d565b61085d8160200151826060015183608001516108279190610c99565b600260c0820181815283151560a08401908152600086815260016020818152604092839020875181546001600160a01b039182166001600160a01b0319918216178355928901519382018054948216948416949094179093559287015183870180549190931691161790556060850151600382015560808501516004820155905160058201805491151560ff198316811782559351869593949093919261ff001990911661ffff19909116179061010090849081111561091f5761091f610bbe565b02179055505060405183151581528491507fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a2505050565b60006064600454836109749190610cb1565b6102899190610cd0565b604080516001600160a01b0396871660208083019190915295871681830152939095166060840152608083019190915260a0808301919091528351808303909101815260c0909101909252815191012090565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610a545760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016102b9565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610ad35760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016102b9565b50505050565b600060208284031215610aeb57600080fd5b5035919050565b80356001600160a01b0381168114610b0957600080fd5b919050565b80358015158114610b0957600080fd5b60008060408385031215610b3157600080fd5b610b3a83610af2565b9150610b4860208401610b0e565b90509250929050565b600060208284031215610b6357600080fd5b610b6c82610af2565b9392505050565b60008060008060808587031215610b8957600080fd5b610b9285610af2565b9350610ba060208601610af2565b9250610bae60408601610af2565b9396929550929360600135925050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905282151560a082015260e0810160038310610c2857634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b60008060408385031215610c4d57600080fd5b82359150610b4860208401610b0e565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610cac57610cac610c83565b500190565b6000816000190483118215151615610ccb57610ccb610c83565b500290565b600082610ced57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220114d788f98f9b1197a197c0dc59e264b32d6e90418bcef5841446cc4765195dd64736f6c634300080f003360a060405260018055600280546001600160801b031916905534801561002457600080fd5b50604051611a19380380611a1983398101604081905261004391610120565b600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506001600160a01b03811660805260038290556040518281527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd76159060200160405180910390a1600480546001600160801b0319166703782dace9d900009081179091556040519081527f248707dbfdce07115740191c2a4ec04702f5d55967ca82b9dc65c55801531f7f9060200160405180910390a1505061015d565b6000806040838503121561013357600080fd5b825160208401519092506001600160a01b038116811461015257600080fd5b809150509250929050565b60805161188c61018d600039600081816101c801528181610b8801528181610c520152610cab015261188c6000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063d70e3dfd11610071578063d70e3dfd14610299578063d8642295146102c2578063daf9c210146102d5578063fbc534ef14610308578063fc711c3a1461031b57600080fd5b80638da5cb5b146102155780639170c05b146102285780639362776f1461023b5780639501325f1461024e578063cd805d5e1461026e57600080fd5b80632613f307116100f45780632613f3071461018a578063436146791461019d5780636f1335b9146101b05780637dc0d1d0146101c357806382b2ec3e1461020257600080fd5b80630b20b7bc146101265780630ff0c00e146101595780630ffb1d8b1461016257806313af403514610177575b600080fd5b610146610134366004611436565b60086020526000908152604090205481565b6040519081526020015b60405180910390f35b61014660035481565b61017561017036600461146b565b61032e565b005b6101756101853660046114a7565b6103c0565b610175610198366004611436565b610435565b6101756101ab3660046114e0565b61049b565b6101756101be366004611546565b6105fe565b6101ea7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610150565b610175610210366004611561565b6106b0565b6000546101ea906001600160a01b031681565b6101756102363660046115d2565b610747565b61017561024936600461166b565b610932565b61014661025c366004611436565b60066020526000908152604090205481565b600254610281906001600160801b031681565b6040516001600160801b039091168152602001610150565b6101ea6102a7366004611436565b6007602052600090815260409020546001600160a01b031681565b6101756102d03660046116d3565b6109e9565b6102f86102e33660046114a7565b60056020526000908152604090205460ff1681565b6040519015158152602001610150565b6101756103163660046114e0565b610a60565b600454610281906001600160801b031681565b6000546001600160a01b031633146103615760405162461bcd60e51b815260040161035890611796565b60405180910390fd5b6001600160a01b038216600081815260056020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d92910160405180910390a25050565b6000546001600160a01b031633146103ea5760405162461bcd60e51b815260040161035890611796565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b0316331461045f5760405162461bcd60e51b815260040161035890611796565b60038190556040518181527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd7615906020015b60405180910390a150565b60006104ab878787878787610d18565b600081815260066020526040812054919250036104de5760405163cc4f06a160e01b815260048101829052602401610358565b6003546000828152600660205260409020546104fa90436117d2565b10156105455760008181526006602052604081205461051990436117d2565b60035461052691906117d2565b9050806040516325797e0360e11b815260040161035891815260200190565b600081815260086020818152604080842080546007845282862080546006865293872087905580546001600160a01b031916905593909252929055906001600160a01b039081169061059a9089168684610d7c565b6105ae6001600160a01b038a168289610d7c565b8183826001600160a01b03167ff74daea4b4b80ee368b87f2feb712805f4ef30acd087e35c5d16df8736c2d6f2896040516105eb91815260200190565b60405180910390a4505050505050505050565b6000546001600160a01b031633146106285760405162461bcd60e51b815260040161035890611796565b670de0b6b3a7640000816001600160801b03161061065957604051636a143fdd60e11b815260040160405180910390fd5b600480546fffffffffffffffffffffffffffffffff19166001600160801b0383169081179091556040519081527f248707dbfdce07115740191c2a4ec04702f5d55967ca82b9dc65c55801531f7f90602001610490565b60006106c0888888888888610d18565b600081815260066020526040902054909150156106f3576040516304daa62560e21b815260048101829052602401610358565b6106fe878284610dfa565b60408051868152602081018490524391839133917f9e2cd6515276369145ad3c2ee5eb7c8f09ca9c99e8e7d6e68de40895a72f3464910160405180910390a45050505050505050565b6001600160a01b03851660009081526005602052604090205460ff1661078b5760405163f602627d60e01b81526001600160a01b0386166004820152602401610358565b6001600160a01b03841660009081526005602052604090205460ff166107cf5760405163f602627d60e01b81526001600160a01b0385166004820152602401610358565b836001600160a01b0316856001600160a01b03160361080157604051631d2792fb60e31b815260040160405180910390fd5b6004546001600160801b0316821115610830576040516305bf279d60e41b815260048101839052602401610358565b826000036108515760405163abc5ee6f60e01b815260040160405180910390fd5b6001600160a01b03811661087857604051631feef77d60e01b815260040160405180910390fd5b61088d6001600160a01b038616333086610e4e565b60025460408051858152602081018590526001600160a01b038481168284015291516001600160801b0390931692878316928916917f7361c265d28ece9d5df249995186533440e0b7a1310ae54d496fa1783056e3da919081900360600190a4600280546001600160801b0316906000610906836117e9565b91906101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6004546001600160801b0316831115610961576040516305bf279d60e41b815260048101849052602401610358565b60008481526006602052604090205415610991576040516304daa62560e21b815260048101859052602401610358565b61099e8585858585610ed8565b83856001600160a01b03167f2932e14c54a9749927aed2cd6d014eb7cd6a224f5fe6dfb944d9ced9b04c4f47856040516109da91815260200190565b60405180910390a35050505050565b60006109f98c8c8c8c8c8c610d18565b9050610a088582868686610ed8565b610a138b8288610dfa565b60408051858152602081018890524391839133917f9e2cd6515276369145ad3c2ee5eb7c8f09ca9c99e8e7d6e68de40895a72f3464910160405180910390a4505050505050505050505050565b600154600114610a9f5760405162461bcd60e51b815260206004820152600a6024820152695245454e5452414e435960b01b6044820152606401610358565b60026001556000610ab4878787878787610d18565b600081815260066020526040812054919250819003610ae95760405163cc4f06a160e01b815260048101839052602401610358565b600354610af682436117d2565b10610b1457604051632c02744560e11b815260040160405180910390fd5b600082815260086020818152604080842080546007845282862080546006865284882088905581546001600160a01b03191690915594909352849055516384bfabcf60e01b81526001600160a01b03928316600482018190523360248301528b8416604483015260648201839052919391927f000000000000000000000000000000000000000000000000000000000000000016906384bfabcf90608401602060405180830381865afa158015610bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf3919061180f565b90508085836001600160a01b03167f4c186453d95c0773fbc07552af2dfc2204868070daf519de8996684a6c957a86868c604051610c3b929190918252602082015260400190565b60405180910390a4610c776001600160a01b038b167f00000000000000000000000000000000000000000000000000000000000000008561104e565b604051632bd6267f60e21b81526001600160a01b0383811660048301523360248301528b81166044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063af5899fc90608401600060405180830381600087803b158015610cef57600080fd5b505af1158015610d03573d6000803e3d6000fd5b50506001805550505050505050505050505050565b604080516001600160a01b039788166020808301919091529688168183015260608101959095526080850193909352941660a08301526001600160801b0390931660c0808301919091528351808303909101815260e0909101909252815191012090565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610df45760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610358565b50505050565b60008281526006602090815260408083204390556007825280832080546001600160a01b031916339081179091556008909252909120829055610e49906001600160a01b038516903084610e4e565b505050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610ed15760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610358565b5050505050565b6004546001600160801b0316831115610f07576040516305bf279d60e41b815260048101849052602401610358565b60008481526006602052604090205415610f37576040516304daa62560e21b815260048101859052602401610358565b604080517f0efb9dda140a951df4393d44ca40349032d31811466afd20eacd4b4136c3f4986020808301919091528183018790526060808301879052835180840390910181526080830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a084015260bc8084018290528451808503909101815260dc909301909352815191012060006110108286868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110c592505050565b9050876001600160a01b0316816001600160a01b031614611044576040516324a0dbd760e21b815260040160405180910390fd5b5050505050505050565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610df45760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b6044820152606401610358565b60008060006110d485856110e9565b915091506110e181611157565b509392505050565b600080825160410361111f5760208301516040840151606085015160001a61111387828585611310565b94509450505050611150565b8251604003611148576020830151604084015161113d8683836113fd565b935093505050611150565b506000905060025b9250929050565b600081600481111561116b5761116b611828565b036111735750565b600181600481111561118757611187611828565b036111d45760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610358565b60028160048111156111e8576111e8611828565b036112355760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610358565b600381600481111561124957611249611828565b036112a15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610358565b60048160048111156112b5576112b5611828565b0361130d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610358565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561134757506000905060036113f4565b8460ff16601b1415801561135f57508460ff16601c14155b1561137057506000905060046113f4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156113c4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113ed576000600192509250506113f4565b9150600090505b94509492505050565b6000806001600160ff1b0383168161141a60ff86901c601b61183e565b905061142887828885611310565b935093505050935093915050565b60006020828403121561144857600080fd5b5035919050565b80356001600160a01b038116811461146657600080fd5b919050565b6000806040838503121561147e57600080fd5b6114878361144f565b91506020830135801515811461149c57600080fd5b809150509250929050565b6000602082840312156114b957600080fd5b6114c28261144f565b9392505050565b80356001600160801b038116811461146657600080fd5b60008060008060008060c087890312156114f957600080fd5b6115028761144f565b95506115106020880161144f565b9450604087013593506060870135925061152c6080880161144f565b915061153a60a088016114c9565b90509295509295509295565b60006020828403121561155857600080fd5b6114c2826114c9565b600080600080600080600060e0888a03121561157c57600080fd5b6115858861144f565b96506115936020890161144f565b955060408801359450606088013593506115af6080890161144f565b92506115bd60a089016114c9565b915060c0880135905092959891949750929550565b600080600080600060a086880312156115ea57600080fd5b6115f38661144f565b94506116016020870161144f565b9350604086013592506060860135915061161d6080870161144f565b90509295509295909350565b60008083601f84011261163b57600080fd5b50813567ffffffffffffffff81111561165357600080fd5b60208301915083602082850101111561115057600080fd5b60008060008060006080868803121561168357600080fd5b61168c8661144f565b94506020860135935060408601359250606086013567ffffffffffffffff8111156116b657600080fd5b6116c288828901611629565b969995985093965092949392505050565b60008060008060008060008060008060006101408c8e0312156116f557600080fd5b6116fe8c61144f565b9a5061170c60208d0161144f565b995060408c0135985060608c0135975061172860808d0161144f565b965061173660a08d016114c9565b955060c08c0135945061174b60e08d0161144f565b93506101008c013592506101208c013567ffffffffffffffff81111561177057600080fd5b61177c8e828f01611629565b915080935050809150509295989b509295989b9093969950565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156117e4576117e46117bc565b500390565b60006001600160801b03808316818103611805576118056117bc565b6001019392505050565b60006020828403121561182157600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b60008219821115611851576118516117bc565b50019056fea264697066735822122072c1faf9049e71f629bbf1f4cf6291a17bff27c063aea6cfbed3485fc9317f1564736f6c634300080f0033a26469706673582212209b350a6f46b9e7afae48b7df1a4394ae9a57ba445be318f0cc7887cb335e799164736f6c634300080f0033" . parse () . expect ("invalid bytecode")
        });
    pub struct DeployScript<M>(ethers::contract::Contract<M>);
    impl<M> Clone for DeployScript<M> {
        fn clone(&self) -> Self {
            DeployScript(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for DeployScript<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for DeployScript<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(DeployScript))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> DeployScript<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), DEPLOYSCRIPT_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                DEPLOYSCRIPT_ABI.clone(),
                DEPLOYSCRIPT_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `run` (0xc0406226) function"]
        pub fn run(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([192, 64, 98, 38], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for DeployScript<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `run`function with signature `run()` and selector `[192, 64, 98, 38]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "run", abi = "run()")]
    pub struct RunCall;
    #[doc = "Container type for all input parameters for the `vm`function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum DeployScriptCalls {
        Run(RunCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for DeployScriptCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <RunCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DeployScriptCalls::Run(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DeployScriptCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for DeployScriptCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                DeployScriptCalls::Run(element) => element.encode(),
                DeployScriptCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for DeployScriptCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                DeployScriptCalls::Run(element) => element.fmt(f),
                DeployScriptCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<RunCall> for DeployScriptCalls {
        fn from(var: RunCall) -> Self {
            DeployScriptCalls::Run(var)
        }
    }
    impl ::std::convert::From<VmCall> for DeployScriptCalls {
        fn from(var: VmCall) -> Self {
            DeployScriptCalls::Vm(var)
        }
    }
}
