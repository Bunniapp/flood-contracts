pub use settlementtest_mod::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod settlementtest_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "SettlementTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static SETTLEMENTTEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newMaxFeePct\",\"type\":\"uint128\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MaxFeePctChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSafeBlockThreshold\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"SafeBlockThresholdChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"disputeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeDisputed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeFilled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeRequested\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"newFeePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"UpdatedFeeForTrade\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"WARNING_Deprecated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"adjust\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rewind\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"skip\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotSettleBeforeThreshold\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotSettleIfNotFilled\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testSettlement\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tip\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static SETTLEMENTTEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060408190526000805460ff191660011790556001625e79b760e01b031990527f81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a608452737109709ecfa91a80626ff3989d68f67f5b1dd12d63ffa1864960a46020604051808303816000875af115801562000080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a69190620005e3565b600880546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b66004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156200013b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001619190620005e3565b600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f9791f723bf26b668c8cac0664b66d058cdb2a424cfb08c05dd9da570be0eff6f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015620001f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021c9190620005e3565b600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002bb73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506006604051602001620002a591906200060e565b60408051601f198184030181529190526200040c565b600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200038c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506012604051602001620002a591906060808252600d908201526c2bb930b83832b21022ba3432b960991b608082015260a060208201819052600490820152630ae8aa8960e31b60c082015260ff91909116604082015260e00190565b600c80546001600160a01b039283166001600160a01b031991821681179092556064600f55601080548216909217909155600b54601180548316918416919091179055662386f26fc10000601255670de0b6b3a7640000601355600a546014805490921692169190911790553480156200040557600080fd5b50620007eb565b60006001600160a01b0384163b80156200042a5784915050620004a8565b6000620004388585620004af565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000479573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004a391908101906200072e565b509150505b9392505050565b604051638d1cc92560e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc92590620004ed90879060040162000783565b6000604051808303816000875af11580156200050d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200053791908101906200072e565b836040516020016200054b929190620007b8565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620005dc5760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b606482015260840160405180910390fd5b5092915050565b600060208284031215620005f657600080fd5b81516001600160a01b0381168114620004a857600080fd5b606081526000620006336060830160048152635553444360e01b602082015260400190565b8281036020840152620006578160048152635553444360e01b602082015260400190565b91505060ff8316604083015292915050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200069c57818101518382015260200162000682565b83811115620006ac576000848401525b50505050565b60006001600160401b0380841115620006cf57620006cf62000669565b604051601f8501601f19908116603f01168101908282118183101715620006fa57620006fa62000669565b816040528093508581528686860111156200071457600080fd5b620007248660208301876200067f565b5050509392505050565b6000602082840312156200074157600080fd5b81516001600160401b038111156200075857600080fd5b8201601f810184136200076a57600080fd5b6200077b84825160208401620006b2565b949350505050565b6020815260008251806020840152620007a48160408501602087016200067f565b601f01601f19169190910160400192915050565b60008351620007cc8184602088016200067f565b835190830190620007e28183602088016200067f565b01949350505050565b6179f880620007fb6000396000f3fe60806040523480156200001157600080fd5b5060043610620001755760003560e01c806397754ae911620000d3578063c88a5e6d1162000086578063c88a5e6d1462000323578063d06d8229146200033a578063d82555f11462000351578063e1c9fd201462000368578063e9a79a7b1462000372578063fa7626d4146200038957600080fd5b806397754ae914620002a25780639a8325a014620002b9578063ac73b6ce14620002d0578063af9bbe5f14620002da578063b9c071b414620002f1578063ba414fa6146200030857600080fd5b80633a768463116200012c5780633a76846314620002165780633bf82db1146200022d5780634fefe5ee14620002445780635a6c1eed146200024e5780636bce989b14620002745780636f597075146200028b57600080fd5b80630a9254e4146200017a578063108554f21462000186578063233240ee146200019d57806329a9e30014620001b457806329ce9dde14620001cb5780632d6c17a314620001ff575b600080fd5b6200018462000397565b005b620001846200019736600462004751565b6200042f565b62000184620001ae36600462004780565b62000508565b62000184620001c5366004620047a7565b620005e4565b620001e2620001dc366004620048c0565b62000696565b6040516001600160a01b0390911681526020015b60405180910390f35b620001846200021036600462004940565b620007c6565b620001e26000805160206200784483398151915281565b620001846200023e3660046200495a565b62000806565b62000184620008e8565b620002656200025f366004620049a0565b62000ac5565b604051908152602001620001f6565b62000184620002853660046200495a565b62000bfe565b620001846200029c36600462004780565b62000c12565b62000184620002b3366004620049dc565b62000cbc565b620001e2620002ca36600462004a36565b62000efd565b6200018462000fff565b62000184620002eb3660046200495a565b62001797565b620001846200030236600462004940565b62001845565b6200031262001866565b6040519015158152602001620001f6565b620001846200033436600462004751565b62001997565b620001846200034b366004620047a7565b620019cd565b62000184620003623660046200495a565b62001a7f565b6200018462001b30565b620001846200038336600462004751565b62001c72565b600054620003129060ff1681565b620003a162001d18565b601054600854601354620003c3926001600160a01b0390811692169062000bfe565b6010546011546013546012546014546008546000958695620003fe956001600160a01b0392831695918316949093919290811691166200246d565b601580546fffffffffffffffffffffffffffffffff19166001600160801b0393909316929092179091556016555050565b60405163c88a5e6d60e01b8152600080516020620078448339815191529063c88a5e6d9062000465908590859060040162004a77565b600060405180830381600087803b1580156200048057600080fd5b505af115801562000495573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03851660048201526000805160206200784483398151915292506306447d5691506024015b600060405180830381600087803b158015620004eb57600080fd5b505af115801562000500573d6000803e3d6000fd5b505050505050565b60405163c88a5e6d60e01b8152600080516020620078448339815191529063c88a5e6d9062000542908490600160801b9060040162004a77565b600060405180830381600087803b1580156200055d57600080fd5b505af115801562000572573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038416600482015260008051602062007844833981519152925063ca669fa791506024015b600060405180830381600087803b158015620005c857600080fd5b505af1158015620005dd573d6000803e3d6000fd5b5050505050565b60405163c88a5e6d60e01b8152600080516020620078448339815191529063c88a5e6d906200061e908590600160801b9060040162004a77565b600060405180830381600087803b1580156200063957600080fd5b505af11580156200064e573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b038086166004830152841660248201526000805160206200784483398151915292506347e50cce9150604401620004d0565b604051638d1cc92560e01b815260009081906000805160206200784483398151915290638d1cc92590620006cf90879060040162004aed565b6000604051808303816000875af1158015620006ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000719919081019062004b02565b836040516020016200072d92919062004b82565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620007bf5760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b60648201526084015b60405180910390fd5b5092915050565b6000805160206200784483398151915263e5d6bf02620007e7834262004bcb565b6040518263ffffffff1660e01b8152600401620005ad91815260200190565b60405163c88a5e6d60e01b8152600080516020620078448339815191529063c88a5e6d906200083c908690859060040162004a77565b600060405180830381600087803b1580156200085757600080fd5b505af11580156200086c573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b038087166004830152851660248201526000805160206200784483398151915292506345b5607891506044015b600060405180830381600087803b158015620008ca57600080fd5b505af1158015620008df573d6000803e3d6000fd5b50505050505050565b601154600954642e91866680916200090e916001600160a01b0391821691168362000bfe565b60095460405163ca669fa760e01b81526001600160a01b039091166004820152600080516020620078448339815191529063ca669fa790602401600060405180830381600087803b1580156200096357600080fd5b505af115801562000978573d6000803e3d6000fd5b5050601054601154601354601254601454601554620009b997506001600160a01b039586169650938516949293919216906001600160801b0316876200261e565b600f54604051600080516020620078448339815191529163f28dceb3916325797e0360e11b91620009f09160240190815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b909216825262000a379160040162004aed565b600060405180830381600087803b15801562000a5257600080fd5b505af115801562000a67573d6000803e3d6000fd5b5050600e54601054601154601354601254601454601554604051634361467960e01b81526001600160a01b03978816995063436146799850620005ad979687169695861695909216916001600160801b039091169060040162004be5565b60008183111562000b3f5760405162461bcd60e51b815260206004820152603a60248201527f5465737420626f756e642875696e743235362c75696e743235362c75696e743260448201527f3536293a204d6178206973206c657373207468616e206d696e2e0000000000006064820152608401620007b6565b600062000b4d848462004bcb565b90508060000362000b615783915062000ba1565b600019810362000b745784915062000ba1565b62000b7f8162004c28565b9050600062000b8f828762004c44565b905062000b9d818662004c67565b9250505b60408051818152600c818301526b109bdd5b990814995cdd5b1d60a21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1509392505050565b62000c0d838383600062000cbc565b505050565b60405163c88a5e6d60e01b8152600080516020620078448339815191529063c88a5e6d9062000c4c908490600160801b9060040162004a77565b600060405180830381600087803b15801562000c6757600080fd5b505af115801562000c7c573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03841660048201526000805160206200784483398151915292506306447d569150602401620005ad565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009287169162000d129162004c82565b6000604051808303816000865af19150503d806000811462000d51576040519150601f19603f3d011682016040523d82523d6000602084013e62000d56565b606091505b5091505060008180602001905181019062000d72919062004ca0565b905062000de48462000ddd8762000db46370a0823160e01b62000d9760018d620026af565b9060038201805463ffffffff191660e09290921c91909117905590565b90600282018054600181018255600091825260209091206001600160a01b039290921691015590565b90620026d4565b8215620005005760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290516000916001600160a01b0389169162000e2f919062004c82565b6000604051808303816000865af19150503d806000811462000e6e576040519150601f19603f3d011682016040523d82523d6000602084013e62000e73565b606091505b5091505060008180602001905181019062000e8f919062004ca0565b90508286101562000eba5762000ea6868462004bcb565b62000eb2908262004bcb565b905062000ed5565b62000ec6838762004bcb565b62000ed2908262004c67565b90505b62000ef38162000ddd6318160ddd60e01b62000d9760018d620026af565b5050505050505050565b604051638d1cc92560e01b815260009081906000805160206200784483398151915290638d1cc9259062000f3690869060040162004aed565b6000604051808303816000875af115801562000f56573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000f80919081019062004b02565b90508051602082016000f091506001600160a01b03821662000ff95760405162461bcd60e51b815260206004820152602b60248201527f54657374206465706c6f79436f646528737472696e67293a204465706c6f796d60448201526a32b73a103330b4b632b21760a91b6064820152608401620007b6565b50919050565b6009546011546001600160a01b0391821691637735940091620010259116838362000bfe565b60405163ca669fa760e01b81526001600160a01b0383166004820152600080516020620078448339815191529063ca669fa790602401600060405180830381600087803b1580156200107657600080fd5b505af11580156200108b573d6000803e3d6000fd5b5050601054601154601354601254601454601554620010cc97506001600160a01b039586169650938516949293919216906001600160801b0316876200261e565b601654600e54600091620011279162001121919062001105906302c82def60e21b9062000d97906001906001600160a01b0316620026af565b9060028201805460018101825560009182526020909120015590565b620026e4565b90506200114f818360405180606001604052806030815260200162007931603091396200270c565b601654600e546000916200118e91620011889190620011059063d70e3dfd60e01b9062000d97906001906001600160a01b0316620026af565b62002759565b60095460408051606081019091526037808252929350620011c59284926001600160a01b031691906200780d60208301396200277b565b601654600e54600091620011fe916200112191906200110590639501325f60e01b9062000d97906001906001600160a01b0316620026af565b90506200122681436040518060600160405280603b815260200162007864603b91396200270c565b6010546040516370a0823160e01b81526001600160a01b03878116600483015285926000929116906370a0823190602401602060405180830381865afa15801562001275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200129b919062004ca0565b6011546014546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa158015620012ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001314919062004ca0565b90506200139a600e60009054906101000a90046001600160a01b03166001600160a01b0316630ff0c00e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200136e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001394919062004ca0565b620027da565b600e546040516381bad6f360e01b8152600160048201819052602482018190526044820181905260648201526001600160a01b03909116608482015260008051602062007844833981519152906381bad6f39060a401600060405180830381600087803b1580156200140b57600080fd5b505af115801562001420573d6000803e3d6000fd5b5050505082601654896001600160a01b03167ff74daea4b4b80ee368b87f2feb712805f4ef30acd087e35c5d16df8736c2d6f26012546040516200146691815260200190565b60405180910390a4600e54601054601154601354601254601454601554604051634361467960e01b81526001600160a01b0397881697634361467997620014cb979082169690821695909490939116916001600160801b039091169060040162004be5565b600060405180830381600087803b158015620014e657600080fd5b505af1158015620014fb573d6000803e3d6000fd5b5050601654600e546000935062001538925062001121919062001105906302c82def60e21b9062000d97906001906001600160a01b0316620026af565b905062001561816000604051806060016040528060228152602001620079a1602291396200270c565b601654600e546000916200159a91620011889190620011059063d70e3dfd60e01b9062000d97906001906001600160a01b0316620026af565b9050620015df8160006040518060400160405280601e81526020017f46696c6c65642062792073686f756c6420626520657175616c20746f203000008152506200277b565b601654600e5460009162001618916200112191906200110590639501325f60e01b9062000d97906001906001600160a01b0316620026af565b9050620016418160006040518060600160405280602481526020016200789f602491396200270c565b6010546040516370a0823160e01b81526001600160a01b038d81166004830152620016e49216906370a0823190602401602060405180830381865afa1580156200168f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016b5919062004ca0565b601354620016c4908862004c67565b60405180606001604052806040815260200162007961604091396200270c565b6011546014546040516370a0823160e01b81526001600160a01b0391821660048201526200178a9291909116906370a0823190602401602060405180830381865afa15801562001738573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200175e919062004ca0565b6200176a8c8762004c67565b6040518060800160405280604e8152602001620078c3604e91396200270c565b5050505050505050505050565b60405163c88a5e6d60e01b8152600080516020620078448339815191529063c88a5e6d90620017cd908690859060040162004a77565b600060405180830381600087803b158015620017e857600080fd5b505af1158015620017fd573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b038087166004830152851660248201526000805160206200784483398151915292506347e50cce9150604401620008af565b6000805160206200784483398151915263e5d6bf02620007e7834262004c67565b60008054610100900460ff1615620018875750600054610100900460ff1690565b6000600080516020620078448339815191523b15620019925760405160009060008051602062007844833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc490620018f49083906519985a5b195960d21b9060200162004a77565b60408051601f198184030181529082905262001914929160200162004cba565b60408051601f1981840301815290829052620019309162004c82565b6000604051808303816000865af19150503d80600081146200196f576040519150601f19603f3d011682016040523d82523d6000602084013e62001974565b606091505b50915050808060200190518101906200198e919062004ced565b9150505b919050565b60405163c88a5e6d60e01b8152600080516020620078448339815191529063c88a5e6d90620004d0908590859060040162004a77565b60405163c88a5e6d60e01b8152600080516020620078448339815191529063c88a5e6d9062001a07908590600160801b9060040162004a77565b600060405180830381600087803b15801562001a2257600080fd5b505af115801562001a37573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b038086166004830152841660248201526000805160206200784483398151915292506345b560789150604401620004d0565b7f42b963ace015abb7c727e77dec115c5f418f4f96d9ec897f85c202793274661a60405162001b05906020808252603b908201527f54686520607469706020737464636865617420686173206265656e206465707260408201527f6563617465642e2055736520606465616c6020696e73746561642e0000000000606082015260800190565b60405180910390a162000c0d8162000ddd8462000db46370a0823160e01b62000d9760018a620026af565b601654604051600080516020620078448339815191529163f28dceb39163cc4f06a160e01b9162001b679160240190815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b909216825262001bae9160040162004aed565b600060405180830381600087803b15801562001bc957600080fd5b505af115801562001bde573d6000803e3d6000fd5b5050600e54601054601154601354601254601454601554604051634361467960e01b81526001600160a01b0397881699506343614679985062001c3c979687169695861695909216916001600160801b039091169060040162004be5565b600060405180830381600087803b15801562001c5757600080fd5b505af115801562001c6c573d6000803e3d6000fd5b50505050565b60405163c88a5e6d60e01b8152600080516020620078448339815191529063c88a5e6d9062001ca8908590859060040162004a77565b600060405180830381600087803b15801562001cc357600080fd5b505af115801562001cd8573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038516600482015260008051602062007844833981519152925063ca669fa79150602401620004d0565b62001d226200281f565b600e54600b54604051630ffb1d8b60e01b81526001600160a01b03918216600482015260016024820152911690630ffb1d8b90604401600060405180830381600087803b15801562001d7357600080fd5b505af115801562001d88573d6000803e3d6000fd5b5050600e54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b15801562001ddd57600080fd5b505af115801562001df2573d6000803e3d6000fd5b5050600b54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152635553444360e01b606482015260008051602062007844833981519152925063c657c7189150608401600060405180830381600087803b15801562001e6a57600080fd5b505af115801562001e7f573d6000803e3d6000fd5b5050600c54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152630ae8aa8960e31b606482015260008051602062007844833981519152925063c657c7189150608401600060405180830381600087803b15801562001ef757600080fd5b505af115801562001f0c573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206200784483398151915292506306447d569150602401600060405180830381600087803b15801562001f6557600080fd5b505af115801562001f7a573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062001fb992909116906000199060040162004a77565b6020604051808303816000875af115801562001fd9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001fff919062004ced565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200203a929116906000199060040162004a77565b6020604051808303816000875af11580156200205a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002080919062004ced565b50604080516390c5013b60e01b8152905160008051602062007844833981519152916390c5013b91600480830192600092919082900301818387803b158015620020c957600080fd5b505af1158015620020de573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206200784483398151915292506306447d569150602401600060405180830381600087803b1580156200213757600080fd5b505af11580156200214c573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200218b92909116906000199060040162004a77565b6020604051808303816000875af1158015620021ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620021d1919062004ced565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200220c929116906000199060040162004a77565b6020604051808303816000875af11580156200222c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002252919062004ced565b50604080516390c5013b60e01b8152905160008051602062007844833981519152916390c5013b91600480830192600092919082900301818387803b1580156200229b57600080fd5b505af1158015620022b0573d6000803e3d6000fd5b5050600a546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206200784483398151915292506306447d569150602401600060405180830381600087803b1580156200230957600080fd5b505af11580156200231e573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200235d92909116906000199060040162004a77565b6020604051808303816000875af11580156200237d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023a3919062004ced565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620023de929116906000199060040162004a77565b6020604051808303816000875af1158015620023fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002424919062004ced565b50604080516390c5013b60e01b8152905160008051602062007844833981519152916390c5013b91600480830192600092919082900301818387803b15801562001c5757600080fd5b6000806000600e60009054906101000a90046001600160a01b03166001600160a01b031663cd805d5e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620024c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620024ec919062004d0d565b905060008989898989866040516020016200250d9695949392919062004be5565b60408051808303601f1901815290829052805160209091012063ca669fa760e01b82526001600160a01b03871660048301529150600080516020620078448339815191529063ca669fa790602401600060405180830381600087803b1580156200257657600080fd5b505af11580156200258b573d6000803e3d6000fd5b5050600e54604051639170c05b60e01b81526001600160a01b038e811660048301528d81166024830152604482018d9052606482018c90528a811660848301529091169250639170c05b915060a401600060405180830381600087803b158015620025f557600080fd5b505af11580156200260a573d6000803e3d6000fd5b50939c929b50919950505050505050505050565b600e54604051634159761f60e11b81526001600160a01b0389811660048301528881166024830152604482018890526064820187905285811660848301526001600160801b03851660a483015260c48201849052909116906382b2ec3e9060e401600060405180830381600087803b1580156200269a57600080fd5b505af11580156200178a573d6000803e3d6000fd5b6005820180546001600160a01b0319166001600160a01b039290921691909117905590565b620026e08282620028ee565b5050565b6000620026f18262002ce9565b80602001905181019062002706919062004ca0565b92915050565b81831462000c0d577f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838160405162002745919062004d38565b60405180910390a162000c0d838362002db1565b6000620027668262002ce9565b80602001905181019062002706919062004d69565b816001600160a01b0316836001600160a01b03161462000c0d577f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381604051620027c6919062004d38565b60405180910390a162000c0d838362002ea8565b6000620027e8824362004c67565b6040516301f7b4f360e41b8152600481018290529091506000805160206200784483398151915290631f7b4f3090602401620004d0565b6200282962002fa2565b600f54600d546040516001600160a01b03909116906200284990620046e1565b9182526001600160a01b03166020820152604001604051809103906000f0801580156200287a573d6000803e3d6000fd5b50600e80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b81526004808201939093526024810191909152604481019190915263426f6f6b60e01b6064820152600080516020620078448339815191529063c657c7189060840162001c3c565b600582015460038301546004840154600285018054604080516020808402820181019092528281526001600160a01b039096169560e09590951b94600093909290918301828280156200296157602002820191906000526020600020905b8154815260200190600101908083116200294c575b50505050509050600083620029768362003534565b6040516020016200298992919062004cba565b60408051601f198184030181528282526001600160a01b038816600090815260018b0160209081528382206001600160e01b03198a168352815292812091945090929091620029dd91869188910162004d89565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff1662002a185762002a1687620035e1565b505b6001600160a01b0385166000908152602088815260408083206001600160e01b031988168452825280832090519091839162002a5991879189910162004d89565b6040516020818303038152906040528051906020012081526020019081526020016000205460001b9050600080876001600160a01b03168460405162002aa0919062004c82565b600060405180830381855afa9150503d806000811462002add576040519150601f19603f3d011682016040523d82523d6000602084013e62002ae2565b606091505b50915062002aff90508162002af988602062004dc5565b62004369565b604051630667f9d760e41b815290925060009150600080516020620078448339815191529063667f9d709062002b3c908b90879060040162004a77565b6020604051808303816000875af115801562002b5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b82919062004ca0565b905080821462002c385760405162461bcd60e51b815260206004820152606e60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526d39b73a1039bab83837b93a32b21760911b60a482015260c401620007b6565b6040516370ca10bb60e01b815260008051602062007844833981519152906370ca10bb9062002c70908b9087908e9060040162004de7565b600060405180830381600087803b15801562002c8b57600080fd5b505af115801562002ca0573d6000803e3d6000fd5b50505060058b0180546001600160a01b03191690555060038a01805463ffffffff1916905562002cd560028b016000620046ef565b896004016000905550505050505050505050565b60058101546060906001600160a01b0316600062002d0784620035e1565b604051630667f9d760e41b8152909150600080516020620078448339815191529063667f9d709062002d40908590859060040162004a77565b6020604051808303816000875af115801562002d60573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002d86919062004ca0565b60405160200162002d9991815260200190565b60405160208183030381529060405292505050919050565b808214620026e0577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405162002e249060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88160405162002e5d919062004e08565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405162002e96919062004e41565b60405180910390a1620026e0620043f3565b806001600160a01b0316826001600160a01b031614620026e0577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405162002f309060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f8160405162002f69919062004e6c565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f8260405162002e96919062004eb1565b62002fac620044f7565b60405162002fba9062004712565b604051809103906000f08015801562002fd7573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b815260048101929092526024820152601060448201526f416c6c4b6e6f77696e674f7261636c6560801b6064820152600080516020620078448339815191529063c657c71890608401600060405180830381600087803b1580156200306757600080fd5b505af11580156200307c573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206200784483398151915292506306447d569150602401600060405180830381600087803b158015620030d557600080fd5b505af1158015620030ea573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200312992909116906000199060040162004a77565b6020604051808303816000875af115801562003149573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200316f919062004ced565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620031aa929116906000199060040162004a77565b6020604051808303816000875af1158015620031ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620031f0919062004ced565b50604080516390c5013b60e01b8152905160008051602062007844833981519152916390c5013b91600480830192600092919082900301818387803b1580156200323957600080fd5b505af11580156200324e573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206200784483398151915292506306447d569150602401600060405180830381600087803b158015620032a757600080fd5b505af1158015620032bc573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620032fb92909116906000199060040162004a77565b6020604051808303816000875af11580156200331b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003341919062004ced565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200337c929116906000199060040162004a77565b6020604051808303816000875af11580156200339c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620033c2919062004ced565b50604080516390c5013b60e01b8152905160008051602062007844833981519152916390c5013b91600480830192600092919082900301818387803b1580156200340b57600080fd5b505af115801562003420573d6000803e3d6000fd5b5050600d54600b54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b1580156200347557600080fd5b505af11580156200348a573d6000803e3d6000fd5b5050600d54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b158015620034df57600080fd5b505af1158015620034f4573d6000803e3d6000fd5b5050600d54600a5460405163194f29df60e11b81526001600160a01b039182166004820152600160248201529116925063329e53be915060440162001c3c565b606060008251602062003548919062004dc5565b67ffffffffffffffff811115620035635762003563620047e5565b6040519080825280601f01601f1916602001820160405280156200358e576020820181803683370190505b50905060005b8351811015620007bf576000848281518110620035b557620035b562004edc565b602002602001015190508082602002602001840152508080620035d89062004c28565b91505062003594565b600581015460038201546004830154600284018054604080516020808402820181019092528281526000966001600160a01b03169560e01b9493879391929091908301828280156200365357602002820191906000526020600020905b8154815260200190600101908083116200363e575b5050506001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a16845282528083209051959650949193506200369f9250859187910162004d89565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16156200373e576001600160a01b0384166000908152602087815260408083206001600160e01b031987168452825280832090519092916200370e91859187910162004d89565b60405160208183030381529060405280519060200120815260200190815260200160002054945050505050919050565b6000836200374c8362003534565b6040516020016200375f92919062004cba565b60405160208183030381529060405290506000805160206200791183398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620037be57600080fd5b505af1158015620037d3573d6000803e3d6000fd5b50505050600080866001600160a01b031683604051620037f4919062004c82565b600060405180830381855afa9150503d806000811462003831576040519150601f19603f3d011682016040523d82523d6000602084013e62003836565b606091505b5091506200384d90508162002af987602062004dc5565b6040516365bc948160e01b81526001600160a01b03891660048201529092506000915060008051602062007844833981519152906365bc9481906024016000604051808303816000875af1158015620038aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620038d4919081019062004f7b565b509050805160010362003c2e5760006000805160206200791183398151915260001c6001600160a01b031663667f9d7089846000815181106200391b576200391b62004edc565b60200260200101516040518363ffffffff1660e01b81526004016200394292919062004a77565b6020604051808303816000875af115801562003962573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003988919062004ca0565b905080620039ec577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a58883600081518110620039c857620039c862004edc565b602002602001015160001c604051620039e392919062004a77565b60405180910390a15b80831462003a9f5760405162461bcd60e51b815260206004820152606d60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526c1cdb9d081cdd5c1c1bdc9d1959609a1b60a482015260c401620007b6565b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8888878960405160200162003ad792919062004d89565b604051602081830303815290604052805190602001208560008151811062003b035762003b0362004edc565b602002602001015160001c60405162003b20949392919062004fdc565b60405180910390a18160008151811062003b3e5762003b3e62004edc565b6020908102919091018101516001600160a01b038a1660009081528c835260408082206001600160e01b03198c168352845280822090519293909262003b89918a918c910162004d89565b60408051601f1981840301815291815281516020928301208352828201939093529082016000908120939093556001600160a01b038b16835260018d810182528284206001600160e01b03198c1685528252828420925190939162003bf3918a918c910162004d89565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff191691151591909117905550620041ec565b6001815111156200417b5760005b8151811015620041745760006000805160206200791183398151915260001c6001600160a01b031663667f9d708a85858151811062003c7f5762003c7f62004edc565b60200260200101516040518363ffffffff1660e01b815260040162003ca692919062004a77565b6020604051808303816000875af115801562003cc6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003cec919062004ca0565b90508062003d4f577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a58984848151811062003d2b5762003d2b62004edc565b602002602001015160001c60405162003d4692919062004a77565b60405180910390a15b6000805160206200791183398151915260001c6001600160a01b03166370ca10bb8a85858151811062003d865762003d8662004edc565b602002602001015161133760f01b6040518463ffffffff1660e01b815260040162003db49392919062004de7565b600060405180830381600087803b15801562003dcf57600080fd5b505af115801562003de4573d6000803e3d6000fd5b50505050600060608a6001600160a01b03168760405162003e06919062004c82565b600060405180830381855afa9150503d806000811462003e43576040519150601f19603f3d011682016040523d82523d6000602084013e62003e48565b606091505b50909250905062003e608162002af98b602062004dc5565b955081801562003e74575061133760f01b86145b15620040c7577f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c60405160200162003eb292919062004d89565b6040516020818303038152906040528051906020012088888151811062003edd5762003edd62004edc565b602002602001015160001c60405162003efa949392919062004fdc565b60405180910390a184848151811062003f175762003f1762004edc565b6020908102919091018101516001600160a01b038d1660009081528f835260408082206001600160e01b03198f168352845280822090519293909262003f62918d918f910162004d89565b6040516020818303038152906040528051906020012081526020019081526020016000208190555060018d60010160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160e01b0319166001600160e01b031916815260200190815260200160002060008a8c60405160200162003fef92919062004d89565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff0219169083151502179055506000805160206200791183398151915260001c6001600160a01b03166370ca10bb8c87878151811062004061576200406162004edc565b6020026020010151866040518463ffffffff1660e01b81526004016200408a9392919062004de7565b600060405180830381600087803b158015620040a557600080fd5b505af1158015620040ba573d6000803e3d6000fd5b5050505050505062004174565b6000805160206200791183398151915260001c6001600160a01b03166370ca10bb8c878781518110620040fe57620040fe62004edc565b6020026020010151866040518463ffffffff1660e01b8152600401620041279392919062004de7565b600060405180830381600087803b1580156200414257600080fd5b505af115801562004157573d6000803e3d6000fd5b5050505050505080806200416b9062004c28565b91505062003c3c565b50620041ec565b6040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e6064820152608401620007b6565b6001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a16845282528083209051909291620042309188918a910162004d89565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620042bf5760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b6064820152608401620007b6565b6005890180546001600160a01b031916905560038901805463ffffffff19169055620042f060028a016000620046ef565b600060048a018190556001600160a01b038816815260208a815260408083206001600160e01b03198a16845282528083209051909291620043369188918a910162004d89565b60405160208183030381529060405280519060200120815260200190815260200160002054975050505050505050919050565b600080600060208551116200438057845162004383565b60205b905060005b81811015620043e9576200439e81600862004dc5565b86620043ab838862004c67565b81518110620043be57620043be62004edc565b01602001516001600160f81b031916901c929092179180620043e08162004c28565b91505062004388565b5090949350505050565b600080516020620078448339815191523b15620044e65760405160009060008051602062007844833981519152907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc490620044619083906519985a5b195960d21b9060019060200162004de7565b60408051601f198184030181529082905262004481929160200162004cba565b60408051601f19818403018152908290526200449d9162004c82565b6000604051808303816000865af19150503d8060008114620044dc576040519150601f19603f3d011682016040523d82523d6000602084013e620044e1565b606091505b505050505b6000805461ff001916610100179055565b600854604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526005604482015264416c69636560d81b6064820152600080516020620078448339815191529063c657c71890608401600060405180830381600087803b1580156200456757600080fd5b505af11580156200457c573d6000803e3d6000fd5b5050600954604080516318caf8e360e31b81526001600160a01b039092166004830152602482015260036044820152622137b160e91b606482015260008051602062007844833981519152925063c657c7189150608401600060405180830381600087803b158015620045ee57600080fd5b505af115801562004603573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526007604482015266436861726c696560c81b606482015260008051602062007844833981519152925063c657c7189150608401600060405180830381600087803b1580156200467957600080fd5b505af11580156200468e573d6000803e3d6000fd5b5050604080516318caf8e360e31b815230600482015260248101919091526003604482015262596f7560e81b606482015260008051602062007844833981519152925063c657c718915060840162001c3c565b611a19806200500d83390190565b50805460008255906000526020600020908101906200470f919062004720565b50565b610de78062006a2683390190565b5b8082111562004737576000815560010162004721565b5090565b6001600160a01b03811681146200470f57600080fd5b600080604083850312156200476557600080fd5b823562004772816200473b565b946020939093013593505050565b6000602082840312156200479357600080fd5b8135620047a0816200473b565b9392505050565b60008060408385031215620047bb57600080fd5b8235620047c8816200473b565b91506020830135620047da816200473b565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715620048275762004827620047e5565b604052919050565b600067ffffffffffffffff8211156200484c576200484c620047e5565b50601f01601f191660200190565b6000620048716200486b846200482f565b620047fb565b90508281528383830111156200488657600080fd5b828260208301376000602084830101529392505050565b600082601f830112620048af57600080fd5b620047a0838335602085016200485a565b60008060408385031215620048d457600080fd5b823567ffffffffffffffff80821115620048ed57600080fd5b620048fb868387016200489d565b935060208501359150808211156200491257600080fd5b508301601f810185136200492557600080fd5b62004936858235602084016200485a565b9150509250929050565b6000602082840312156200495357600080fd5b5035919050565b6000806000606084860312156200497057600080fd5b83356200497d816200473b565b925060208401356200498f816200473b565b929592945050506040919091013590565b600080600060608486031215620049b657600080fd5b505081359360208301359350604090920135919050565b80151581146200470f57600080fd5b60008060008060808587031215620049f357600080fd5b843562004a00816200473b565b9350602085013562004a12816200473b565b925060408501359150606085013562004a2b81620049cd565b939692955090935050565b60006020828403121562004a4957600080fd5b813567ffffffffffffffff81111562004a6157600080fd5b62004a6f848285016200489d565b949350505050565b6001600160a01b03929092168252602082015260400190565b60005b8381101562004aad57818101518382015260200162004a93565b8381111562001c6c5750506000910152565b6000815180845262004ad981602086016020860162004a90565b601f01601f19169290920160200192915050565b602081526000620047a0602083018462004abf565b60006020828403121562004b1557600080fd5b815167ffffffffffffffff81111562004b2d57600080fd5b8201601f8101841362004b3f57600080fd5b805162004b506200486b826200482f565b81815285602083850101111562004b6657600080fd5b62004b7982602083016020860162004a90565b95945050505050565b6000835162004b9681846020880162004a90565b83519083019062004bac81836020880162004a90565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b60008282101562004be05762004be062004bb5565b500390565b6001600160a01b03968716815294861660208601526040850193909352606084019190915290921660808201526001600160801b0390911660a082015260c00190565b60006001820162004c3d5762004c3d62004bb5565b5060010190565b60008262004c6257634e487b7160e01b600052601260045260246000fd5b500690565b6000821982111562004c7d5762004c7d62004bb5565b500190565b6000825162004c9681846020870162004a90565b9190910192915050565b60006020828403121562004cb357600080fd5b5051919050565b6001600160e01b031983168152815160009062004cdf81600485016020870162004a90565b919091016004019392505050565b60006020828403121562004d0057600080fd5b8151620047a081620049cd565b60006020828403121562004d2057600080fd5b81516001600160801b0381168114620047a057600080fd5b60408152600560408201526422b93937b960d91b6060820152608060208201526000620047a0608083018462004abf565b60006020828403121562004d7c57600080fd5b8151620047a0816200473b565b825160009082906020808701845b8381101562004db55781518552938201939082019060010162004d97565b5050948252509092019392505050565b600081600019048311821515161562004de25762004de262004bb5565b500290565b6001600160a01b039390931683526020830191909152604082015260600190565b60408152600062004e3360408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b60408152600062004e3360408301600a815269080808081058dd1d585b60b21b602082015260400190565b60408152600062004e9760408301600a8152690808115e1c1958dd195960b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b60408152600062004e9760408301600a815269080808081058dd1d585b60b21b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b600082601f83011262004f0457600080fd5b8151602067ffffffffffffffff82111562004f235762004f23620047e5565b8160051b62004f34828201620047fb565b928352848101820192828101908785111562004f4f57600080fd5b83870192505b8483101562004f705782518252918301919083019062004f55565b979650505050505050565b6000806040838503121562004f8f57600080fd5b825167ffffffffffffffff8082111562004fa857600080fd5b62004fb68683870162004ef2565b9350602085015191508082111562004fcd57600080fd5b50620049368582860162004ef2565b6001600160a01b039490941684526001600160e01b0319929092166020840152604083015260608201526080019056fe60a060405260018055600280546001600160801b031916905534801561002457600080fd5b50604051611a19380380611a1983398101604081905261004391610120565b600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506001600160a01b03811660805260038290556040518281527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd76159060200160405180910390a1600480546001600160801b0319166703782dace9d900009081179091556040519081527f248707dbfdce07115740191c2a4ec04702f5d55967ca82b9dc65c55801531f7f9060200160405180910390a1505061015d565b6000806040838503121561013357600080fd5b825160208401519092506001600160a01b038116811461015257600080fd5b809150509250929050565b60805161188c61018d600039600081816101c801528181610b8801528181610c520152610cab015261188c6000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063d70e3dfd11610071578063d70e3dfd14610299578063d8642295146102c2578063daf9c210146102d5578063fbc534ef14610308578063fc711c3a1461031b57600080fd5b80638da5cb5b146102155780639170c05b146102285780639362776f1461023b5780639501325f1461024e578063cd805d5e1461026e57600080fd5b80632613f307116100f45780632613f3071461018a578063436146791461019d5780636f1335b9146101b05780637dc0d1d0146101c357806382b2ec3e1461020257600080fd5b80630b20b7bc146101265780630ff0c00e146101595780630ffb1d8b1461016257806313af403514610177575b600080fd5b610146610134366004611436565b60086020526000908152604090205481565b6040519081526020015b60405180910390f35b61014660035481565b61017561017036600461146b565b61032e565b005b6101756101853660046114a7565b6103c0565b610175610198366004611436565b610435565b6101756101ab3660046114e0565b61049b565b6101756101be366004611546565b6105fe565b6101ea7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610150565b610175610210366004611561565b6106b0565b6000546101ea906001600160a01b031681565b6101756102363660046115d2565b610747565b61017561024936600461166b565b610932565b61014661025c366004611436565b60066020526000908152604090205481565b600254610281906001600160801b031681565b6040516001600160801b039091168152602001610150565b6101ea6102a7366004611436565b6007602052600090815260409020546001600160a01b031681565b6101756102d03660046116d3565b6109e9565b6102f86102e33660046114a7565b60056020526000908152604090205460ff1681565b6040519015158152602001610150565b6101756103163660046114e0565b610a60565b600454610281906001600160801b031681565b6000546001600160a01b031633146103615760405162461bcd60e51b815260040161035890611796565b60405180910390fd5b6001600160a01b038216600081815260056020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d92910160405180910390a25050565b6000546001600160a01b031633146103ea5760405162461bcd60e51b815260040161035890611796565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b0316331461045f5760405162461bcd60e51b815260040161035890611796565b60038190556040518181527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd7615906020015b60405180910390a150565b60006104ab878787878787610d18565b600081815260066020526040812054919250036104de5760405163cc4f06a160e01b815260048101829052602401610358565b6003546000828152600660205260409020546104fa90436117d2565b10156105455760008181526006602052604081205461051990436117d2565b60035461052691906117d2565b9050806040516325797e0360e11b815260040161035891815260200190565b600081815260086020818152604080842080546007845282862080546006865293872087905580546001600160a01b031916905593909252929055906001600160a01b039081169061059a9089168684610d7c565b6105ae6001600160a01b038a168289610d7c565b8183826001600160a01b03167ff74daea4b4b80ee368b87f2feb712805f4ef30acd087e35c5d16df8736c2d6f2896040516105eb91815260200190565b60405180910390a4505050505050505050565b6000546001600160a01b031633146106285760405162461bcd60e51b815260040161035890611796565b670de0b6b3a7640000816001600160801b03161061065957604051636a143fdd60e11b815260040160405180910390fd5b600480546fffffffffffffffffffffffffffffffff19166001600160801b0383169081179091556040519081527f248707dbfdce07115740191c2a4ec04702f5d55967ca82b9dc65c55801531f7f90602001610490565b60006106c0888888888888610d18565b600081815260066020526040902054909150156106f3576040516304daa62560e21b815260048101829052602401610358565b6106fe878284610dfa565b60408051868152602081018490524391839133917f9e2cd6515276369145ad3c2ee5eb7c8f09ca9c99e8e7d6e68de40895a72f3464910160405180910390a45050505050505050565b6001600160a01b03851660009081526005602052604090205460ff1661078b5760405163f602627d60e01b81526001600160a01b0386166004820152602401610358565b6001600160a01b03841660009081526005602052604090205460ff166107cf5760405163f602627d60e01b81526001600160a01b0385166004820152602401610358565b836001600160a01b0316856001600160a01b03160361080157604051631d2792fb60e31b815260040160405180910390fd5b6004546001600160801b0316821115610830576040516305bf279d60e41b815260048101839052602401610358565b826000036108515760405163abc5ee6f60e01b815260040160405180910390fd5b6001600160a01b03811661087857604051631feef77d60e01b815260040160405180910390fd5b61088d6001600160a01b038616333086610e4e565b60025460408051858152602081018590526001600160a01b038481168284015291516001600160801b0390931692878316928916917f7361c265d28ece9d5df249995186533440e0b7a1310ae54d496fa1783056e3da919081900360600190a4600280546001600160801b0316906000610906836117e9565b91906101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6004546001600160801b0316831115610961576040516305bf279d60e41b815260048101849052602401610358565b60008481526006602052604090205415610991576040516304daa62560e21b815260048101859052602401610358565b61099e8585858585610ed8565b83856001600160a01b03167f2932e14c54a9749927aed2cd6d014eb7cd6a224f5fe6dfb944d9ced9b04c4f47856040516109da91815260200190565b60405180910390a35050505050565b60006109f98c8c8c8c8c8c610d18565b9050610a088582868686610ed8565b610a138b8288610dfa565b60408051858152602081018890524391839133917f9e2cd6515276369145ad3c2ee5eb7c8f09ca9c99e8e7d6e68de40895a72f3464910160405180910390a4505050505050505050505050565b600154600114610a9f5760405162461bcd60e51b815260206004820152600a6024820152695245454e5452414e435960b01b6044820152606401610358565b60026001556000610ab4878787878787610d18565b600081815260066020526040812054919250819003610ae95760405163cc4f06a160e01b815260048101839052602401610358565b600354610af682436117d2565b10610b1457604051632c02744560e11b815260040160405180910390fd5b600082815260086020818152604080842080546007845282862080546006865284882088905581546001600160a01b03191690915594909352849055516384bfabcf60e01b81526001600160a01b03928316600482018190523360248301528b8416604483015260648201839052919391927f000000000000000000000000000000000000000000000000000000000000000016906384bfabcf90608401602060405180830381865afa158015610bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf3919061180f565b90508085836001600160a01b03167f4c186453d95c0773fbc07552af2dfc2204868070daf519de8996684a6c957a86868c604051610c3b929190918252602082015260400190565b60405180910390a4610c776001600160a01b038b167f00000000000000000000000000000000000000000000000000000000000000008561104e565b604051632bd6267f60e21b81526001600160a01b0383811660048301523360248301528b81166044830152606482018590527f0000000000000000000000000000000000000000000000000000000000000000169063af5899fc90608401600060405180830381600087803b158015610cef57600080fd5b505af1158015610d03573d6000803e3d6000fd5b50506001805550505050505050505050505050565b604080516001600160a01b039788166020808301919091529688168183015260608101959095526080850193909352941660a08301526001600160801b0390931660c0808301919091528351808303909101815260e0909101909252815191012090565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610df45760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610358565b50505050565b60008281526006602090815260408083204390556007825280832080546001600160a01b031916339081179091556008909252909120829055610e49906001600160a01b038516903084610e4e565b505050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610ed15760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610358565b5050505050565b6004546001600160801b0316831115610f07576040516305bf279d60e41b815260048101849052602401610358565b60008481526006602052604090205415610f37576040516304daa62560e21b815260048101859052602401610358565b604080517f0efb9dda140a951df4393d44ca40349032d31811466afd20eacd4b4136c3f4986020808301919091528183018790526060808301879052835180840390910181526080830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a084015260bc8084018290528451808503909101815260dc909301909352815191012060006110108286868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110c592505050565b9050876001600160a01b0316816001600160a01b031614611044576040516324a0dbd760e21b815260040160405180910390fd5b5050505050505050565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610df45760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b6044820152606401610358565b60008060006110d485856110e9565b915091506110e181611157565b509392505050565b600080825160410361111f5760208301516040840151606085015160001a61111387828585611310565b94509450505050611150565b8251604003611148576020830151604084015161113d8683836113fd565b935093505050611150565b506000905060025b9250929050565b600081600481111561116b5761116b611828565b036111735750565b600181600481111561118757611187611828565b036111d45760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610358565b60028160048111156111e8576111e8611828565b036112355760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610358565b600381600481111561124957611249611828565b036112a15760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610358565b60048160048111156112b5576112b5611828565b0361130d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610358565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561134757506000905060036113f4565b8460ff16601b1415801561135f57508460ff16601c14155b1561137057506000905060046113f4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156113c4573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113ed576000600192509250506113f4565b9150600090505b94509492505050565b6000806001600160ff1b0383168161141a60ff86901c601b61183e565b905061142887828885611310565b935093505050935093915050565b60006020828403121561144857600080fd5b5035919050565b80356001600160a01b038116811461146657600080fd5b919050565b6000806040838503121561147e57600080fd5b6114878361144f565b91506020830135801515811461149c57600080fd5b809150509250929050565b6000602082840312156114b957600080fd5b6114c28261144f565b9392505050565b80356001600160801b038116811461146657600080fd5b60008060008060008060c087890312156114f957600080fd5b6115028761144f565b95506115106020880161144f565b9450604087013593506060870135925061152c6080880161144f565b915061153a60a088016114c9565b90509295509295509295565b60006020828403121561155857600080fd5b6114c2826114c9565b600080600080600080600060e0888a03121561157c57600080fd5b6115858861144f565b96506115936020890161144f565b955060408801359450606088013593506115af6080890161144f565b92506115bd60a089016114c9565b915060c0880135905092959891949750929550565b600080600080600060a086880312156115ea57600080fd5b6115f38661144f565b94506116016020870161144f565b9350604086013592506060860135915061161d6080870161144f565b90509295509295909350565b60008083601f84011261163b57600080fd5b50813567ffffffffffffffff81111561165357600080fd5b60208301915083602082850101111561115057600080fd5b60008060008060006080868803121561168357600080fd5b61168c8661144f565b94506020860135935060408601359250606086013567ffffffffffffffff8111156116b657600080fd5b6116c288828901611629565b969995985093965092949392505050565b60008060008060008060008060008060006101408c8e0312156116f557600080fd5b6116fe8c61144f565b9a5061170c60208d0161144f565b995060408c0135985060608c0135975061172860808d0161144f565b965061173660a08d016114c9565b955060c08c0135945061174b60e08d0161144f565b93506101008c013592506101208c013567ffffffffffffffff81111561177057600080fd5b61177c8e828f01611629565b915080935050809150509295989b509295989b9093969950565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156117e4576117e46117bc565b500390565b60006001600160801b03808316818103611805576118056117bc565b6001019392505050565b60006020828403121561182157600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b60008219821115611851576118516117bc565b50019056fea264697066735822122072c1faf9049e71f629bbf1f4cf6291a17bff27c063aea6cfbed3485fc9317f1564736f6c634300080f0033608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350601960049081553360009081526003602052604090819020805460ff19166001179055905490517fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e031996951916100a89190815260200190565b60405180910390a1610d28806100bf6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638945bd281161008c578063af5899fc11610066578063af5899fc14610202578063c70a900f14610215578063daf9c21014610248578063fc361c381461026b57600080fd5b80638945bd28146101515780638da5cb5b146101645780639d8669851461018f57600080fd5b806307de99f6146100d45780630ffb1d8b146100fa57806313af40351461010f578063329e53be14610122578063391fe4e21461013557806384bfabcf1461013e575b600080fd5b6100e76100e2366004610ad9565b61027e565b6040519081526020015b60405180910390f35b61010d610108366004610b1e565b61028f565b005b61010d61011d366004610b51565b610322565b61010d610130366004610b1e565b610397565b6100e760045481565b6100e761014c366004610b73565b610419565b61010d61015f366004610ad9565b61043e565b600054610177906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b6101ef61019d366004610ad9565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b0395861695938416949390921692909160ff8082169161010090041687565b6040516100f19796959493929190610bd4565b61010d610210366004610b73565b6104a3565b610238610223366004610b51565b60036020526000908152604090205460ff1681565b60405190151581526020016100f1565b610238610256366004610b51565b60026020526000908152604090205460ff1681565b61010d610279366004610c3a565b6106fe565b600061028982610962565b92915050565b6000546001600160a01b031633146102c25760405162461bcd60e51b81526004016102b990610c5d565b60405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d9291015b60405180910390a25050565b6000546001600160a01b0316331461034c5760405162461bcd60e51b81526004016102b990610c5d565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103c15760405162461bcd60e51b81526004016102b990610c5d565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f8cc72bec7e2cf5979aefd933f40a28eb590098d522a5c458e497e71c5e6fa90f9101610316565b60008061042583610962565b9050610434868686868561097e565b9695505050505050565b6000546001600160a01b031633146104685760405162461bcd60e51b81526004016102b990610c5d565b60048190556040518181527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a150565b6001600160a01b03821660009081526002602052604090205460ff166104e75760405163010d7e6160e11b81526001600160a01b03831660048201526024016102b9565b60006104f282610962565b90506000610503868686868661097e565b90506001600082815260016020526040902060050154610100900460ff16600281111561053257610532610bbe565b036105535760405163d5e880e960e01b8152600481018290526024016102b9565b60006040518060e00160405280886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b03168152602001858152602001848152602001600015158152602001600160028111156105b5576105b5610bbe565b9052600083815260016020818152604092839020845181546001600160a01b03199081166001600160a01b03928316178355928601519382018054841694821694909417909355928401516002808501805490931691909316179055606083015160038301556080830151600483015560a083015160058301805460ff198116921515928317825560c0860151959650869593919261ffff1990911661ff0019909116179061010090849081111561066f5761066f610bbe565b021790555061068c9150506001600160a01b0386168730866109d1565b6106a16001600160a01b0386163330876109d1565b604080516001600160a01b038781168252602082018790529181018590528188169189169084907fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699060600160405180910390a450505050505050565b3360009081526003602052604090205460ff1661072e576040516314e9dd3960e31b815260040160405180910390fd5b6000828152600160208181526040808420815160e08101835281546001600160a01b03908116825294820154851693810193909352600280820154909416918301919091526003810154606083015260048101546080830152600581015460ff808216151560a08501529293919260c085019261010090920416908111156107b8576107b8610bbe565b60028111156107c9576107c9610bbe565b905250905060028160c0015160028111156107e6576107e6610bbe565b036108075760405163b677167760e01b8152600481018490526024016102b9565b81156108415780516060820151608083015161083c929161082791610c99565b60408401516001600160a01b03169190610a5b565b61085d565b61085d8160200151826060015183608001516108279190610c99565b600260c0820181815283151560a08401908152600086815260016020818152604092839020875181546001600160a01b039182166001600160a01b0319918216178355928901519382018054948216948416949094179093559287015183870180549190931691161790556060850151600382015560808501516004820155905160058201805491151560ff198316811782559351869593949093919261ff001990911661ffff19909116179061010090849081111561091f5761091f610bbe565b02179055505060405183151581528491507fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a2505050565b60006064600454836109749190610cb1565b6102899190610cd0565b604080516001600160a01b0396871660208083019190915295871681830152939095166060840152608083019190915260a0808301919091528351808303909101815260c0909101909252815191012090565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610a545760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b60448201526064016102b9565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610ad35760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b60448201526064016102b9565b50505050565b600060208284031215610aeb57600080fd5b5035919050565b80356001600160a01b0381168114610b0957600080fd5b919050565b80358015158114610b0957600080fd5b60008060408385031215610b3157600080fd5b610b3a83610af2565b9150610b4860208401610b0e565b90509250929050565b600060208284031215610b6357600080fd5b610b6c82610af2565b9392505050565b60008060008060808587031215610b8957600080fd5b610b9285610af2565b9350610ba060208601610af2565b9250610bae60408601610af2565b9396929550929360600135925050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905282151560a082015260e0810160038310610c2857634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b60008060408385031215610c4d57600080fd5b82359150610b4860208401610b0e565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610cac57610cac610c83565b500190565b6000816000190483118215151615610ccb57610ccb610c83565b500290565b600082610ced57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220114d788f98f9b1197a197c0dc59e264b32d6e90418bcef5841446cc4765195dd64736f6c634300080f003346696c6c65642062792073686f756c6420626520657175616c20746f207468652061646472657373206f66207468652072656c617965720000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d46696c6c656420617420626c6f636b2073686f756c6420626520657175616c20746f207468652063757272656e7420626c6f636b206e756d62657246696c6c656420617420626c6f636b2073686f756c6420626520657175616c20746f203054686520726563697069656e74206f66207468652074726164652073686f756c6420686176652072656365697665642074686520616d6f756e742073656e74206279207468652072656c61796572885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d46696c6c656420616d6f756e742073686f756c6420626520657175616c20746f2074686520616d6f756e742073656e74426f62202852656c61796572292073686f756c6420686176652072656365697665642074686520616d6f756e7420736f6c64206279207468652074726164657246696c6c656420616d6f756e742073686f756c6420626520657175616c20746f2030a26469706673582212206e80a6fb65a3ca8d39d9e82d4b3dd2028add75a1babbac237689a310dbeb2a2d64736f6c634300080f0033" . parse () . expect ("invalid bytecode")
        });
    pub struct SettlementTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for SettlementTest<M> {
        fn clone(&self) -> Self {
            SettlementTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for SettlementTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for SettlementTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(SettlementTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> SettlementTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), SETTLEMENTTEST_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                SETTLEMENTTEST_ABI.clone(),
                SETTLEMENTTEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bound` (0x5a6c1eed) function"]
        pub fn bound(
            &self,
            x: ethers::core::types::U256,
            min: ethers::core::types::U256,
            max: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([90, 108, 30, 237], (x, min, max))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x6bce989b) function"]
        pub fn deal_with_token(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([107, 206, 152, 155], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x97754ae9) function"]
        pub fn deal_with_token_and_adjust(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
            adjust: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([151, 117, 74, 233], (token, to, give, adjust))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0xc88a5e6d) function"]
        pub fn deal(
            &self,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 138, 94, 109], (to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x29ce9dde) function"]
        pub fn deploy_code_with_args(
            &self,
            what: String,
            args: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 206, 157, 222], (what, args))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x9a8325a0) function"]
        pub fn deploy_code(
            &self,
            what: String,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([154, 131, 37, 160], what)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x233240ee) function"]
        pub fn hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 50, 64, 238], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x29a9e300) function"]
        pub fn hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([41, 169, 227, 0], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xaf9bbe5f) function"]
        pub fn hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([175, 155, 190, 95], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xe9a79a7b) function"]
        pub fn hoax_4(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([233, 167, 154, 123], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewind` (0x2d6c17a3) function"]
        pub fn rewind(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([45, 108, 23, 163], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `skip` (0xb9c071b4) function"]
        pub fn skip(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([185, 192, 113, 180], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x108554f2) function"]
        pub fn start_hoax_1(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([16, 133, 84, 242], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x3bf82db1) function"]
        pub fn start_hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 248, 45, 177], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x6f597075) function"]
        pub fn start_hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([111, 89, 112, 117], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0xd06d8229) function"]
        pub fn start_hoax_4(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 109, 130, 41], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotSettleBeforeThreshold` (0x4fefe5ee) function"]
        pub fn test_cannot_settle_before_threshold(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([79, 239, 229, 238], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotSettleIfNotFilled` (0xe1c9fd20) function"]
        pub fn test_cannot_settle_if_not_filled(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([225, 201, 253, 32], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testSettlement` (0xac73b6ce) function"]
        pub fn test_settlement(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([172, 115, 182, 206], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tip` (0xd82555f1) function"]
        pub fn tip(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 37, 85, 241], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `MaxFeePctChanged` event"]
        pub fn max_fee_pct_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MaxFeePctChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `SafeBlockThresholdChanged` event"]
        pub fn safe_block_threshold_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, SafeBlockThresholdChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenWhitelisted` event"]
        pub fn token_whitelisted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenWhitelistedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputed` event"]
        pub fn trade_disputed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeFilled` event"]
        pub fn trade_filled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeFilledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeRequested` event"]
        pub fn trade_requested_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeRequestedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeSettled` event"]
        pub fn trade_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `UpdatedFeeForTrade` event"]
        pub fn updated_fee_for_trade_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, UpdatedFeeForTradeFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `WARNING_Deprecated` event"]
        pub fn warning_deprecated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, WarningDeprecatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, SettlementTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for SettlementTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "MaxFeePctChanged", abi = "MaxFeePctChanged(uint128)")]
    pub struct MaxFeePctChangedFilter {
        pub new_max_fee_pct: u128,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "SafeBlockThresholdChanged",
        abi = "SafeBlockThresholdChanged(uint256)"
    )]
    pub struct SafeBlockThresholdChangedFilter {
        pub new_safe_block_threshold: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokenWhitelisted", abi = "TokenWhitelisted(address,bool)")]
    pub struct TokenWhitelistedFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
        pub whitelisted: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeDisputed",
        abi = "TradeDisputed(address,bytes32,bytes32,uint256,uint256)"
    )]
    pub struct TradeDisputedFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        #[ethevent(indexed)]
        pub dispute_id: [u8; 32],
        pub filled_amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeFilled",
        abi = "TradeFilled(address,bytes32,uint256,uint256,uint256)"
    )]
    pub struct TradeFilledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        #[ethevent(indexed)]
        pub filled_at_block: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeRequested",
        abi = "TradeRequested(address,address,uint256,uint256,address,uint256)"
    )]
    pub struct TradeRequestedFilter {
        #[ethevent(indexed)]
        pub token_in: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub token_out: ethers::core::types::Address,
        pub fee_pct: ethers::core::types::U256,
        pub amount: ethers::core::types::U256,
        pub to: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeSettled",
        abi = "TradeSettled(address,bytes32,uint256,uint256)"
    )]
    pub struct TradeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        #[ethevent(indexed)]
        pub filled_amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "UpdatedFeeForTrade",
        abi = "UpdatedFeeForTrade(address,bytes32,uint256)"
    )]
    pub struct UpdatedFeeForTradeFilter {
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        pub new_fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "WARNING_Deprecated", abi = "WARNING_Deprecated(string)")]
    pub struct WarningDeprecatedFilter {
        pub msg: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum SettlementTestEvents {
        MaxFeePctChangedFilter(MaxFeePctChangedFilter),
        SafeBlockThresholdChangedFilter(SafeBlockThresholdChangedFilter),
        TokenWhitelistedFilter(TokenWhitelistedFilter),
        TradeDisputedFilter(TradeDisputedFilter),
        TradeFilledFilter(TradeFilledFilter),
        TradeRequestedFilter(TradeRequestedFilter),
        TradeSettledFilter(TradeSettledFilter),
        UpdatedFeeForTradeFilter(UpdatedFeeForTradeFilter),
        WarningDeprecatedFilter(WarningDeprecatedFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for SettlementTestEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = MaxFeePctChangedFilter::decode_log(log) {
                return Ok(SettlementTestEvents::MaxFeePctChangedFilter(decoded));
            }
            if let Ok(decoded) = SafeBlockThresholdChangedFilter::decode_log(log) {
                return Ok(SettlementTestEvents::SafeBlockThresholdChangedFilter(
                    decoded,
                ));
            }
            if let Ok(decoded) = TokenWhitelistedFilter::decode_log(log) {
                return Ok(SettlementTestEvents::TokenWhitelistedFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputedFilter::decode_log(log) {
                return Ok(SettlementTestEvents::TradeDisputedFilter(decoded));
            }
            if let Ok(decoded) = TradeFilledFilter::decode_log(log) {
                return Ok(SettlementTestEvents::TradeFilledFilter(decoded));
            }
            if let Ok(decoded) = TradeRequestedFilter::decode_log(log) {
                return Ok(SettlementTestEvents::TradeRequestedFilter(decoded));
            }
            if let Ok(decoded) = TradeSettledFilter::decode_log(log) {
                return Ok(SettlementTestEvents::TradeSettledFilter(decoded));
            }
            if let Ok(decoded) = UpdatedFeeForTradeFilter::decode_log(log) {
                return Ok(SettlementTestEvents::UpdatedFeeForTradeFilter(decoded));
            }
            if let Ok(decoded) = WarningDeprecatedFilter::decode_log(log) {
                return Ok(SettlementTestEvents::WarningDeprecatedFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(SettlementTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(SettlementTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(SettlementTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(SettlementTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(SettlementTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(SettlementTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(SettlementTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(SettlementTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(SettlementTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(SettlementTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(SettlementTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(SettlementTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(SettlementTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(SettlementTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(SettlementTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(SettlementTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for SettlementTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                SettlementTestEvents::MaxFeePctChangedFilter(element) => element.fmt(f),
                SettlementTestEvents::SafeBlockThresholdChangedFilter(element) => element.fmt(f),
                SettlementTestEvents::TokenWhitelistedFilter(element) => element.fmt(f),
                SettlementTestEvents::TradeDisputedFilter(element) => element.fmt(f),
                SettlementTestEvents::TradeFilledFilter(element) => element.fmt(f),
                SettlementTestEvents::TradeRequestedFilter(element) => element.fmt(f),
                SettlementTestEvents::TradeSettledFilter(element) => element.fmt(f),
                SettlementTestEvents::UpdatedFeeForTradeFilter(element) => element.fmt(f),
                SettlementTestEvents::WarningDeprecatedFilter(element) => element.fmt(f),
                SettlementTestEvents::LogFilter(element) => element.fmt(f),
                SettlementTestEvents::LogAddressFilter(element) => element.fmt(f),
                SettlementTestEvents::LogBytesFilter(element) => element.fmt(f),
                SettlementTestEvents::LogBytes32Filter(element) => element.fmt(f),
                SettlementTestEvents::LogIntFilter(element) => element.fmt(f),
                SettlementTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                SettlementTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                SettlementTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                SettlementTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                SettlementTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                SettlementTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                SettlementTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                SettlementTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                SettlementTestEvents::LogStringFilter(element) => element.fmt(f),
                SettlementTestEvents::LogUintFilter(element) => element.fmt(f),
                SettlementTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST`function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `bound`function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bound", abi = "bound(uint256,uint256,uint256)")]
    pub struct BoundCall {
        pub x: ethers::core::types::U256,
        pub min: ethers::core::types::U256,
        pub max: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256)` and selector `[107, 206, 152, 155]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256)")]
    pub struct DealWithTokenCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256,bool)` and selector `[151, 117, 74, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256,bool)")]
    pub struct DealWithTokenAndAdjustCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
        pub adjust: bool,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,uint256)` and selector `[200, 138, 94, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,uint256)")]
    pub struct DealCall {
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string,bytes)")]
    pub struct DeployCodeWithArgsCall {
        pub what: String,
        pub args: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string)")]
    pub struct DeployCodeCall {
        pub what: String,
    }
    #[doc = "Container type for all input parameters for the `failed`function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address)` and selector `[35, 50, 64, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address)")]
    pub struct Hoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address)` and selector `[41, 169, 227, 0]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address)")]
    pub struct Hoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address,uint256)` and selector `[175, 155, 190, 95]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address,uint256)")]
    pub struct Hoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,uint256)` and selector `[233, 167, 154, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,uint256)")]
    pub struct Hoax4Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `rewind`function with signature `rewind(uint256)` and selector `[45, 108, 23, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewind", abi = "rewind(uint256)")]
    pub struct RewindCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setUp`function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `skip`function with signature `skip(uint256)` and selector `[185, 192, 113, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "skip", abi = "skip(uint256)")]
    pub struct SkipCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,uint256)` and selector `[16, 133, 84, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,uint256)")]
    pub struct StartHoax1Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address,uint256)` and selector `[59, 248, 45, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address,uint256)")]
    pub struct StartHoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address)` and selector `[111, 89, 112, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address)")]
    pub struct StartHoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address)` and selector `[208, 109, 130, 41]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address)")]
    pub struct StartHoax4Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `testCannotSettleBeforeThreshold`function with signature `testCannotSettleBeforeThreshold()` and selector `[79, 239, 229, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotSettleBeforeThreshold",
        abi = "testCannotSettleBeforeThreshold()"
    )]
    pub struct TestCannotSettleBeforeThresholdCall;
    #[doc = "Container type for all input parameters for the `testCannotSettleIfNotFilled`function with signature `testCannotSettleIfNotFilled()` and selector `[225, 201, 253, 32]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotSettleIfNotFilled",
        abi = "testCannotSettleIfNotFilled()"
    )]
    pub struct TestCannotSettleIfNotFilledCall;
    #[doc = "Container type for all input parameters for the `testSettlement`function with signature `testSettlement()` and selector `[172, 115, 182, 206]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testSettlement", abi = "testSettlement()")]
    pub struct TestSettlementCall;
    #[doc = "Container type for all input parameters for the `tip`function with signature `tip(address,address,uint256)` and selector `[216, 37, 85, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tip", abi = "tip(address,address,uint256)")]
    pub struct TipCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `vm`function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum SettlementTestCalls {
        IsTest(IsTestCall),
        Bound(BoundCall),
        DealWithToken(DealWithTokenCall),
        DealWithTokenAndAdjust(DealWithTokenAndAdjustCall),
        Deal(DealCall),
        DeployCodeWithArgs(DeployCodeWithArgsCall),
        DeployCode(DeployCodeCall),
        Failed(FailedCall),
        Hoax0(Hoax0Call),
        Hoax2(Hoax2Call),
        Hoax3(Hoax3Call),
        Hoax4(Hoax4Call),
        Rewind(RewindCall),
        SetUp(SetUpCall),
        Skip(SkipCall),
        StartHoax1(StartHoax1Call),
        StartHoax2(StartHoax2Call),
        StartHoax0(StartHoax0Call),
        StartHoax4(StartHoax4Call),
        TestCannotSettleBeforeThreshold(TestCannotSettleBeforeThresholdCall),
        TestCannotSettleIfNotFilled(TestCannotSettleIfNotFilledCall),
        TestSettlement(TestSettlementCall),
        Tip(TipCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for SettlementTestCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <BoundCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::Bound(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::DealWithToken(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenAndAdjustCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::DealWithTokenAndAdjust(decoded));
            }
            if let Ok(decoded) = <DealCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(SettlementTestCalls::Deal(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeWithArgsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::DeployCodeWithArgs(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::DeployCode(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <Hoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::Hoax0(decoded));
            }
            if let Ok(decoded) = <Hoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::Hoax2(decoded));
            }
            if let Ok(decoded) = <Hoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::Hoax3(decoded));
            }
            if let Ok(decoded) = <Hoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::Hoax4(decoded));
            }
            if let Ok(decoded) = <RewindCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::Rewind(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) = <SkipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(SettlementTestCalls::Skip(decoded));
            }
            if let Ok(decoded) =
                <StartHoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::StartHoax1(decoded));
            }
            if let Ok(decoded) =
                <StartHoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::StartHoax2(decoded));
            }
            if let Ok(decoded) =
                <StartHoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::StartHoax0(decoded));
            }
            if let Ok(decoded) =
                <StartHoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::StartHoax4(decoded));
            }
            if let Ok(decoded) =
                <TestCannotSettleBeforeThresholdCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(SettlementTestCalls::TestCannotSettleBeforeThreshold(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestCannotSettleIfNotFilledCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(SettlementTestCalls::TestCannotSettleIfNotFilled(decoded));
            }
            if let Ok(decoded) =
                <TestSettlementCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(SettlementTestCalls::TestSettlement(decoded));
            }
            if let Ok(decoded) = <TipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(SettlementTestCalls::Tip(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(SettlementTestCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for SettlementTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                SettlementTestCalls::IsTest(element) => element.encode(),
                SettlementTestCalls::Bound(element) => element.encode(),
                SettlementTestCalls::DealWithToken(element) => element.encode(),
                SettlementTestCalls::DealWithTokenAndAdjust(element) => element.encode(),
                SettlementTestCalls::Deal(element) => element.encode(),
                SettlementTestCalls::DeployCodeWithArgs(element) => element.encode(),
                SettlementTestCalls::DeployCode(element) => element.encode(),
                SettlementTestCalls::Failed(element) => element.encode(),
                SettlementTestCalls::Hoax0(element) => element.encode(),
                SettlementTestCalls::Hoax2(element) => element.encode(),
                SettlementTestCalls::Hoax3(element) => element.encode(),
                SettlementTestCalls::Hoax4(element) => element.encode(),
                SettlementTestCalls::Rewind(element) => element.encode(),
                SettlementTestCalls::SetUp(element) => element.encode(),
                SettlementTestCalls::Skip(element) => element.encode(),
                SettlementTestCalls::StartHoax1(element) => element.encode(),
                SettlementTestCalls::StartHoax2(element) => element.encode(),
                SettlementTestCalls::StartHoax0(element) => element.encode(),
                SettlementTestCalls::StartHoax4(element) => element.encode(),
                SettlementTestCalls::TestCannotSettleBeforeThreshold(element) => element.encode(),
                SettlementTestCalls::TestCannotSettleIfNotFilled(element) => element.encode(),
                SettlementTestCalls::TestSettlement(element) => element.encode(),
                SettlementTestCalls::Tip(element) => element.encode(),
                SettlementTestCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for SettlementTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                SettlementTestCalls::IsTest(element) => element.fmt(f),
                SettlementTestCalls::Bound(element) => element.fmt(f),
                SettlementTestCalls::DealWithToken(element) => element.fmt(f),
                SettlementTestCalls::DealWithTokenAndAdjust(element) => element.fmt(f),
                SettlementTestCalls::Deal(element) => element.fmt(f),
                SettlementTestCalls::DeployCodeWithArgs(element) => element.fmt(f),
                SettlementTestCalls::DeployCode(element) => element.fmt(f),
                SettlementTestCalls::Failed(element) => element.fmt(f),
                SettlementTestCalls::Hoax0(element) => element.fmt(f),
                SettlementTestCalls::Hoax2(element) => element.fmt(f),
                SettlementTestCalls::Hoax3(element) => element.fmt(f),
                SettlementTestCalls::Hoax4(element) => element.fmt(f),
                SettlementTestCalls::Rewind(element) => element.fmt(f),
                SettlementTestCalls::SetUp(element) => element.fmt(f),
                SettlementTestCalls::Skip(element) => element.fmt(f),
                SettlementTestCalls::StartHoax1(element) => element.fmt(f),
                SettlementTestCalls::StartHoax2(element) => element.fmt(f),
                SettlementTestCalls::StartHoax0(element) => element.fmt(f),
                SettlementTestCalls::StartHoax4(element) => element.fmt(f),
                SettlementTestCalls::TestCannotSettleBeforeThreshold(element) => element.fmt(f),
                SettlementTestCalls::TestCannotSettleIfNotFilled(element) => element.fmt(f),
                SettlementTestCalls::TestSettlement(element) => element.fmt(f),
                SettlementTestCalls::Tip(element) => element.fmt(f),
                SettlementTestCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for SettlementTestCalls {
        fn from(var: IsTestCall) -> Self {
            SettlementTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<BoundCall> for SettlementTestCalls {
        fn from(var: BoundCall) -> Self {
            SettlementTestCalls::Bound(var)
        }
    }
    impl ::std::convert::From<DealWithTokenCall> for SettlementTestCalls {
        fn from(var: DealWithTokenCall) -> Self {
            SettlementTestCalls::DealWithToken(var)
        }
    }
    impl ::std::convert::From<DealWithTokenAndAdjustCall> for SettlementTestCalls {
        fn from(var: DealWithTokenAndAdjustCall) -> Self {
            SettlementTestCalls::DealWithTokenAndAdjust(var)
        }
    }
    impl ::std::convert::From<DealCall> for SettlementTestCalls {
        fn from(var: DealCall) -> Self {
            SettlementTestCalls::Deal(var)
        }
    }
    impl ::std::convert::From<DeployCodeWithArgsCall> for SettlementTestCalls {
        fn from(var: DeployCodeWithArgsCall) -> Self {
            SettlementTestCalls::DeployCodeWithArgs(var)
        }
    }
    impl ::std::convert::From<DeployCodeCall> for SettlementTestCalls {
        fn from(var: DeployCodeCall) -> Self {
            SettlementTestCalls::DeployCode(var)
        }
    }
    impl ::std::convert::From<FailedCall> for SettlementTestCalls {
        fn from(var: FailedCall) -> Self {
            SettlementTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<Hoax0Call> for SettlementTestCalls {
        fn from(var: Hoax0Call) -> Self {
            SettlementTestCalls::Hoax0(var)
        }
    }
    impl ::std::convert::From<Hoax2Call> for SettlementTestCalls {
        fn from(var: Hoax2Call) -> Self {
            SettlementTestCalls::Hoax2(var)
        }
    }
    impl ::std::convert::From<Hoax3Call> for SettlementTestCalls {
        fn from(var: Hoax3Call) -> Self {
            SettlementTestCalls::Hoax3(var)
        }
    }
    impl ::std::convert::From<Hoax4Call> for SettlementTestCalls {
        fn from(var: Hoax4Call) -> Self {
            SettlementTestCalls::Hoax4(var)
        }
    }
    impl ::std::convert::From<RewindCall> for SettlementTestCalls {
        fn from(var: RewindCall) -> Self {
            SettlementTestCalls::Rewind(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for SettlementTestCalls {
        fn from(var: SetUpCall) -> Self {
            SettlementTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<SkipCall> for SettlementTestCalls {
        fn from(var: SkipCall) -> Self {
            SettlementTestCalls::Skip(var)
        }
    }
    impl ::std::convert::From<StartHoax1Call> for SettlementTestCalls {
        fn from(var: StartHoax1Call) -> Self {
            SettlementTestCalls::StartHoax1(var)
        }
    }
    impl ::std::convert::From<StartHoax2Call> for SettlementTestCalls {
        fn from(var: StartHoax2Call) -> Self {
            SettlementTestCalls::StartHoax2(var)
        }
    }
    impl ::std::convert::From<StartHoax0Call> for SettlementTestCalls {
        fn from(var: StartHoax0Call) -> Self {
            SettlementTestCalls::StartHoax0(var)
        }
    }
    impl ::std::convert::From<StartHoax4Call> for SettlementTestCalls {
        fn from(var: StartHoax4Call) -> Self {
            SettlementTestCalls::StartHoax4(var)
        }
    }
    impl ::std::convert::From<TestCannotSettleBeforeThresholdCall> for SettlementTestCalls {
        fn from(var: TestCannotSettleBeforeThresholdCall) -> Self {
            SettlementTestCalls::TestCannotSettleBeforeThreshold(var)
        }
    }
    impl ::std::convert::From<TestCannotSettleIfNotFilledCall> for SettlementTestCalls {
        fn from(var: TestCannotSettleIfNotFilledCall) -> Self {
            SettlementTestCalls::TestCannotSettleIfNotFilled(var)
        }
    }
    impl ::std::convert::From<TestSettlementCall> for SettlementTestCalls {
        fn from(var: TestSettlementCall) -> Self {
            SettlementTestCalls::TestSettlement(var)
        }
    }
    impl ::std::convert::From<TipCall> for SettlementTestCalls {
        fn from(var: TipCall) -> Self {
            SettlementTestCalls::Tip(var)
        }
    }
    impl ::std::convert::From<VmCall> for SettlementTestCalls {
        fn from(var: VmCall) -> Self {
            SettlementTestCalls::Vm(var)
        }
    }
}
