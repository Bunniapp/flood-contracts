pub use flood_registry::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod flood_registry {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"weth\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"FloodRegistry__InvalidInputLength\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"FloodRegistry__InvalidToken\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"FloodRegistry__RelayerAlreadyWhitelisted\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"FloodRegistry__RelayerNotWhitelisted\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"FloodRegistry__TokenAlreadyWhitelisted\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"FloodRegistry__TokenNotWhitelisted\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferStarted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"RelayerWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"acceptOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"areTokensWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"bool[]\",\"name\":\"enabled\",\"type\":\"bool[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"batchWhitelistTokens\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isRelayerWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isTokenWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"whitelistRelayer\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"whitelistToken\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"whitelistedRelayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"whitelistedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static FLOODREGISTRY_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        160,
        96,
        64,
        82,
        52,
        128,
        21,
        98,
        0,
        0,
        17,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        98,
        0,
        15,
        143,
        56,
        3,
        128,
        98,
        0,
        15,
        143,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        98,
        0,
        0,
        52,
        145,
        98,
        0,
        3,
        35,
        86,
        91,
        98,
        0,
        0,
        63,
        51,
        98,
        0,
        0,
        110,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        128,
        82,
        98,
        0,
        0,
        89,
        129,
        96,
        1,
        98,
        0,
        0,
        140,
        86,
        91,
        98,
        0,
        0,
        103,
        96,
        0,
        96,
        1,
        98,
        0,
        0,
        140,
        86,
        91,
        80,
        98,
        0,
        3,
        163,
        86,
        91,
        96,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        144,
        85,
        98,
        0,
        0,
        137,
        129,
        98,
        0,
        1,
        70,
        86,
        91,
        80,
        86,
        91,
        128,
        21,
        98,
        0,
        0,
        202,
        87,
        96,
        0,
        98,
        0,
        0,
        162,
        96,
        2,
        132,
        98,
        0,
        1,
        150,
        86,
        91,
        144,
        80,
        128,
        98,
        0,
        0,
        195,
        87,
        96,
        64,
        81,
        99,
        246,
        217,
        211,
        89,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        98,
        0,
        0,
        252,
        86,
        91,
        96,
        0,
        98,
        0,
        0,
        217,
        96,
        2,
        132,
        98,
        0,
        1,
        182,
        86,
        91,
        144,
        80,
        128,
        98,
        0,
        0,
        250,
        87,
        96,
        64,
        81,
        99,
        14,
        204,
        149,
        39,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        91,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        239,
        129,
        169,
        148,
        59,
        150,
        200,
        223,
        78,
        242,
        67,
        64,
        28,
        155,
        245,
        21,
        145,
        70,
        22,
        98,
        17,
        53,
        104,
        152,
        181,
        45,
        56,
        32,
        134,
        22,
        141,
        146,
        130,
        96,
        64,
        81,
        98,
        0,
        1,
        58,
        145,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        0,
        98,
        0,
        1,
        173,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        98,
        0,
        1,
        205,
        86,
        91,
        144,
        80,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        98,
        0,
        1,
        173,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        98,
        0,
        2,
        31,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        131,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        98,
        0,
        2,
        22,
        87,
        80,
        129,
        84,
        96,
        1,
        129,
        129,
        1,
        132,
        85,
        96,
        0,
        132,
        129,
        82,
        96,
        32,
        128,
        130,
        32,
        144,
        147,
        1,
        132,
        144,
        85,
        132,
        84,
        132,
        130,
        82,
        130,
        134,
        1,
        144,
        147,
        82,
        96,
        64,
        144,
        32,
        145,
        144,
        145,
        85,
        98,
        0,
        1,
        176,
        86,
        91,
        80,
        96,
        0,
        98,
        0,
        1,
        176,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        131,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        128,
        21,
        98,
        0,
        3,
        24,
        87,
        96,
        0,
        98,
        0,
        2,
        70,
        96,
        1,
        131,
        98,
        0,
        3,
        85,
        86,
        91,
        133,
        84,
        144,
        145,
        80,
        96,
        0,
        144,
        98,
        0,
        2,
        92,
        144,
        96,
        1,
        144,
        98,
        0,
        3,
        85,
        86,
        91,
        144,
        80,
        129,
        129,
        20,
        98,
        0,
        2,
        200,
        87,
        96,
        0,
        134,
        96,
        0,
        1,
        130,
        129,
        84,
        129,
        16,
        98,
        0,
        2,
        128,
        87,
        98,
        0,
        2,
        128,
        98,
        0,
        3,
        119,
        86,
        91,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        84,
        144,
        80,
        128,
        135,
        96,
        0,
        1,
        132,
        129,
        84,
        129,
        16,
        98,
        0,
        2,
        166,
        87,
        98,
        0,
        2,
        166,
        98,
        0,
        3,
        119,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        128,
        131,
        32,
        144,
        145,
        1,
        146,
        144,
        146,
        85,
        145,
        130,
        82,
        96,
        1,
        136,
        1,
        144,
        82,
        96,
        64,
        144,
        32,
        131,
        144,
        85,
        91,
        133,
        84,
        134,
        144,
        128,
        98,
        0,
        2,
        220,
        87,
        98,
        0,
        2,
        220,
        98,
        0,
        3,
        141,
        86,
        91,
        96,
        1,
        144,
        3,
        129,
        129,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        96,
        0,
        144,
        85,
        144,
        85,
        133,
        96,
        1,
        1,
        96,
        0,
        134,
        129,
        82,
        96,
        32,
        1,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        32,
        96,
        0,
        144,
        85,
        96,
        1,
        147,
        80,
        80,
        80,
        80,
        98,
        0,
        1,
        176,
        86,
        91,
        96,
        0,
        145,
        80,
        80,
        98,
        0,
        1,
        176,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        98,
        0,
        3,
        54,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        98,
        0,
        3,
        78,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        129,
        129,
        3,
        129,
        129,
        17,
        21,
        98,
        0,
        1,
        176,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        49,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        128,
        81,
        97,
        11,
        208,
        98,
        0,
        3,
        191,
        96,
        0,
        57,
        96,
        0,
        97,
        1,
        199,
        1,
        82,
        97,
        11,
        208,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        245,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        121,
        186,
        80,
        151,
        17,
        97,
        0,
        151,
        87,
        128,
        99,
        181,
        175,
        9,
        15,
        17,
        97,
        0,
        102,
        87,
        128,
        99,
        181,
        175,
        9,
        15,
        20,
        97,
        1,
        233,
        87,
        128,
        99,
        223,
        220,
        73,
        98,
        20,
        97,
        1,
        252,
        87,
        128,
        99,
        227,
        12,
        57,
        120,
        20,
        97,
        2,
        18,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        2,
        35,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        121,
        186,
        80,
        151,
        20,
        97,
        1,
        141,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        1,
        149,
        87,
        128,
        99,
        149,
        99,
        184,
        52,
        20,
        97,
        1,
        186,
        87,
        128,
        99,
        173,
        92,
        70,
        72,
        20,
        97,
        1,
        194,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        75,
        187,
        216,
        70,
        17,
        97,
        0,
        211,
        87,
        128,
        99,
        75,
        187,
        216,
        70,
        20,
        97,
        1,
        53,
        87,
        128,
        99,
        94,
        23,
        98,
        160,
        20,
        97,
        1,
        93,
        87,
        128,
        99,
        95,
        186,
        41,
        143,
        20,
        97,
        1,
        114,
        87,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        1,
        133,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        15,
        251,
        29,
        139,
        20,
        97,
        0,
        250,
        87,
        128,
        99,
        35,
        132,
        252,
        116,
        20,
        97,
        1,
        15,
        87,
        128,
        99,
        57,
        6,
        60,
        99,
        20,
        97,
        1,
        34,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        1,
        13,
        97,
        1,
        8,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        97,
        2,
        54,
        86,
        91,
        0,
        91,
        97,
        1,
        13,
        97,
        1,
        29,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        97,
        2,
        119,
        86,
        91,
        97,
        1,
        13,
        97,
        1,
        48,
        54,
        96,
        4,
        97,
        9,
        249,
        86,
        91,
        97,
        2,
        137,
        86,
        91,
        97,
        1,
        72,
        97,
        1,
        67,
        54,
        96,
        4,
        97,
        10,
        101,
        86,
        91,
        97,
        3,
        124,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        1,
        101,
        97,
        3,
        143,
        86,
        91,
        96,
        64,
        81,
        97,
        1,
        84,
        145,
        144,
        97,
        10,
        130,
        86,
        91,
        97,
        1,
        72,
        97,
        1,
        128,
        54,
        96,
        4,
        97,
        10,
        207,
        86,
        91,
        97,
        3,
        160,
        86,
        91,
        97,
        1,
        13,
        97,
        4,
        8,
        86,
        91,
        97,
        1,
        13,
        97,
        4,
        28,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        84,
        86,
        91,
        97,
        1,
        101,
        97,
        4,
        155,
        86,
        91,
        97,
        1,
        162,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        72,
        97,
        1,
        247,
        54,
        96,
        4,
        97,
        10,
        101,
        86,
        91,
        97,
        4,
        167,
        86,
        91,
        97,
        2,
        4,
        97,
        4,
        180,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        84,
        86,
        91,
        96,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        1,
        162,
        86,
        91,
        97,
        1,
        13,
        97,
        2,
        49,
        54,
        96,
        4,
        97,
        10,
        101,
        86,
        91,
        97,
        4,
        192,
        86,
        91,
        97,
        2,
        62,
        97,
        5,
        49,
        86,
        91,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        59,
        96,
        0,
        3,
        97,
        2,
        105,
        87,
        96,
        64,
        81,
        99,
        21,
        100,
        184,
        69,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        2,
        115,
        130,
        130,
        97,
        5,
        139,
        86,
        91,
        80,
        80,
        86,
        91,
        97,
        2,
        127,
        97,
        5,
        49,
        86,
        91,
        97,
        2,
        115,
        130,
        130,
        97,
        6,
        60,
        86,
        91,
        97,
        2,
        145,
        97,
        5,
        49,
        86,
        91,
        130,
        129,
        20,
        97,
        2,
        177,
        87,
        96,
        64,
        81,
        99,
        4,
        106,
        65,
        179,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        3,
        117,
        87,
        132,
        132,
        130,
        129,
        129,
        16,
        97,
        2,
        206,
        87,
        97,
        2,
        206,
        97,
        11,
        17,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        2,
        227,
        145,
        144,
        97,
        10,
        101,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        59,
        96,
        0,
        3,
        97,
        3,
        13,
        87,
        96,
        64,
        81,
        99,
        21,
        100,
        184,
        69,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        3,
        99,
        133,
        133,
        131,
        129,
        129,
        16,
        97,
        3,
        34,
        87,
        97,
        3,
        34,
        97,
        11,
        17,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        3,
        55,
        145,
        144,
        97,
        10,
        101,
        86,
        91,
        132,
        132,
        132,
        129,
        129,
        16,
        97,
        3,
        73,
        87,
        97,
        3,
        73,
        97,
        11,
        17,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        3,
        94,
        145,
        144,
        97,
        11,
        39,
        86,
        91,
        97,
        5,
        139,
        86,
        91,
        128,
        97,
        3,
        109,
        129,
        97,
        11,
        88,
        86,
        91,
        145,
        80,
        80,
        97,
        2,
        180,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        3,
        137,
        96,
        4,
        131,
        97,
        6,
        225,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        96,
        97,
        3,
        155,
        96,
        2,
        97,
        7,
        6,
        86,
        91,
        144,
        80,
        144,
        86,
        91,
        96,
        0,
        128,
        91,
        130,
        129,
        16,
        21,
        97,
        3,
        254,
        87,
        97,
        3,
        222,
        132,
        132,
        131,
        129,
        129,
        16,
        97,
        3,
        193,
        87,
        97,
        3,
        193,
        97,
        11,
        17,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        3,
        214,
        145,
        144,
        97,
        10,
        101,
        86,
        91,
        96,
        2,
        144,
        97,
        6,
        225,
        86,
        91,
        97,
        3,
        236,
        87,
        96,
        0,
        145,
        80,
        80,
        97,
        3,
        137,
        86,
        91,
        128,
        97,
        3,
        246,
        129,
        97,
        11,
        88,
        86,
        91,
        145,
        80,
        80,
        97,
        3,
        164,
        86,
        91,
        80,
        96,
        1,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        97,
        4,
        16,
        97,
        5,
        49,
        86,
        91,
        97,
        4,
        26,
        96,
        0,
        97,
        7,
        19,
        86,
        91,
        86,
        91,
        96,
        1,
        84,
        51,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        20,
        97,
        4,
        143,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        41,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        50,
        83,
        116,
        101,
        112,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        96,
        68,
        130,
        1,
        82,
        104,
        55,
        50,
        187,
        144,
        55,
        187,
        183,
        50,
        185,
        96,
        185,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        4,
        152,
        129,
        97,
        7,
        19,
        86,
        91,
        80,
        86,
        91,
        96,
        96,
        97,
        3,
        155,
        96,
        4,
        97,
        7,
        6,
        86,
        91,
        96,
        0,
        97,
        3,
        137,
        96,
        2,
        131,
        97,
        6,
        225,
        86,
        91,
        96,
        0,
        97,
        3,
        155,
        96,
        2,
        97,
        7,
        44,
        86,
        91,
        97,
        4,
        200,
        97,
        5,
        49,
        86,
        91,
        96,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        144,
        145,
        22,
        129,
        23,
        144,
        145,
        85,
        97,
        4,
        249,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        56,
        209,
        107,
        140,
        172,
        34,
        217,
        159,
        199,
        193,
        36,
        185,
        205,
        13,
        226,
        211,
        250,
        31,
        174,
        244,
        32,
        191,
        231,
        145,
        216,
        195,
        98,
        215,
        101,
        226,
        39,
        0,
        96,
        64,
        81,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        163,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        4,
        26,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        4,
        134,
        86,
        91,
        128,
        21,
        97,
        5,
        196,
        87,
        96,
        0,
        97,
        5,
        158,
        96,
        2,
        132,
        97,
        7,
        54,
        86,
        91,
        144,
        80,
        128,
        97,
        5,
        190,
        87,
        96,
        64,
        81,
        99,
        246,
        217,
        211,
        89,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        97,
        5,
        243,
        86,
        91,
        96,
        0,
        97,
        5,
        209,
        96,
        2,
        132,
        97,
        7,
        75,
        86,
        91,
        144,
        80,
        128,
        97,
        5,
        241,
        87,
        96,
        64,
        81,
        99,
        14,
        204,
        149,
        39,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        91,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        239,
        129,
        169,
        148,
        59,
        150,
        200,
        223,
        78,
        242,
        67,
        64,
        28,
        155,
        245,
        21,
        145,
        70,
        22,
        98,
        17,
        53,
        104,
        152,
        181,
        45,
        56,
        32,
        134,
        22,
        141,
        146,
        130,
        96,
        64,
        81,
        97,
        6,
        48,
        145,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        80,
        80,
        86,
        91,
        128,
        21,
        97,
        6,
        117,
        87,
        96,
        0,
        97,
        6,
        79,
        96,
        4,
        132,
        97,
        7,
        54,
        86,
        91,
        144,
        80,
        128,
        97,
        6,
        111,
        87,
        96,
        64,
        81,
        99,
        126,
        71,
        51,
        159,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        97,
        6,
        164,
        86,
        91,
        96,
        0,
        97,
        6,
        130,
        96,
        4,
        132,
        97,
        7,
        75,
        86,
        91,
        144,
        80,
        128,
        97,
        6,
        162,
        87,
        96,
        64,
        81,
        99,
        45,
        171,
        107,
        17,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        91,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        134,
        48,
        9,
        174,
        57,
        153,
        92,
        170,
        35,
        179,
        46,
        186,
        22,
        49,
        70,
        52,
        93,
        53,
        57,
        53,
        109,
        196,
        189,
        175,
        60,
        106,
        227,
        185,
        100,
        104,
        100,
        45,
        130,
        96,
        64,
        81,
        97,
        6,
        48,
        145,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        131,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        21,
        21,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        96,
        0,
        97,
        6,
        255,
        131,
        97,
        7,
        96,
        86,
        91,
        96,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        144,
        85,
        97,
        4,
        152,
        129,
        97,
        7,
        188,
        86,
        91,
        96,
        0,
        97,
        3,
        137,
        130,
        84,
        144,
        86,
        91,
        96,
        0,
        97,
        6,
        255,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        97,
        8,
        12,
        86,
        91,
        96,
        0,
        97,
        6,
        255,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        97,
        8,
        91,
        86,
        91,
        96,
        96,
        129,
        96,
        0,
        1,
        128,
        84,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        128,
        21,
        97,
        7,
        176,
        87,
        96,
        32,
        2,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        129,
        82,
        96,
        32,
        1,
        144,
        96,
        1,
        1,
        144,
        128,
        131,
        17,
        97,
        7,
        156,
        87,
        91,
        80,
        80,
        80,
        80,
        80,
        144,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        131,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        97,
        8,
        83,
        87,
        80,
        129,
        84,
        96,
        1,
        129,
        129,
        1,
        132,
        85,
        96,
        0,
        132,
        129,
        82,
        96,
        32,
        128,
        130,
        32,
        144,
        147,
        1,
        132,
        144,
        85,
        132,
        84,
        132,
        130,
        82,
        130,
        134,
        1,
        144,
        147,
        82,
        96,
        64,
        144,
        32,
        145,
        144,
        145,
        85,
        97,
        3,
        137,
        86,
        91,
        80,
        96,
        0,
        97,
        3,
        137,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        131,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        128,
        21,
        97,
        9,
        68,
        87,
        96,
        0,
        97,
        8,
        127,
        96,
        1,
        131,
        97,
        11,
        113,
        86,
        91,
        133,
        84,
        144,
        145,
        80,
        96,
        0,
        144,
        97,
        8,
        147,
        144,
        96,
        1,
        144,
        97,
        11,
        113,
        86,
        91,
        144,
        80,
        129,
        129,
        20,
        97,
        8,
        248,
        87,
        96,
        0,
        134,
        96,
        0,
        1,
        130,
        129,
        84,
        129,
        16,
        97,
        8,
        179,
        87,
        97,
        8,
        179,
        97,
        11,
        17,
        86,
        91,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        84,
        144,
        80,
        128,
        135,
        96,
        0,
        1,
        132,
        129,
        84,
        129,
        16,
        97,
        8,
        214,
        87,
        97,
        8,
        214,
        97,
        11,
        17,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        128,
        131,
        32,
        144,
        145,
        1,
        146,
        144,
        146,
        85,
        145,
        130,
        82,
        96,
        1,
        136,
        1,
        144,
        82,
        96,
        64,
        144,
        32,
        131,
        144,
        85,
        91,
        133,
        84,
        134,
        144,
        128,
        97,
        9,
        9,
        87,
        97,
        9,
        9,
        97,
        11,
        132,
        86,
        91,
        96,
        1,
        144,
        3,
        129,
        129,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        96,
        0,
        144,
        85,
        144,
        85,
        133,
        96,
        1,
        1,
        96,
        0,
        134,
        129,
        82,
        96,
        32,
        1,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        32,
        96,
        0,
        144,
        85,
        96,
        1,
        147,
        80,
        80,
        80,
        80,
        97,
        3,
        137,
        86,
        91,
        96,
        0,
        145,
        80,
        80,
        97,
        3,
        137,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        4,
        152,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        53,
        128,
        21,
        21,
        129,
        20,
        97,
        9,
        115,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        9,
        139,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        9,
        150,
        129,
        97,
        9,
        78,
        86,
        91,
        145,
        80,
        97,
        9,
        164,
        96,
        32,
        132,
        1,
        97,
        9,
        99,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        9,
        191,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        9,
        215,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        96,
        5,
        27,
        133,
        1,
        1,
        17,
        21,
        97,
        9,
        242,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        10,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        10,
        39,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        10,
        51,
        136,
        131,
        137,
        1,
        97,
        9,
        173,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        10,
        76,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        10,
        89,
        135,
        130,
        136,
        1,
        97,
        9,
        173,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        10,
        119,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        6,
        255,
        129,
        97,
        9,
        78,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        130,
        81,
        130,
        130,
        1,
        129,
        144,
        82,
        96,
        0,
        145,
        144,
        132,
        130,
        1,
        144,
        96,
        64,
        133,
        1,
        144,
        132,
        91,
        129,
        129,
        16,
        21,
        97,
        10,
        195,
        87,
        131,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        131,
        82,
        146,
        132,
        1,
        146,
        145,
        132,
        1,
        145,
        96,
        1,
        1,
        97,
        10,
        158,
        86,
        91,
        80,
        144,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        10,
        226,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        10,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        11,
        5,
        133,
        130,
        134,
        1,
        97,
        9,
        173,
        86,
        91,
        144,
        150,
        144,
        149,
        80,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        11,
        57,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        6,
        255,
        130,
        97,
        9,
        99,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        11,
        106,
        87,
        97,
        11,
        106,
        97,
        11,
        66,
        86,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        91,
        129,
        129,
        3,
        129,
        129,
        17,
        21,
        97,
        3,
        137,
        87,
        97,
        3,
        137,
        97,
        11,
        66,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        49,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        149,
        121,
        85,
        183,
        178,
        188,
        63,
        252,
        246,
        99,
        46,
        167,
        33,
        93,
        198,
        118,
        3,
        71,
        111,
        167,
        229,
        37,
        11,
        8,
        167,
        169,
        170,
        219,
        38,
        127,
        249,
        192,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static FLOODREGISTRY_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        245,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        121,
        186,
        80,
        151,
        17,
        97,
        0,
        151,
        87,
        128,
        99,
        181,
        175,
        9,
        15,
        17,
        97,
        0,
        102,
        87,
        128,
        99,
        181,
        175,
        9,
        15,
        20,
        97,
        1,
        233,
        87,
        128,
        99,
        223,
        220,
        73,
        98,
        20,
        97,
        1,
        252,
        87,
        128,
        99,
        227,
        12,
        57,
        120,
        20,
        97,
        2,
        18,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        2,
        35,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        121,
        186,
        80,
        151,
        20,
        97,
        1,
        141,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        1,
        149,
        87,
        128,
        99,
        149,
        99,
        184,
        52,
        20,
        97,
        1,
        186,
        87,
        128,
        99,
        173,
        92,
        70,
        72,
        20,
        97,
        1,
        194,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        75,
        187,
        216,
        70,
        17,
        97,
        0,
        211,
        87,
        128,
        99,
        75,
        187,
        216,
        70,
        20,
        97,
        1,
        53,
        87,
        128,
        99,
        94,
        23,
        98,
        160,
        20,
        97,
        1,
        93,
        87,
        128,
        99,
        95,
        186,
        41,
        143,
        20,
        97,
        1,
        114,
        87,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        1,
        133,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        15,
        251,
        29,
        139,
        20,
        97,
        0,
        250,
        87,
        128,
        99,
        35,
        132,
        252,
        116,
        20,
        97,
        1,
        15,
        87,
        128,
        99,
        57,
        6,
        60,
        99,
        20,
        97,
        1,
        34,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        1,
        13,
        97,
        1,
        8,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        97,
        2,
        54,
        86,
        91,
        0,
        91,
        97,
        1,
        13,
        97,
        1,
        29,
        54,
        96,
        4,
        97,
        9,
        120,
        86,
        91,
        97,
        2,
        119,
        86,
        91,
        97,
        1,
        13,
        97,
        1,
        48,
        54,
        96,
        4,
        97,
        9,
        249,
        86,
        91,
        97,
        2,
        137,
        86,
        91,
        97,
        1,
        72,
        97,
        1,
        67,
        54,
        96,
        4,
        97,
        10,
        101,
        86,
        91,
        97,
        3,
        124,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        1,
        101,
        97,
        3,
        143,
        86,
        91,
        96,
        64,
        81,
        97,
        1,
        84,
        145,
        144,
        97,
        10,
        130,
        86,
        91,
        97,
        1,
        72,
        97,
        1,
        128,
        54,
        96,
        4,
        97,
        10,
        207,
        86,
        91,
        97,
        3,
        160,
        86,
        91,
        97,
        1,
        13,
        97,
        4,
        8,
        86,
        91,
        97,
        1,
        13,
        97,
        4,
        28,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        84,
        86,
        91,
        97,
        1,
        101,
        97,
        4,
        155,
        86,
        91,
        97,
        1,
        162,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        72,
        97,
        1,
        247,
        54,
        96,
        4,
        97,
        10,
        101,
        86,
        91,
        97,
        4,
        167,
        86,
        91,
        97,
        2,
        4,
        97,
        4,
        180,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        84,
        86,
        91,
        96,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        1,
        162,
        86,
        91,
        97,
        1,
        13,
        97,
        2,
        49,
        54,
        96,
        4,
        97,
        10,
        101,
        86,
        91,
        97,
        4,
        192,
        86,
        91,
        97,
        2,
        62,
        97,
        5,
        49,
        86,
        91,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        59,
        96,
        0,
        3,
        97,
        2,
        105,
        87,
        96,
        64,
        81,
        99,
        21,
        100,
        184,
        69,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        2,
        115,
        130,
        130,
        97,
        5,
        139,
        86,
        91,
        80,
        80,
        86,
        91,
        97,
        2,
        127,
        97,
        5,
        49,
        86,
        91,
        97,
        2,
        115,
        130,
        130,
        97,
        6,
        60,
        86,
        91,
        97,
        2,
        145,
        97,
        5,
        49,
        86,
        91,
        130,
        129,
        20,
        97,
        2,
        177,
        87,
        96,
        64,
        81,
        99,
        4,
        106,
        65,
        179,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        3,
        117,
        87,
        132,
        132,
        130,
        129,
        129,
        16,
        97,
        2,
        206,
        87,
        97,
        2,
        206,
        97,
        11,
        17,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        2,
        227,
        145,
        144,
        97,
        10,
        101,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        59,
        96,
        0,
        3,
        97,
        3,
        13,
        87,
        96,
        64,
        81,
        99,
        21,
        100,
        184,
        69,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        3,
        99,
        133,
        133,
        131,
        129,
        129,
        16,
        97,
        3,
        34,
        87,
        97,
        3,
        34,
        97,
        11,
        17,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        3,
        55,
        145,
        144,
        97,
        10,
        101,
        86,
        91,
        132,
        132,
        132,
        129,
        129,
        16,
        97,
        3,
        73,
        87,
        97,
        3,
        73,
        97,
        11,
        17,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        3,
        94,
        145,
        144,
        97,
        11,
        39,
        86,
        91,
        97,
        5,
        139,
        86,
        91,
        128,
        97,
        3,
        109,
        129,
        97,
        11,
        88,
        86,
        91,
        145,
        80,
        80,
        97,
        2,
        180,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        3,
        137,
        96,
        4,
        131,
        97,
        6,
        225,
        86,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        96,
        97,
        3,
        155,
        96,
        2,
        97,
        7,
        6,
        86,
        91,
        144,
        80,
        144,
        86,
        91,
        96,
        0,
        128,
        91,
        130,
        129,
        16,
        21,
        97,
        3,
        254,
        87,
        97,
        3,
        222,
        132,
        132,
        131,
        129,
        129,
        16,
        97,
        3,
        193,
        87,
        97,
        3,
        193,
        97,
        11,
        17,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        3,
        214,
        145,
        144,
        97,
        10,
        101,
        86,
        91,
        96,
        2,
        144,
        97,
        6,
        225,
        86,
        91,
        97,
        3,
        236,
        87,
        96,
        0,
        145,
        80,
        80,
        97,
        3,
        137,
        86,
        91,
        128,
        97,
        3,
        246,
        129,
        97,
        11,
        88,
        86,
        91,
        145,
        80,
        80,
        97,
        3,
        164,
        86,
        91,
        80,
        96,
        1,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        97,
        4,
        16,
        97,
        5,
        49,
        86,
        91,
        97,
        4,
        26,
        96,
        0,
        97,
        7,
        19,
        86,
        91,
        86,
        91,
        96,
        1,
        84,
        51,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        20,
        97,
        4,
        143,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        41,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        50,
        83,
        116,
        101,
        112,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        96,
        68,
        130,
        1,
        82,
        104,
        55,
        50,
        187,
        144,
        55,
        187,
        183,
        50,
        185,
        96,
        185,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        4,
        152,
        129,
        97,
        7,
        19,
        86,
        91,
        80,
        86,
        91,
        96,
        96,
        97,
        3,
        155,
        96,
        4,
        97,
        7,
        6,
        86,
        91,
        96,
        0,
        97,
        3,
        137,
        96,
        2,
        131,
        97,
        6,
        225,
        86,
        91,
        96,
        0,
        97,
        3,
        155,
        96,
        2,
        97,
        7,
        44,
        86,
        91,
        97,
        4,
        200,
        97,
        5,
        49,
        86,
        91,
        96,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        144,
        145,
        22,
        129,
        23,
        144,
        145,
        85,
        97,
        4,
        249,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        56,
        209,
        107,
        140,
        172,
        34,
        217,
        159,
        199,
        193,
        36,
        185,
        205,
        13,
        226,
        211,
        250,
        31,
        174,
        244,
        32,
        191,
        231,
        145,
        216,
        195,
        98,
        215,
        101,
        226,
        39,
        0,
        96,
        64,
        81,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        163,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        4,
        26,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        4,
        134,
        86,
        91,
        128,
        21,
        97,
        5,
        196,
        87,
        96,
        0,
        97,
        5,
        158,
        96,
        2,
        132,
        97,
        7,
        54,
        86,
        91,
        144,
        80,
        128,
        97,
        5,
        190,
        87,
        96,
        64,
        81,
        99,
        246,
        217,
        211,
        89,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        97,
        5,
        243,
        86,
        91,
        96,
        0,
        97,
        5,
        209,
        96,
        2,
        132,
        97,
        7,
        75,
        86,
        91,
        144,
        80,
        128,
        97,
        5,
        241,
        87,
        96,
        64,
        81,
        99,
        14,
        204,
        149,
        39,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        91,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        239,
        129,
        169,
        148,
        59,
        150,
        200,
        223,
        78,
        242,
        67,
        64,
        28,
        155,
        245,
        21,
        145,
        70,
        22,
        98,
        17,
        53,
        104,
        152,
        181,
        45,
        56,
        32,
        134,
        22,
        141,
        146,
        130,
        96,
        64,
        81,
        97,
        6,
        48,
        145,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        80,
        80,
        86,
        91,
        128,
        21,
        97,
        6,
        117,
        87,
        96,
        0,
        97,
        6,
        79,
        96,
        4,
        132,
        97,
        7,
        54,
        86,
        91,
        144,
        80,
        128,
        97,
        6,
        111,
        87,
        96,
        64,
        81,
        99,
        126,
        71,
        51,
        159,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        97,
        6,
        164,
        86,
        91,
        96,
        0,
        97,
        6,
        130,
        96,
        4,
        132,
        97,
        7,
        75,
        86,
        91,
        144,
        80,
        128,
        97,
        6,
        162,
        87,
        96,
        64,
        81,
        99,
        45,
        171,
        107,
        17,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        91,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        134,
        48,
        9,
        174,
        57,
        153,
        92,
        170,
        35,
        179,
        46,
        186,
        22,
        49,
        70,
        52,
        93,
        53,
        57,
        53,
        109,
        196,
        189,
        175,
        60,
        106,
        227,
        185,
        100,
        104,
        100,
        45,
        130,
        96,
        64,
        81,
        97,
        6,
        48,
        145,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        1,
        131,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        21,
        21,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        96,
        0,
        97,
        6,
        255,
        131,
        97,
        7,
        96,
        86,
        91,
        96,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        144,
        85,
        97,
        4,
        152,
        129,
        97,
        7,
        188,
        86,
        91,
        96,
        0,
        97,
        3,
        137,
        130,
        84,
        144,
        86,
        91,
        96,
        0,
        97,
        6,
        255,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        97,
        8,
        12,
        86,
        91,
        96,
        0,
        97,
        6,
        255,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        97,
        8,
        91,
        86,
        91,
        96,
        96,
        129,
        96,
        0,
        1,
        128,
        84,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        128,
        21,
        97,
        7,
        176,
        87,
        96,
        32,
        2,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        129,
        82,
        96,
        32,
        1,
        144,
        96,
        1,
        1,
        144,
        128,
        131,
        17,
        97,
        7,
        156,
        87,
        91,
        80,
        80,
        80,
        80,
        80,
        144,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        131,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        97,
        8,
        83,
        87,
        80,
        129,
        84,
        96,
        1,
        129,
        129,
        1,
        132,
        85,
        96,
        0,
        132,
        129,
        82,
        96,
        32,
        128,
        130,
        32,
        144,
        147,
        1,
        132,
        144,
        85,
        132,
        84,
        132,
        130,
        82,
        130,
        134,
        1,
        144,
        147,
        82,
        96,
        64,
        144,
        32,
        145,
        144,
        145,
        85,
        97,
        3,
        137,
        86,
        91,
        80,
        96,
        0,
        97,
        3,
        137,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        131,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        128,
        21,
        97,
        9,
        68,
        87,
        96,
        0,
        97,
        8,
        127,
        96,
        1,
        131,
        97,
        11,
        113,
        86,
        91,
        133,
        84,
        144,
        145,
        80,
        96,
        0,
        144,
        97,
        8,
        147,
        144,
        96,
        1,
        144,
        97,
        11,
        113,
        86,
        91,
        144,
        80,
        129,
        129,
        20,
        97,
        8,
        248,
        87,
        96,
        0,
        134,
        96,
        0,
        1,
        130,
        129,
        84,
        129,
        16,
        97,
        8,
        179,
        87,
        97,
        8,
        179,
        97,
        11,
        17,
        86,
        91,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        84,
        144,
        80,
        128,
        135,
        96,
        0,
        1,
        132,
        129,
        84,
        129,
        16,
        97,
        8,
        214,
        87,
        97,
        8,
        214,
        97,
        11,
        17,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        128,
        131,
        32,
        144,
        145,
        1,
        146,
        144,
        146,
        85,
        145,
        130,
        82,
        96,
        1,
        136,
        1,
        144,
        82,
        96,
        64,
        144,
        32,
        131,
        144,
        85,
        91,
        133,
        84,
        134,
        144,
        128,
        97,
        9,
        9,
        87,
        97,
        9,
        9,
        97,
        11,
        132,
        86,
        91,
        96,
        1,
        144,
        3,
        129,
        129,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        96,
        0,
        144,
        85,
        144,
        85,
        133,
        96,
        1,
        1,
        96,
        0,
        134,
        129,
        82,
        96,
        32,
        1,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        32,
        96,
        0,
        144,
        85,
        96,
        1,
        147,
        80,
        80,
        80,
        80,
        97,
        3,
        137,
        86,
        91,
        96,
        0,
        145,
        80,
        80,
        97,
        3,
        137,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        4,
        152,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        53,
        128,
        21,
        21,
        129,
        20,
        97,
        9,
        115,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        9,
        139,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        9,
        150,
        129,
        97,
        9,
        78,
        86,
        91,
        145,
        80,
        97,
        9,
        164,
        96,
        32,
        132,
        1,
        97,
        9,
        99,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        9,
        191,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        9,
        215,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        96,
        5,
        27,
        133,
        1,
        1,
        17,
        21,
        97,
        9,
        242,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        10,
        15,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        10,
        39,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        10,
        51,
        136,
        131,
        137,
        1,
        97,
        9,
        173,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        10,
        76,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        10,
        89,
        135,
        130,
        136,
        1,
        97,
        9,
        173,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        10,
        119,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        6,
        255,
        129,
        97,
        9,
        78,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        130,
        81,
        130,
        130,
        1,
        129,
        144,
        82,
        96,
        0,
        145,
        144,
        132,
        130,
        1,
        144,
        96,
        64,
        133,
        1,
        144,
        132,
        91,
        129,
        129,
        16,
        21,
        97,
        10,
        195,
        87,
        131,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        131,
        82,
        146,
        132,
        1,
        146,
        145,
        132,
        1,
        145,
        96,
        1,
        1,
        97,
        10,
        158,
        86,
        91,
        80,
        144,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        10,
        226,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        10,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        11,
        5,
        133,
        130,
        134,
        1,
        97,
        9,
        173,
        86,
        91,
        144,
        150,
        144,
        149,
        80,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        11,
        57,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        6,
        255,
        130,
        97,
        9,
        99,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        11,
        106,
        87,
        97,
        11,
        106,
        97,
        11,
        66,
        86,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        91,
        129,
        129,
        3,
        129,
        129,
        17,
        21,
        97,
        3,
        137,
        87,
        97,
        3,
        137,
        97,
        11,
        66,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        49,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        149,
        121,
        85,
        183,
        178,
        188,
        63,
        252,
        246,
        99,
        46,
        167,
        33,
        93,
        198,
        118,
        3,
        71,
        111,
        167,
        229,
        37,
        11,
        8,
        167,
        169,
        170,
        219,
        38,
        127,
        249,
        192,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        19,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static FLOODREGISTRY_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct FloodRegistry<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for FloodRegistry<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for FloodRegistry<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for FloodRegistry<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for FloodRegistry<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(FloodRegistry)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> FloodRegistry<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    FLOODREGISTRY_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                FLOODREGISTRY_ABI.clone(),
                FLOODREGISTRY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `WETH` (0xad5c4648) function
        pub fn weth(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([173, 92, 70, 72], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `acceptOwnership` (0x79ba5097) function
        pub fn accept_ownership(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([121, 186, 80, 151], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `areTokensWhitelisted` (0x5fba298f) function
        pub fn are_tokens_whitelisted(
            &self,
            tokens: ::std::vec::Vec<::ethers::core::types::Address>,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([95, 186, 41, 143], tokens)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `batchWhitelistTokens` (0x39063c63) function
        pub fn batch_whitelist_tokens(
            &self,
            tokens: ::std::vec::Vec<::ethers::core::types::Address>,
            enabled: ::std::vec::Vec<bool>,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([57, 6, 60, 99], (tokens, enabled))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isRelayerWhitelisted` (0x4bbbd846) function
        pub fn is_relayer_whitelisted(
            &self,
            relayer: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([75, 187, 216, 70], relayer)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isTokenWhitelisted` (0xb5af090f) function
        pub fn is_token_whitelisted(
            &self,
            token: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([181, 175, 9, 15], token)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `pendingOwner` (0xe30c3978) function
        pub fn pending_owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([227, 12, 57, 120], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `renounceOwnership` (0x715018a6) function
        pub fn renounce_ownership(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `transferOwnership` (0xf2fde38b) function
        pub fn transfer_ownership(
            &self,
            new_owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `whitelistRelayer` (0x2384fc74) function
        pub fn whitelist_relayer(
            &self,
            relayer: ::ethers::core::types::Address,
            enabled: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 132, 252, 116], (relayer, enabled))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `whitelistToken` (0x0ffb1d8b) function
        pub fn whitelist_token(
            &self,
            token: ::ethers::core::types::Address,
            enabled: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([15, 251, 29, 139], (token, enabled))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `whitelistedRelayers` (0x9563b834) function
        pub fn whitelisted_relayers(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::Address>,
        > {
            self.0
                .method_hash([149, 99, 184, 52], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `whitelistedTokens` (0x5e1762a0) function
        pub fn whitelisted_tokens(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::Address>,
        > {
            self.0
                .method_hash([94, 23, 98, 160], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `whitelistedTokensCount` (0xdfdc4962) function
        pub fn whitelisted_tokens_count(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([223, 220, 73, 98], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `OwnershipTransferStarted` event
        pub fn ownership_transfer_started_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            OwnershipTransferStartedFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `OwnershipTransferred` event
        pub fn ownership_transferred_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            OwnershipTransferredFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `RelayerWhitelisted` event
        pub fn relayer_whitelisted_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            RelayerWhitelistedFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `TokenWhitelisted` event
        pub fn token_whitelisted_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            TokenWhitelistedFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            FloodRegistryEvents,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for FloodRegistry<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `FloodRegistry__InvalidInputLength` with signature `FloodRegistry__InvalidInputLength()` and selector `0x23520d98`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "FloodRegistry__InvalidInputLength",
        abi = "FloodRegistry__InvalidInputLength()"
    )]
    pub struct FloodRegistry__InvalidInputLength;
    ///Custom Error type `FloodRegistry__InvalidToken` with signature `FloodRegistry__InvalidToken()` and selector `0x5592e114`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "FloodRegistry__InvalidToken",
        abi = "FloodRegistry__InvalidToken()"
    )]
    pub struct FloodRegistry__InvalidToken;
    ///Custom Error type `FloodRegistry__RelayerAlreadyWhitelisted` with signature `FloodRegistry__RelayerAlreadyWhitelisted()` and selector `0x7e47339f`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "FloodRegistry__RelayerAlreadyWhitelisted",
        abi = "FloodRegistry__RelayerAlreadyWhitelisted()"
    )]
    pub struct FloodRegistry__RelayerAlreadyWhitelisted;
    ///Custom Error type `FloodRegistry__RelayerNotWhitelisted` with signature `FloodRegistry__RelayerNotWhitelisted()` and selector `0xb6adac44`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "FloodRegistry__RelayerNotWhitelisted",
        abi = "FloodRegistry__RelayerNotWhitelisted()"
    )]
    pub struct FloodRegistry__RelayerNotWhitelisted;
    ///Custom Error type `FloodRegistry__TokenAlreadyWhitelisted` with signature `FloodRegistry__TokenAlreadyWhitelisted()` and selector `0xf6d9d359`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "FloodRegistry__TokenAlreadyWhitelisted",
        abi = "FloodRegistry__TokenAlreadyWhitelisted()"
    )]
    pub struct FloodRegistry__TokenAlreadyWhitelisted;
    ///Custom Error type `FloodRegistry__TokenNotWhitelisted` with signature `FloodRegistry__TokenNotWhitelisted()` and selector `0x0ecc9527`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(
        name = "FloodRegistry__TokenNotWhitelisted",
        abi = "FloodRegistry__TokenNotWhitelisted()"
    )]
    pub struct FloodRegistry__TokenNotWhitelisted;
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum FloodRegistryErrors {
        FloodRegistry__InvalidInputLength(FloodRegistry__InvalidInputLength),
        FloodRegistry__InvalidToken(FloodRegistry__InvalidToken),
        FloodRegistry__RelayerAlreadyWhitelisted(
            FloodRegistry__RelayerAlreadyWhitelisted,
        ),
        FloodRegistry__RelayerNotWhitelisted(FloodRegistry__RelayerNotWhitelisted),
        FloodRegistry__TokenAlreadyWhitelisted(FloodRegistry__TokenAlreadyWhitelisted),
        FloodRegistry__TokenNotWhitelisted(FloodRegistry__TokenNotWhitelisted),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for FloodRegistryErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded)
                = <FloodRegistry__InvalidInputLength as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::FloodRegistry__InvalidInputLength(decoded));
            }
            if let Ok(decoded)
                = <FloodRegistry__InvalidToken as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::FloodRegistry__InvalidToken(decoded));
            }
            if let Ok(decoded)
                = <FloodRegistry__RelayerAlreadyWhitelisted as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::FloodRegistry__RelayerAlreadyWhitelisted(decoded));
            }
            if let Ok(decoded)
                = <FloodRegistry__RelayerNotWhitelisted as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::FloodRegistry__RelayerNotWhitelisted(decoded));
            }
            if let Ok(decoded)
                = <FloodRegistry__TokenAlreadyWhitelisted as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::FloodRegistry__TokenAlreadyWhitelisted(decoded));
            }
            if let Ok(decoded)
                = <FloodRegistry__TokenNotWhitelisted as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::FloodRegistry__TokenNotWhitelisted(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for FloodRegistryErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::FloodRegistry__InvalidInputLength(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::FloodRegistry__InvalidToken(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::FloodRegistry__RelayerAlreadyWhitelisted(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::FloodRegistry__RelayerNotWhitelisted(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::FloodRegistry__TokenAlreadyWhitelisted(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::FloodRegistry__TokenNotWhitelisted(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for FloodRegistryErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <FloodRegistry__InvalidInputLength as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <FloodRegistry__InvalidToken as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <FloodRegistry__RelayerAlreadyWhitelisted as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <FloodRegistry__RelayerNotWhitelisted as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <FloodRegistry__TokenAlreadyWhitelisted as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <FloodRegistry__TokenNotWhitelisted as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for FloodRegistryErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::FloodRegistry__InvalidInputLength(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::FloodRegistry__InvalidToken(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::FloodRegistry__RelayerAlreadyWhitelisted(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::FloodRegistry__RelayerNotWhitelisted(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::FloodRegistry__TokenAlreadyWhitelisted(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::FloodRegistry__TokenNotWhitelisted(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for FloodRegistryErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<FloodRegistry__InvalidInputLength>
    for FloodRegistryErrors {
        fn from(value: FloodRegistry__InvalidInputLength) -> Self {
            Self::FloodRegistry__InvalidInputLength(value)
        }
    }
    impl ::core::convert::From<FloodRegistry__InvalidToken> for FloodRegistryErrors {
        fn from(value: FloodRegistry__InvalidToken) -> Self {
            Self::FloodRegistry__InvalidToken(value)
        }
    }
    impl ::core::convert::From<FloodRegistry__RelayerAlreadyWhitelisted>
    for FloodRegistryErrors {
        fn from(value: FloodRegistry__RelayerAlreadyWhitelisted) -> Self {
            Self::FloodRegistry__RelayerAlreadyWhitelisted(value)
        }
    }
    impl ::core::convert::From<FloodRegistry__RelayerNotWhitelisted>
    for FloodRegistryErrors {
        fn from(value: FloodRegistry__RelayerNotWhitelisted) -> Self {
            Self::FloodRegistry__RelayerNotWhitelisted(value)
        }
    }
    impl ::core::convert::From<FloodRegistry__TokenAlreadyWhitelisted>
    for FloodRegistryErrors {
        fn from(value: FloodRegistry__TokenAlreadyWhitelisted) -> Self {
            Self::FloodRegistry__TokenAlreadyWhitelisted(value)
        }
    }
    impl ::core::convert::From<FloodRegistry__TokenNotWhitelisted>
    for FloodRegistryErrors {
        fn from(value: FloodRegistry__TokenNotWhitelisted) -> Self {
            Self::FloodRegistry__TokenNotWhitelisted(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "OwnershipTransferStarted",
        abi = "OwnershipTransferStarted(address,address)"
    )]
    pub struct OwnershipTransferStartedFilter {
        #[ethevent(indexed)]
        pub previous_owner: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "RelayerWhitelisted", abi = "RelayerWhitelisted(address,bool)")]
    pub struct RelayerWhitelistedFilter {
        #[ethevent(indexed)]
        pub relayer: ::ethers::core::types::Address,
        pub whitelisted: bool,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "TokenWhitelisted", abi = "TokenWhitelisted(address,bool)")]
    pub struct TokenWhitelistedFilter {
        #[ethevent(indexed)]
        pub token: ::ethers::core::types::Address,
        pub whitelisted: bool,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum FloodRegistryEvents {
        OwnershipTransferStartedFilter(OwnershipTransferStartedFilter),
        OwnershipTransferredFilter(OwnershipTransferredFilter),
        RelayerWhitelistedFilter(RelayerWhitelistedFilter),
        TokenWhitelistedFilter(TokenWhitelistedFilter),
    }
    impl ::ethers::contract::EthLogDecode for FloodRegistryEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = OwnershipTransferStartedFilter::decode_log(log) {
                return Ok(FloodRegistryEvents::OwnershipTransferStartedFilter(decoded));
            }
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(FloodRegistryEvents::OwnershipTransferredFilter(decoded));
            }
            if let Ok(decoded) = RelayerWhitelistedFilter::decode_log(log) {
                return Ok(FloodRegistryEvents::RelayerWhitelistedFilter(decoded));
            }
            if let Ok(decoded) = TokenWhitelistedFilter::decode_log(log) {
                return Ok(FloodRegistryEvents::TokenWhitelistedFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for FloodRegistryEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::OwnershipTransferStartedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::OwnershipTransferredFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::RelayerWhitelistedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::TokenWhitelistedFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<OwnershipTransferStartedFilter> for FloodRegistryEvents {
        fn from(value: OwnershipTransferStartedFilter) -> Self {
            Self::OwnershipTransferStartedFilter(value)
        }
    }
    impl ::core::convert::From<OwnershipTransferredFilter> for FloodRegistryEvents {
        fn from(value: OwnershipTransferredFilter) -> Self {
            Self::OwnershipTransferredFilter(value)
        }
    }
    impl ::core::convert::From<RelayerWhitelistedFilter> for FloodRegistryEvents {
        fn from(value: RelayerWhitelistedFilter) -> Self {
            Self::RelayerWhitelistedFilter(value)
        }
    }
    impl ::core::convert::From<TokenWhitelistedFilter> for FloodRegistryEvents {
        fn from(value: TokenWhitelistedFilter) -> Self {
            Self::TokenWhitelistedFilter(value)
        }
    }
    ///Container type for all input parameters for the `WETH` function with signature `WETH()` and selector `0xad5c4648`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "WETH", abi = "WETH()")]
    pub struct WethCall;
    ///Container type for all input parameters for the `acceptOwnership` function with signature `acceptOwnership()` and selector `0x79ba5097`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "acceptOwnership", abi = "acceptOwnership()")]
    pub struct AcceptOwnershipCall;
    ///Container type for all input parameters for the `areTokensWhitelisted` function with signature `areTokensWhitelisted(address[])` and selector `0x5fba298f`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "areTokensWhitelisted", abi = "areTokensWhitelisted(address[])")]
    pub struct AreTokensWhitelistedCall {
        pub tokens: ::std::vec::Vec<::ethers::core::types::Address>,
    }
    ///Container type for all input parameters for the `batchWhitelistTokens` function with signature `batchWhitelistTokens(address[],bool[])` and selector `0x39063c63`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "batchWhitelistTokens",
        abi = "batchWhitelistTokens(address[],bool[])"
    )]
    pub struct BatchWhitelistTokensCall {
        pub tokens: ::std::vec::Vec<::ethers::core::types::Address>,
        pub enabled: ::std::vec::Vec<bool>,
    }
    ///Container type for all input parameters for the `isRelayerWhitelisted` function with signature `isRelayerWhitelisted(address)` and selector `0x4bbbd846`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "isRelayerWhitelisted", abi = "isRelayerWhitelisted(address)")]
    pub struct IsRelayerWhitelistedCall {
        pub relayer: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `isTokenWhitelisted` function with signature `isTokenWhitelisted(address)` and selector `0xb5af090f`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "isTokenWhitelisted", abi = "isTokenWhitelisted(address)")]
    pub struct IsTokenWhitelistedCall {
        pub token: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `pendingOwner` function with signature `pendingOwner()` and selector `0xe30c3978`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "pendingOwner", abi = "pendingOwner()")]
    pub struct PendingOwnerCall;
    ///Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `0x715018a6`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    ///Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `0xf2fde38b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `whitelistRelayer` function with signature `whitelistRelayer(address,bool)` and selector `0x2384fc74`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "whitelistRelayer", abi = "whitelistRelayer(address,bool)")]
    pub struct WhitelistRelayerCall {
        pub relayer: ::ethers::core::types::Address,
        pub enabled: bool,
    }
    ///Container type for all input parameters for the `whitelistToken` function with signature `whitelistToken(address,bool)` and selector `0x0ffb1d8b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "whitelistToken", abi = "whitelistToken(address,bool)")]
    pub struct WhitelistTokenCall {
        pub token: ::ethers::core::types::Address,
        pub enabled: bool,
    }
    ///Container type for all input parameters for the `whitelistedRelayers` function with signature `whitelistedRelayers()` and selector `0x9563b834`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "whitelistedRelayers", abi = "whitelistedRelayers()")]
    pub struct WhitelistedRelayersCall;
    ///Container type for all input parameters for the `whitelistedTokens` function with signature `whitelistedTokens()` and selector `0x5e1762a0`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "whitelistedTokens", abi = "whitelistedTokens()")]
    pub struct WhitelistedTokensCall;
    ///Container type for all input parameters for the `whitelistedTokensCount` function with signature `whitelistedTokensCount()` and selector `0xdfdc4962`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "whitelistedTokensCount", abi = "whitelistedTokensCount()")]
    pub struct WhitelistedTokensCountCall;
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum FloodRegistryCalls {
        Weth(WethCall),
        AcceptOwnership(AcceptOwnershipCall),
        AreTokensWhitelisted(AreTokensWhitelistedCall),
        BatchWhitelistTokens(BatchWhitelistTokensCall),
        IsRelayerWhitelisted(IsRelayerWhitelistedCall),
        IsTokenWhitelisted(IsTokenWhitelistedCall),
        Owner(OwnerCall),
        PendingOwner(PendingOwnerCall),
        RenounceOwnership(RenounceOwnershipCall),
        TransferOwnership(TransferOwnershipCall),
        WhitelistRelayer(WhitelistRelayerCall),
        WhitelistToken(WhitelistTokenCall),
        WhitelistedRelayers(WhitelistedRelayersCall),
        WhitelistedTokens(WhitelistedTokensCall),
        WhitelistedTokensCount(WhitelistedTokensCountCall),
    }
    impl ::ethers::core::abi::AbiDecode for FloodRegistryCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <WethCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Weth(decoded));
            }
            if let Ok(decoded)
                = <AcceptOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::AcceptOwnership(decoded));
            }
            if let Ok(decoded)
                = <AreTokensWhitelistedCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::AreTokensWhitelisted(decoded));
            }
            if let Ok(decoded)
                = <BatchWhitelistTokensCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::BatchWhitelistTokens(decoded));
            }
            if let Ok(decoded)
                = <IsRelayerWhitelistedCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::IsRelayerWhitelisted(decoded));
            }
            if let Ok(decoded)
                = <IsTokenWhitelistedCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::IsTokenWhitelisted(decoded));
            }
            if let Ok(decoded)
                = <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Owner(decoded));
            }
            if let Ok(decoded)
                = <PendingOwnerCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::PendingOwner(decoded));
            }
            if let Ok(decoded)
                = <RenounceOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RenounceOwnership(decoded));
            }
            if let Ok(decoded)
                = <TransferOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::TransferOwnership(decoded));
            }
            if let Ok(decoded)
                = <WhitelistRelayerCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::WhitelistRelayer(decoded));
            }
            if let Ok(decoded)
                = <WhitelistTokenCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::WhitelistToken(decoded));
            }
            if let Ok(decoded)
                = <WhitelistedRelayersCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::WhitelistedRelayers(decoded));
            }
            if let Ok(decoded)
                = <WhitelistedTokensCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::WhitelistedTokens(decoded));
            }
            if let Ok(decoded)
                = <WhitelistedTokensCountCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::WhitelistedTokensCount(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for FloodRegistryCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Weth(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::AcceptOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::AreTokensWhitelisted(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::BatchWhitelistTokens(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::IsRelayerWhitelisted(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::IsTokenWhitelisted(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Owner(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::PendingOwner(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RenounceOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::TransferOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::WhitelistRelayer(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::WhitelistToken(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::WhitelistedRelayers(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::WhitelistedTokens(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::WhitelistedTokensCount(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for FloodRegistryCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Weth(element) => ::core::fmt::Display::fmt(element, f),
                Self::AcceptOwnership(element) => ::core::fmt::Display::fmt(element, f),
                Self::AreTokensWhitelisted(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::BatchWhitelistTokens(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::IsRelayerWhitelisted(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::IsTokenWhitelisted(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Owner(element) => ::core::fmt::Display::fmt(element, f),
                Self::PendingOwner(element) => ::core::fmt::Display::fmt(element, f),
                Self::RenounceOwnership(element) => ::core::fmt::Display::fmt(element, f),
                Self::TransferOwnership(element) => ::core::fmt::Display::fmt(element, f),
                Self::WhitelistRelayer(element) => ::core::fmt::Display::fmt(element, f),
                Self::WhitelistToken(element) => ::core::fmt::Display::fmt(element, f),
                Self::WhitelistedRelayers(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::WhitelistedTokens(element) => ::core::fmt::Display::fmt(element, f),
                Self::WhitelistedTokensCount(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<WethCall> for FloodRegistryCalls {
        fn from(value: WethCall) -> Self {
            Self::Weth(value)
        }
    }
    impl ::core::convert::From<AcceptOwnershipCall> for FloodRegistryCalls {
        fn from(value: AcceptOwnershipCall) -> Self {
            Self::AcceptOwnership(value)
        }
    }
    impl ::core::convert::From<AreTokensWhitelistedCall> for FloodRegistryCalls {
        fn from(value: AreTokensWhitelistedCall) -> Self {
            Self::AreTokensWhitelisted(value)
        }
    }
    impl ::core::convert::From<BatchWhitelistTokensCall> for FloodRegistryCalls {
        fn from(value: BatchWhitelistTokensCall) -> Self {
            Self::BatchWhitelistTokens(value)
        }
    }
    impl ::core::convert::From<IsRelayerWhitelistedCall> for FloodRegistryCalls {
        fn from(value: IsRelayerWhitelistedCall) -> Self {
            Self::IsRelayerWhitelisted(value)
        }
    }
    impl ::core::convert::From<IsTokenWhitelistedCall> for FloodRegistryCalls {
        fn from(value: IsTokenWhitelistedCall) -> Self {
            Self::IsTokenWhitelisted(value)
        }
    }
    impl ::core::convert::From<OwnerCall> for FloodRegistryCalls {
        fn from(value: OwnerCall) -> Self {
            Self::Owner(value)
        }
    }
    impl ::core::convert::From<PendingOwnerCall> for FloodRegistryCalls {
        fn from(value: PendingOwnerCall) -> Self {
            Self::PendingOwner(value)
        }
    }
    impl ::core::convert::From<RenounceOwnershipCall> for FloodRegistryCalls {
        fn from(value: RenounceOwnershipCall) -> Self {
            Self::RenounceOwnership(value)
        }
    }
    impl ::core::convert::From<TransferOwnershipCall> for FloodRegistryCalls {
        fn from(value: TransferOwnershipCall) -> Self {
            Self::TransferOwnership(value)
        }
    }
    impl ::core::convert::From<WhitelistRelayerCall> for FloodRegistryCalls {
        fn from(value: WhitelistRelayerCall) -> Self {
            Self::WhitelistRelayer(value)
        }
    }
    impl ::core::convert::From<WhitelistTokenCall> for FloodRegistryCalls {
        fn from(value: WhitelistTokenCall) -> Self {
            Self::WhitelistToken(value)
        }
    }
    impl ::core::convert::From<WhitelistedRelayersCall> for FloodRegistryCalls {
        fn from(value: WhitelistedRelayersCall) -> Self {
            Self::WhitelistedRelayers(value)
        }
    }
    impl ::core::convert::From<WhitelistedTokensCall> for FloodRegistryCalls {
        fn from(value: WhitelistedTokensCall) -> Self {
            Self::WhitelistedTokens(value)
        }
    }
    impl ::core::convert::From<WhitelistedTokensCountCall> for FloodRegistryCalls {
        fn from(value: WhitelistedTokensCountCall) -> Self {
            Self::WhitelistedTokensCount(value)
        }
    }
    ///Container type for all return fields from the `WETH` function with signature `WETH()` and selector `0xad5c4648`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct WethReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `areTokensWhitelisted` function with signature `areTokensWhitelisted(address[])` and selector `0x5fba298f`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct AreTokensWhitelistedReturn(pub bool);
    ///Container type for all return fields from the `isRelayerWhitelisted` function with signature `isRelayerWhitelisted(address)` and selector `0x4bbbd846`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct IsRelayerWhitelistedReturn(pub bool);
    ///Container type for all return fields from the `isTokenWhitelisted` function with signature `isTokenWhitelisted(address)` and selector `0xb5af090f`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct IsTokenWhitelistedReturn(pub bool);
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `pendingOwner` function with signature `pendingOwner()` and selector `0xe30c3978`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct PendingOwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `whitelistedRelayers` function with signature `whitelistedRelayers()` and selector `0x9563b834`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct WhitelistedRelayersReturn(
        pub ::std::vec::Vec<::ethers::core::types::Address>,
    );
    ///Container type for all return fields from the `whitelistedTokens` function with signature `whitelistedTokens()` and selector `0x5e1762a0`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct WhitelistedTokensReturn(
        pub ::std::vec::Vec<::ethers::core::types::Address>,
    );
    ///Container type for all return fields from the `whitelistedTokensCount` function with signature `whitelistedTokensCount()` and selector `0xdfdc4962`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct WhitelistedTokensCountReturn(pub ::ethers::core::types::U256);
}
