pub use flood_registry::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod flood_registry {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    //!FloodRegistry was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs
    use std::sync::Arc;
    use ::ethers::core::{
        abi::{Abi, Token, Detokenize, InvalidOutputType, Tokenizable},
        types::*,
    };
    use ::ethers::contract::{
        Contract, builders::{ContractCall, Event},
        Lazy,
    };
    use ::ethers::providers::Middleware;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"weth\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"FloodRegistry__InvalidInputLength\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"FloodRegistry__InvalidToken\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"FloodRegistry__TokenAlreadyWhitelisted\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"FloodRegistry__TokenNotWhitelisted\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"contract AllKnowingOracle\",\"name\":\"oracle\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OracleChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferStarted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"acceptOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"bool[]\",\"name\":\"enabled\",\"type\":\"bool[]\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"batchWhitelistTokens\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"isTokenWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"latestOracle\",\"outputs\":[{\"internalType\":\"contract AllKnowingOracle\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"contract AllKnowingOracle\",\"name\":\"oracle\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setOracle\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"whitelistToken\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"whitelistedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"whitelistedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static FLOODREGISTRY_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        160,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        97,
        11,
        103,
        56,
        3,
        128,
        97,
        11,
        103,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        97,
        0,
        47,
        145,
        97,
        0,
        192,
        86,
        91,
        97,
        0,
        56,
        51,
        97,
        0,
        73,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        96,
        128,
        82,
        97,
        0,
        240,
        86,
        91,
        96,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        144,
        85,
        97,
        0,
        109,
        129,
        97,
        0,
        112,
        96,
        32,
        144,
        129,
        27,
        97,
        4,
        194,
        23,
        144,
        28,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        0,
        210,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        0,
        233,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        128,
        81,
        97,
        10,
        92,
        97,
        1,
        11,
        96,
        0,
        57,
        96,
        0,
        97,
        1,
        122,
        1,
        82,
        97,
        10,
        92,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        207,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        122,
        219,
        249,
        115,
        17,
        97,
        0,
        140,
        87,
        128,
        99,
        181,
        175,
        9,
        15,
        17,
        97,
        0,
        102,
        87,
        128,
        99,
        181,
        175,
        9,
        15,
        20,
        97,
        1,
        156,
        87,
        128,
        99,
        223,
        220,
        73,
        98,
        20,
        97,
        1,
        191,
        87,
        128,
        99,
        227,
        12,
        57,
        120,
        20,
        97,
        1,
        213,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        1,
        230,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        122,
        219,
        249,
        115,
        20,
        97,
        1,
        81,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        1,
        100,
        87,
        128,
        99,
        173,
        92,
        70,
        72,
        20,
        97,
        1,
        117,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        15,
        251,
        29,
        139,
        20,
        97,
        0,
        212,
        87,
        128,
        99,
        46,
        174,
        79,
        96,
        20,
        97,
        0,
        233,
        87,
        128,
        99,
        57,
        6,
        60,
        99,
        20,
        97,
        1,
        25,
        87,
        128,
        99,
        94,
        23,
        98,
        160,
        20,
        97,
        1,
        44,
        87,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        1,
        65,
        87,
        128,
        99,
        121,
        186,
        80,
        151,
        20,
        97,
        1,
        73,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        231,
        97,
        0,
        226,
        54,
        96,
        4,
        97,
        8,
        70,
        86,
        91,
        97,
        1,
        249,
        86,
        91,
        0,
        91,
        96,
        4,
        84,
        97,
        0,
        252,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        231,
        97,
        1,
        39,
        54,
        96,
        4,
        97,
        8,
        199,
        86,
        91,
        97,
        2,
        58,
        86,
        91,
        97,
        1,
        52,
        97,
        3,
        45,
        86,
        91,
        96,
        64,
        81,
        97,
        1,
        16,
        145,
        144,
        97,
        9,
        51,
        86,
        91,
        97,
        0,
        231,
        97,
        3,
        62,
        86,
        91,
        97,
        0,
        231,
        97,
        3,
        82,
        86,
        91,
        97,
        0,
        231,
        97,
        1,
        95,
        54,
        96,
        4,
        97,
        9,
        128,
        86,
        91,
        97,
        3,
        209,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        0,
        252,
        86,
        91,
        97,
        0,
        252,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        97,
        1,
        175,
        97,
        1,
        170,
        54,
        96,
        4,
        97,
        9,
        128,
        86,
        91,
        97,
        4,
        35,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        16,
        86,
        91,
        97,
        1,
        199,
        97,
        4,
        69,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        16,
        86,
        91,
        96,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        0,
        252,
        86,
        91,
        97,
        0,
        231,
        97,
        1,
        244,
        54,
        96,
        4,
        97,
        9,
        128,
        86,
        91,
        97,
        4,
        81,
        86,
        91,
        97,
        2,
        1,
        97,
        5,
        18,
        86,
        91,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        59,
        96,
        0,
        3,
        97,
        2,
        44,
        87,
        96,
        64,
        81,
        99,
        21,
        100,
        184,
        69,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        2,
        54,
        130,
        130,
        97,
        5,
        108,
        86,
        91,
        80,
        80,
        86,
        91,
        97,
        2,
        66,
        97,
        5,
        18,
        86,
        91,
        130,
        129,
        20,
        97,
        2,
        98,
        87,
        96,
        64,
        81,
        99,
        4,
        106,
        65,
        179,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        3,
        38,
        87,
        132,
        132,
        130,
        129,
        129,
        16,
        97,
        2,
        127,
        87,
        97,
        2,
        127,
        97,
        9,
        157,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        2,
        148,
        145,
        144,
        97,
        9,
        128,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        59,
        96,
        0,
        3,
        97,
        2,
        190,
        87,
        96,
        64,
        81,
        99,
        21,
        100,
        184,
        69,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        3,
        20,
        133,
        133,
        131,
        129,
        129,
        16,
        97,
        2,
        211,
        87,
        97,
        2,
        211,
        97,
        9,
        157,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        2,
        232,
        145,
        144,
        97,
        9,
        128,
        86,
        91,
        132,
        132,
        132,
        129,
        129,
        16,
        97,
        2,
        250,
        87,
        97,
        2,
        250,
        97,
        9,
        157,
        86,
        91,
        144,
        80,
        96,
        32,
        2,
        1,
        96,
        32,
        129,
        1,
        144,
        97,
        3,
        15,
        145,
        144,
        97,
        9,
        179,
        86,
        91,
        97,
        5,
        108,
        86,
        91,
        128,
        97,
        3,
        30,
        129,
        97,
        9,
        228,
        86,
        91,
        145,
        80,
        80,
        97,
        2,
        101,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        97,
        3,
        57,
        96,
        2,
        97,
        6,
        29,
        86,
        91,
        144,
        80,
        144,
        86,
        91,
        97,
        3,
        70,
        97,
        5,
        18,
        86,
        91,
        97,
        3,
        80,
        96,
        0,
        97,
        6,
        49,
        86,
        91,
        86,
        91,
        96,
        1,
        84,
        51,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        20,
        97,
        3,
        197,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        41,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        50,
        83,
        116,
        101,
        112,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        96,
        68,
        130,
        1,
        82,
        104,
        55,
        50,
        187,
        144,
        55,
        187,
        183,
        50,
        185,
        96,
        185,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        3,
        206,
        129,
        97,
        6,
        49,
        86,
        91,
        80,
        86,
        91,
        97,
        3,
        217,
        97,
        5,
        18,
        86,
        91,
        96,
        4,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        144,
        129,
        23,
        144,
        145,
        85,
        96,
        64,
        81,
        127,
        14,
        5,
        174,
        117,
        232,
        185,
        38,
        85,
        44,
        246,
        252,
        215,
        68,
        209,
        159,
        66,
        37,
        97,
        227,
        206,
        209,
        228,
        38,
        134,
        135,
        48,
        133,
        39,
        2,
        219,
        228,
        24,
        144,
        96,
        0,
        144,
        162,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        96,
        0,
        144,
        129,
        82,
        96,
        3,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        21,
        21,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        3,
        57,
        96,
        2,
        97,
        6,
        74,
        86,
        91,
        97,
        4,
        89,
        97,
        5,
        18,
        86,
        91,
        96,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        144,
        145,
        22,
        129,
        23,
        144,
        145,
        85,
        97,
        4,
        138,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        144,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        56,
        209,
        107,
        140,
        172,
        34,
        217,
        159,
        199,
        193,
        36,
        185,
        205,
        13,
        226,
        211,
        250,
        31,
        174,
        244,
        32,
        191,
        231,
        145,
        216,
        195,
        98,
        215,
        101,
        226,
        39,
        0,
        96,
        64,
        81,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        163,
        80,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        0,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        51,
        20,
        97,
        3,
        80,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        3,
        188,
        86,
        91,
        128,
        21,
        97,
        5,
        165,
        87,
        96,
        0,
        97,
        5,
        127,
        96,
        2,
        132,
        97,
        6,
        84,
        86,
        91,
        144,
        80,
        128,
        97,
        5,
        159,
        87,
        96,
        64,
        81,
        99,
        246,
        217,
        211,
        89,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        97,
        5,
        212,
        86,
        91,
        96,
        0,
        97,
        5,
        178,
        96,
        2,
        132,
        97,
        6,
        105,
        86,
        91,
        144,
        80,
        128,
        97,
        5,
        210,
        87,
        96,
        64,
        81,
        99,
        14,
        204,
        149,
        39,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        91,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        239,
        129,
        169,
        148,
        59,
        150,
        200,
        223,
        78,
        242,
        67,
        64,
        28,
        155,
        245,
        21,
        145,
        70,
        22,
        98,
        17,
        53,
        104,
        152,
        181,
        45,
        56,
        32,
        134,
        22,
        141,
        146,
        130,
        96,
        64,
        81,
        97,
        6,
        17,
        145,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        80,
        80,
        86,
        91,
        96,
        96,
        96,
        0,
        97,
        6,
        42,
        131,
        97,
        6,
        126,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        22,
        144,
        85,
        97,
        3,
        206,
        129,
        97,
        4,
        194,
        86,
        91,
        96,
        0,
        97,
        4,
        63,
        130,
        84,
        144,
        86,
        91,
        96,
        0,
        97,
        6,
        42,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        97,
        6,
        218,
        86,
        91,
        96,
        0,
        97,
        6,
        42,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        132,
        22,
        97,
        7,
        41,
        86,
        91,
        96,
        96,
        129,
        96,
        0,
        1,
        128,
        84,
        128,
        96,
        32,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        128,
        21,
        97,
        6,
        206,
        87,
        96,
        32,
        2,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        129,
        82,
        96,
        32,
        1,
        144,
        96,
        1,
        1,
        144,
        128,
        131,
        17,
        97,
        6,
        186,
        87,
        91,
        80,
        80,
        80,
        80,
        80,
        144,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        131,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        97,
        7,
        33,
        87,
        80,
        129,
        84,
        96,
        1,
        129,
        129,
        1,
        132,
        85,
        96,
        0,
        132,
        129,
        82,
        96,
        32,
        128,
        130,
        32,
        144,
        147,
        1,
        132,
        144,
        85,
        132,
        84,
        132,
        130,
        82,
        130,
        134,
        1,
        144,
        147,
        82,
        96,
        64,
        144,
        32,
        145,
        144,
        145,
        85,
        97,
        4,
        63,
        86,
        91,
        80,
        96,
        0,
        97,
        4,
        63,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        1,
        131,
        1,
        96,
        32,
        82,
        96,
        64,
        129,
        32,
        84,
        128,
        21,
        97,
        8,
        18,
        87,
        96,
        0,
        97,
        7,
        77,
        96,
        1,
        131,
        97,
        9,
        253,
        86,
        91,
        133,
        84,
        144,
        145,
        80,
        96,
        0,
        144,
        97,
        7,
        97,
        144,
        96,
        1,
        144,
        97,
        9,
        253,
        86,
        91,
        144,
        80,
        129,
        129,
        20,
        97,
        7,
        198,
        87,
        96,
        0,
        134,
        96,
        0,
        1,
        130,
        129,
        84,
        129,
        16,
        97,
        7,
        129,
        87,
        97,
        7,
        129,
        97,
        9,
        157,
        86,
        91,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        84,
        144,
        80,
        128,
        135,
        96,
        0,
        1,
        132,
        129,
        84,
        129,
        16,
        97,
        7,
        164,
        87,
        97,
        7,
        164,
        97,
        9,
        157,
        86,
        91,
        96,
        0,
        145,
        130,
        82,
        96,
        32,
        128,
        131,
        32,
        144,
        145,
        1,
        146,
        144,
        146,
        85,
        145,
        130,
        82,
        96,
        1,
        136,
        1,
        144,
        82,
        96,
        64,
        144,
        32,
        131,
        144,
        85,
        91,
        133,
        84,
        134,
        144,
        128,
        97,
        7,
        215,
        87,
        97,
        7,
        215,
        97,
        10,
        16,
        86,
        91,
        96,
        1,
        144,
        3,
        129,
        129,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        1,
        96,
        0,
        144,
        85,
        144,
        85,
        133,
        96,
        1,
        1,
        96,
        0,
        134,
        129,
        82,
        96,
        32,
        1,
        144,
        129,
        82,
        96,
        32,
        1,
        96,
        0,
        32,
        96,
        0,
        144,
        85,
        96,
        1,
        147,
        80,
        80,
        80,
        80,
        97,
        4,
        63,
        86,
        91,
        96,
        0,
        145,
        80,
        80,
        97,
        4,
        63,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        3,
        206,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        53,
        128,
        21,
        21,
        129,
        20,
        97,
        8,
        65,
        87,
        96,
        0,
        128,
        253,
        91,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        8,
        89,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        97,
        8,
        100,
        129,
        97,
        8,
        28,
        86,
        91,
        145,
        80,
        97,
        8,
        114,
        96,
        32,
        132,
        1,
        97,
        8,
        49,
        86,
        91,
        144,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        8,
        141,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        8,
        165,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        96,
        5,
        27,
        133,
        1,
        1,
        17,
        21,
        97,
        8,
        192,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        8,
        221,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        8,
        245,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        9,
        1,
        136,
        131,
        137,
        1,
        97,
        8,
        123,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        9,
        26,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        9,
        39,
        135,
        130,
        136,
        1,
        97,
        8,
        123,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        130,
        81,
        130,
        130,
        1,
        129,
        144,
        82,
        96,
        0,
        145,
        144,
        132,
        130,
        1,
        144,
        96,
        64,
        133,
        1,
        144,
        132,
        91,
        129,
        129,
        16,
        21,
        97,
        9,
        116,
        87,
        131,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        131,
        82,
        146,
        132,
        1,
        146,
        145,
        132,
        1,
        145,
        96,
        1,
        1,
        97,
        9,
        79,
        86,
        91,
        80,
        144,
        150,
        149,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        9,
        146,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        6,
        42,
        129,
        97,
        8,
        28,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        9,
        197,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        6,
        42,
        130,
        97,
        8,
        49,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        9,
        246,
        87,
        97,
        9,
        246,
        97,
        9,
        206,
        86,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        91,
        129,
        129,
        3,
        129,
        129,
        17,
        21,
        97,
        4,
        63,
        87,
        97,
        4,
        63,
        97,
        9,
        206,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        49,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        221,
        80,
        229,
        198,
        31,
        233,
        36,
        205,
        107,
        243,
        30,
        172,
        98,
        8,
        53,
        214,
        94,
        45,
        232,
        112,
        185,
        181,
        133,
        144,
        165,
        242,
        44,
        148,
        199,
        69,
        51,
        126,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static FLOODREGISTRY_BYTECODE: ::ethers::contract::Lazy<::ethers::core::types::Bytes> = ethers::contract::Lazy::new(||
        {__BYTECODE.to_vec().into()}
    );
    pub struct FloodRegistry<M>(::ethers::contract::Contract<M>);
    impl<M> Clone for FloodRegistry<M> {
        fn clone(&self) -> Self {
            FloodRegistry(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for FloodRegistry<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for FloodRegistry<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(FloodRegistry)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> FloodRegistry<M> {
        /// Creates a new contract instance with the specified `ethers`
        /// client at the given `Address`. The contract derefs to a `ethers::Contract`
        /// object
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    FLOODREGISTRY_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// 1. If there are no constructor arguments, you should pass `()` as the argument.
        /// 1. The default poll duration is 7 seconds.
        /// 1. The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter,"../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                FLOODREGISTRY_ABI.clone(),
                FLOODREGISTRY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `WETH` (0xad5c4648) function
        pub fn weth(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([173, 92, 70, 72], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `acceptOwnership` (0x79ba5097) function
        pub fn accept_ownership(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([121, 186, 80, 151], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `batchWhitelistTokens` (0x39063c63) function
        pub fn batch_whitelist_tokens(
            &self,
            tokens: ::std::vec::Vec<::ethers::core::types::Address>,
            enabled: ::std::vec::Vec<bool>,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([57, 6, 60, 99], (tokens, enabled))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `isTokenWhitelisted` (0xb5af090f) function
        pub fn is_token_whitelisted(
            &self,
            token: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([181, 175, 9, 15], token)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `latestOracle` (0x2eae4f60) function
        pub fn latest_oracle(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([46, 174, 79, 96], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `pendingOwner` (0xe30c3978) function
        pub fn pending_owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([227, 12, 57, 120], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `renounceOwnership` (0x715018a6) function
        pub fn renounce_ownership(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setOracle` (0x7adbf973) function
        pub fn set_oracle(
            &self,
            oracle: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([122, 219, 249, 115], oracle)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `transferOwnership` (0xf2fde38b) function
        pub fn transfer_ownership(
            &self,
            new_owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `whitelistToken` (0x0ffb1d8b) function
        pub fn whitelist_token(
            &self,
            token: ::ethers::core::types::Address,
            enabled: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([15, 251, 29, 139], (token, enabled))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `whitelistedTokens` (0x5e1762a0) function
        pub fn whitelisted_tokens(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::Address>,
        > {
            self.0
                .method_hash([94, 23, 98, 160], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `whitelistedTokensCount` (0xdfdc4962) function
        pub fn whitelisted_tokens_count(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([223, 220, 73, 98], ())
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `OracleChanged` event
        pub fn oracle_changed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OracleChangedFilter> {
            self.0.event()
        }
        ///Gets the contract's `OwnershipTransferStarted` event
        pub fn ownership_transfer_started_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OwnershipTransferStartedFilter> {
            self.0.event()
        }
        ///Gets the contract's `OwnershipTransferred` event
        pub fn ownership_transferred_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, OwnershipTransferredFilter> {
            self.0.event()
        }
        ///Gets the contract's `TokenWhitelisted` event
        pub fn token_whitelisted_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, TokenWhitelistedFilter> {
            self.0.event()
        }
        /// Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<M, FloodRegistryEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for FloodRegistry<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `FloodRegistry__InvalidInputLength` with signature `FloodRegistry__InvalidInputLength()` and selector `0x23520d98`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(
        name = "FloodRegistry__InvalidInputLength",
        abi = "FloodRegistry__InvalidInputLength()"
    )]
    pub struct FloodRegistry__InvalidInputLength;
    ///Custom Error type `FloodRegistry__InvalidToken` with signature `FloodRegistry__InvalidToken()` and selector `0x5592e114`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(
        name = "FloodRegistry__InvalidToken",
        abi = "FloodRegistry__InvalidToken()"
    )]
    pub struct FloodRegistry__InvalidToken;
    ///Custom Error type `FloodRegistry__TokenAlreadyWhitelisted` with signature `FloodRegistry__TokenAlreadyWhitelisted()` and selector `0xf6d9d359`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(
        name = "FloodRegistry__TokenAlreadyWhitelisted",
        abi = "FloodRegistry__TokenAlreadyWhitelisted()"
    )]
    pub struct FloodRegistry__TokenAlreadyWhitelisted;
    ///Custom Error type `FloodRegistry__TokenNotWhitelisted` with signature `FloodRegistry__TokenNotWhitelisted()` and selector `0x0ecc9527`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(
        name = "FloodRegistry__TokenNotWhitelisted",
        abi = "FloodRegistry__TokenNotWhitelisted()"
    )]
    pub struct FloodRegistry__TokenNotWhitelisted;
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum FloodRegistryErrors {
        FloodRegistry__InvalidInputLength(FloodRegistry__InvalidInputLength),
        FloodRegistry__InvalidToken(FloodRegistry__InvalidToken),
        FloodRegistry__TokenAlreadyWhitelisted(FloodRegistry__TokenAlreadyWhitelisted),
        FloodRegistry__TokenNotWhitelisted(FloodRegistry__TokenNotWhitelisted),
    }
    impl ::ethers::core::abi::AbiDecode for FloodRegistryErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded)
                = <FloodRegistry__InvalidInputLength as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(
                    FloodRegistryErrors::FloodRegistry__InvalidInputLength(decoded),
                );
            }
            if let Ok(decoded)
                = <FloodRegistry__InvalidToken as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(FloodRegistryErrors::FloodRegistry__InvalidToken(decoded));
            }
            if let Ok(decoded)
                = <FloodRegistry__TokenAlreadyWhitelisted as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(
                    FloodRegistryErrors::FloodRegistry__TokenAlreadyWhitelisted(decoded),
                );
            }
            if let Ok(decoded)
                = <FloodRegistry__TokenNotWhitelisted as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(
                    FloodRegistryErrors::FloodRegistry__TokenNotWhitelisted(decoded),
                );
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for FloodRegistryErrors {
        fn encode(self) -> Vec<u8> {
            match self {
                FloodRegistryErrors::FloodRegistry__InvalidInputLength(element) => {
                    element.encode()
                }
                FloodRegistryErrors::FloodRegistry__InvalidToken(element) => {
                    element.encode()
                }
                FloodRegistryErrors::FloodRegistry__TokenAlreadyWhitelisted(element) => {
                    element.encode()
                }
                FloodRegistryErrors::FloodRegistry__TokenNotWhitelisted(element) => {
                    element.encode()
                }
            }
        }
    }
    impl ::std::fmt::Display for FloodRegistryErrors {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                FloodRegistryErrors::FloodRegistry__InvalidInputLength(element) => {
                    element.fmt(f)
                }
                FloodRegistryErrors::FloodRegistry__InvalidToken(element) => {
                    element.fmt(f)
                }
                FloodRegistryErrors::FloodRegistry__TokenAlreadyWhitelisted(element) => {
                    element.fmt(f)
                }
                FloodRegistryErrors::FloodRegistry__TokenNotWhitelisted(element) => {
                    element.fmt(f)
                }
            }
        }
    }
    impl ::std::convert::From<FloodRegistry__InvalidInputLength>
    for FloodRegistryErrors {
        fn from(var: FloodRegistry__InvalidInputLength) -> Self {
            FloodRegistryErrors::FloodRegistry__InvalidInputLength(var)
        }
    }
    impl ::std::convert::From<FloodRegistry__InvalidToken> for FloodRegistryErrors {
        fn from(var: FloodRegistry__InvalidToken) -> Self {
            FloodRegistryErrors::FloodRegistry__InvalidToken(var)
        }
    }
    impl ::std::convert::From<FloodRegistry__TokenAlreadyWhitelisted>
    for FloodRegistryErrors {
        fn from(var: FloodRegistry__TokenAlreadyWhitelisted) -> Self {
            FloodRegistryErrors::FloodRegistry__TokenAlreadyWhitelisted(var)
        }
    }
    impl ::std::convert::From<FloodRegistry__TokenNotWhitelisted>
    for FloodRegistryErrors {
        fn from(var: FloodRegistry__TokenNotWhitelisted) -> Self {
            FloodRegistryErrors::FloodRegistry__TokenNotWhitelisted(var)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "OracleChanged", abi = "OracleChanged(address)")]
    pub struct OracleChangedFilter {
        #[ethevent(indexed)]
        pub oracle: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "OwnershipTransferStarted",
        abi = "OwnershipTransferStarted(address,address)"
    )]
    pub struct OwnershipTransferStartedFilter {
        #[ethevent(indexed)]
        pub previous_owner: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "TokenWhitelisted", abi = "TokenWhitelisted(address,bool)")]
    pub struct TokenWhitelistedFilter {
        #[ethevent(indexed)]
        pub token: ::ethers::core::types::Address,
        pub whitelisted: bool,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum FloodRegistryEvents {
        OracleChangedFilter(OracleChangedFilter),
        OwnershipTransferStartedFilter(OwnershipTransferStartedFilter),
        OwnershipTransferredFilter(OwnershipTransferredFilter),
        TokenWhitelistedFilter(TokenWhitelistedFilter),
    }
    impl ::ethers::contract::EthLogDecode for FloodRegistryEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = OracleChangedFilter::decode_log(log) {
                return Ok(FloodRegistryEvents::OracleChangedFilter(decoded));
            }
            if let Ok(decoded) = OwnershipTransferStartedFilter::decode_log(log) {
                return Ok(FloodRegistryEvents::OwnershipTransferStartedFilter(decoded));
            }
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(FloodRegistryEvents::OwnershipTransferredFilter(decoded));
            }
            if let Ok(decoded) = TokenWhitelistedFilter::decode_log(log) {
                return Ok(FloodRegistryEvents::TokenWhitelistedFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for FloodRegistryEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                FloodRegistryEvents::OracleChangedFilter(element) => element.fmt(f),
                FloodRegistryEvents::OwnershipTransferStartedFilter(element) => {
                    element.fmt(f)
                }
                FloodRegistryEvents::OwnershipTransferredFilter(element) => {
                    element.fmt(f)
                }
                FloodRegistryEvents::TokenWhitelistedFilter(element) => element.fmt(f),
            }
        }
    }
    ///Container type for all input parameters for the `WETH` function with signature `WETH()` and selector `0xad5c4648`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "WETH", abi = "WETH()")]
    pub struct WethCall;
    ///Container type for all input parameters for the `acceptOwnership` function with signature `acceptOwnership()` and selector `0x79ba5097`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "acceptOwnership", abi = "acceptOwnership()")]
    pub struct AcceptOwnershipCall;
    ///Container type for all input parameters for the `batchWhitelistTokens` function with signature `batchWhitelistTokens(address[],bool[])` and selector `0x39063c63`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "batchWhitelistTokens",
        abi = "batchWhitelistTokens(address[],bool[])"
    )]
    pub struct BatchWhitelistTokensCall {
        pub tokens: ::std::vec::Vec<::ethers::core::types::Address>,
        pub enabled: ::std::vec::Vec<bool>,
    }
    ///Container type for all input parameters for the `isTokenWhitelisted` function with signature `isTokenWhitelisted(address)` and selector `0xb5af090f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "isTokenWhitelisted", abi = "isTokenWhitelisted(address)")]
    pub struct IsTokenWhitelistedCall {
        pub token: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `latestOracle` function with signature `latestOracle()` and selector `0x2eae4f60`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "latestOracle", abi = "latestOracle()")]
    pub struct LatestOracleCall;
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `pendingOwner` function with signature `pendingOwner()` and selector `0xe30c3978`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "pendingOwner", abi = "pendingOwner()")]
    pub struct PendingOwnerCall;
    ///Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `0x715018a6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    ///Container type for all input parameters for the `setOracle` function with signature `setOracle(address)` and selector `0x7adbf973`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "setOracle", abi = "setOracle(address)")]
    pub struct SetOracleCall {
        pub oracle: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `0xf2fde38b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `whitelistToken` function with signature `whitelistToken(address,bool)` and selector `0x0ffb1d8b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "whitelistToken", abi = "whitelistToken(address,bool)")]
    pub struct WhitelistTokenCall {
        pub token: ::ethers::core::types::Address,
        pub enabled: bool,
    }
    ///Container type for all input parameters for the `whitelistedTokens` function with signature `whitelistedTokens()` and selector `0x5e1762a0`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "whitelistedTokens", abi = "whitelistedTokens()")]
    pub struct WhitelistedTokensCall;
    ///Container type for all input parameters for the `whitelistedTokensCount` function with signature `whitelistedTokensCount()` and selector `0xdfdc4962`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "whitelistedTokensCount", abi = "whitelistedTokensCount()")]
    pub struct WhitelistedTokensCountCall;
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum FloodRegistryCalls {
        Weth(WethCall),
        AcceptOwnership(AcceptOwnershipCall),
        BatchWhitelistTokens(BatchWhitelistTokensCall),
        IsTokenWhitelisted(IsTokenWhitelistedCall),
        LatestOracle(LatestOracleCall),
        Owner(OwnerCall),
        PendingOwner(PendingOwnerCall),
        RenounceOwnership(RenounceOwnershipCall),
        SetOracle(SetOracleCall),
        TransferOwnership(TransferOwnershipCall),
        WhitelistToken(WhitelistTokenCall),
        WhitelistedTokens(WhitelistedTokensCall),
        WhitelistedTokensCount(WhitelistedTokensCountCall),
    }
    impl ::ethers::core::abi::AbiDecode for FloodRegistryCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded)
                = <WethCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(FloodRegistryCalls::Weth(decoded));
            }
            if let Ok(decoded)
                = <AcceptOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(FloodRegistryCalls::AcceptOwnership(decoded));
            }
            if let Ok(decoded)
                = <BatchWhitelistTokensCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(FloodRegistryCalls::BatchWhitelistTokens(decoded));
            }
            if let Ok(decoded)
                = <IsTokenWhitelistedCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(FloodRegistryCalls::IsTokenWhitelisted(decoded));
            }
            if let Ok(decoded)
                = <LatestOracleCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(FloodRegistryCalls::LatestOracle(decoded));
            }
            if let Ok(decoded)
                = <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(FloodRegistryCalls::Owner(decoded));
            }
            if let Ok(decoded)
                = <PendingOwnerCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(FloodRegistryCalls::PendingOwner(decoded));
            }
            if let Ok(decoded)
                = <RenounceOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(FloodRegistryCalls::RenounceOwnership(decoded));
            }
            if let Ok(decoded)
                = <SetOracleCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(FloodRegistryCalls::SetOracle(decoded));
            }
            if let Ok(decoded)
                = <TransferOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(FloodRegistryCalls::TransferOwnership(decoded));
            }
            if let Ok(decoded)
                = <WhitelistTokenCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(FloodRegistryCalls::WhitelistToken(decoded));
            }
            if let Ok(decoded)
                = <WhitelistedTokensCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(FloodRegistryCalls::WhitelistedTokens(decoded));
            }
            if let Ok(decoded)
                = <WhitelistedTokensCountCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(FloodRegistryCalls::WhitelistedTokensCount(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for FloodRegistryCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                FloodRegistryCalls::Weth(element) => element.encode(),
                FloodRegistryCalls::AcceptOwnership(element) => element.encode(),
                FloodRegistryCalls::BatchWhitelistTokens(element) => element.encode(),
                FloodRegistryCalls::IsTokenWhitelisted(element) => element.encode(),
                FloodRegistryCalls::LatestOracle(element) => element.encode(),
                FloodRegistryCalls::Owner(element) => element.encode(),
                FloodRegistryCalls::PendingOwner(element) => element.encode(),
                FloodRegistryCalls::RenounceOwnership(element) => element.encode(),
                FloodRegistryCalls::SetOracle(element) => element.encode(),
                FloodRegistryCalls::TransferOwnership(element) => element.encode(),
                FloodRegistryCalls::WhitelistToken(element) => element.encode(),
                FloodRegistryCalls::WhitelistedTokens(element) => element.encode(),
                FloodRegistryCalls::WhitelistedTokensCount(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for FloodRegistryCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                FloodRegistryCalls::Weth(element) => element.fmt(f),
                FloodRegistryCalls::AcceptOwnership(element) => element.fmt(f),
                FloodRegistryCalls::BatchWhitelistTokens(element) => element.fmt(f),
                FloodRegistryCalls::IsTokenWhitelisted(element) => element.fmt(f),
                FloodRegistryCalls::LatestOracle(element) => element.fmt(f),
                FloodRegistryCalls::Owner(element) => element.fmt(f),
                FloodRegistryCalls::PendingOwner(element) => element.fmt(f),
                FloodRegistryCalls::RenounceOwnership(element) => element.fmt(f),
                FloodRegistryCalls::SetOracle(element) => element.fmt(f),
                FloodRegistryCalls::TransferOwnership(element) => element.fmt(f),
                FloodRegistryCalls::WhitelistToken(element) => element.fmt(f),
                FloodRegistryCalls::WhitelistedTokens(element) => element.fmt(f),
                FloodRegistryCalls::WhitelistedTokensCount(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<WethCall> for FloodRegistryCalls {
        fn from(var: WethCall) -> Self {
            FloodRegistryCalls::Weth(var)
        }
    }
    impl ::std::convert::From<AcceptOwnershipCall> for FloodRegistryCalls {
        fn from(var: AcceptOwnershipCall) -> Self {
            FloodRegistryCalls::AcceptOwnership(var)
        }
    }
    impl ::std::convert::From<BatchWhitelistTokensCall> for FloodRegistryCalls {
        fn from(var: BatchWhitelistTokensCall) -> Self {
            FloodRegistryCalls::BatchWhitelistTokens(var)
        }
    }
    impl ::std::convert::From<IsTokenWhitelistedCall> for FloodRegistryCalls {
        fn from(var: IsTokenWhitelistedCall) -> Self {
            FloodRegistryCalls::IsTokenWhitelisted(var)
        }
    }
    impl ::std::convert::From<LatestOracleCall> for FloodRegistryCalls {
        fn from(var: LatestOracleCall) -> Self {
            FloodRegistryCalls::LatestOracle(var)
        }
    }
    impl ::std::convert::From<OwnerCall> for FloodRegistryCalls {
        fn from(var: OwnerCall) -> Self {
            FloodRegistryCalls::Owner(var)
        }
    }
    impl ::std::convert::From<PendingOwnerCall> for FloodRegistryCalls {
        fn from(var: PendingOwnerCall) -> Self {
            FloodRegistryCalls::PendingOwner(var)
        }
    }
    impl ::std::convert::From<RenounceOwnershipCall> for FloodRegistryCalls {
        fn from(var: RenounceOwnershipCall) -> Self {
            FloodRegistryCalls::RenounceOwnership(var)
        }
    }
    impl ::std::convert::From<SetOracleCall> for FloodRegistryCalls {
        fn from(var: SetOracleCall) -> Self {
            FloodRegistryCalls::SetOracle(var)
        }
    }
    impl ::std::convert::From<TransferOwnershipCall> for FloodRegistryCalls {
        fn from(var: TransferOwnershipCall) -> Self {
            FloodRegistryCalls::TransferOwnership(var)
        }
    }
    impl ::std::convert::From<WhitelistTokenCall> for FloodRegistryCalls {
        fn from(var: WhitelistTokenCall) -> Self {
            FloodRegistryCalls::WhitelistToken(var)
        }
    }
    impl ::std::convert::From<WhitelistedTokensCall> for FloodRegistryCalls {
        fn from(var: WhitelistedTokensCall) -> Self {
            FloodRegistryCalls::WhitelistedTokens(var)
        }
    }
    impl ::std::convert::From<WhitelistedTokensCountCall> for FloodRegistryCalls {
        fn from(var: WhitelistedTokensCountCall) -> Self {
            FloodRegistryCalls::WhitelistedTokensCount(var)
        }
    }
    ///Container type for all return fields from the `WETH` function with signature `WETH()` and selector `0xad5c4648`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct WethReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `isTokenWhitelisted` function with signature `isTokenWhitelisted(address)` and selector `0xb5af090f`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct IsTokenWhitelistedReturn(pub bool);
    ///Container type for all return fields from the `latestOracle` function with signature `latestOracle()` and selector `0x2eae4f60`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct LatestOracleReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct OwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `pendingOwner` function with signature `pendingOwner()` and selector `0xe30c3978`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct PendingOwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `whitelistedTokens` function with signature `whitelistedTokens()` and selector `0x5e1762a0`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct WhitelistedTokensReturn(
        pub ::std::vec::Vec<::ethers::core::types::Address>,
    );
    ///Container type for all return fields from the `whitelistedTokensCount` function with signature `whitelistedTokensCount()` and selector `0xdfdc4962`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct WhitelistedTokensCountReturn(pub ::ethers::core::types::U256);
}
