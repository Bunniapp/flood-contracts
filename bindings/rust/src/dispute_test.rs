pub use dispute_test::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod dispute_test {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "DisputeTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static DISPUTETEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeBondPct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeRebatePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"relayerRefundPct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"FeeCombinationSet\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSafeBlockThreshold\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"SafeBlockThresholdSet\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"disputeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"answer\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeDisputeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"disputeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeDisputed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeFilled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeRequested\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"newFeePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"UpdatedFeeForTrade\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotCallOnPriceSettledIfNotOracle\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotDisputeIfNotFilled\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotDisputeIfPeriodIsOver\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotDisputeTwice\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testDispute\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"answer\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testOnPriceSettledCallback\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static DISPUTETEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060408190526000805462ff00ff1916620100011790556001625e79b760e01b031990527f81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a608452737109709ecfa91a80626ff3989d68f67f5b1dd12d63ffa1864960a46020604051808303816000875af115801562000084573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000aa919062000628565b600880546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b66004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156200013f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000165919062000628565b600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f9791f723bf26b668c8cac0664b66d058cdb2a424cfb08c05dd9da570be0eff6f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015620001fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000220919062000628565b600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002bf73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506006604051602001620002a9919062000653565b60408051601f1981840301815291905262000451565b600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200039073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506012604051602001620002a991906060808252600d908201526c2bb930b83832b21022ba3432b960991b608082015260a060208201819052600490820152630ae8aa8960e31b60c082015260ff91909116604082015260e00190565b600c80546001600160a01b039283166001600160a01b031991821681179092556064600f55601460108190556011819055603c601255601380548316909317909255600b548254821690841617909155662386f26fc10000601555670de0b6b3a76400006016556335a4e900601755600854601880548316918416919091179055600954601b80548316918416919091179055600a54601c805490921692169190911790556377359400601d553480156200044a57600080fd5b5062000830565b60006001600160a01b0384163b80156200046f5784915050620004ed565b60006200047d8585620004f4565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015620004be573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004e8919081019062000773565b509150505b9392505050565b604051638d1cc92560e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc9259062000532908790600401620007c8565b6000604051808303816000875af115801562000552573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200057c919081019062000773565b8360405160200162000590929190620007fd565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620006215760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b606482015260840160405180910390fd5b5092915050565b6000602082840312156200063b57600080fd5b81516001600160a01b0381168114620004ed57600080fd5b606081526000620006786060830160048152635553444360e01b602082015260400190565b82810360208401526200069c8160048152635553444360e01b602082015260400190565b91505060ff8316604083015292915050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620006e1578181015183820152602001620006c7565b83811115620006f1576000848401525b50505050565b60006001600160401b0380841115620007145762000714620006ae565b604051601f8501601f19908116603f011681019082821181831017156200073f576200073f620006ae565b816040528093508581528686860111156200075957600080fd5b62000769866020830187620006c4565b5050509392505050565b6000602082840312156200078657600080fd5b81516001600160401b038111156200079d57600080fd5b8201601f81018413620007af57600080fd5b620007c084825160208401620006f7565b949350505050565b6020815260008251806020840152620007e9816040850160208701620006c4565b601f01601f19169190910160400192915050565b6000835162000811818460208801620006c4565b83519083019062000827818360208801620006c4565b01949350505050565b618fe680620008406000396000f3fe60806040523480156200001157600080fd5b5060043610620000b75760003560e01c806356edfbab116200007a57806356edfbab1462000127578063b5f38d04146200013e578063ba414fa61462000148578063c75b96441462000163578063f8ccbf47146200016d578063fa7626d4146200018157600080fd5b80630a9254e414620000bc578063231c9c3614620000c857806328b8687814620000d25780632b56612b14620000e95780633a76846314620000f3575b600080fd5b620000c66200018f565b005b620000c66200019b565b620000c6620000e3366004620052d9565b62000257565b620000c662000a42565b6200010a60008051602062008d7483398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b620000c66200013836600462005316565b62000bef565b620000c662000e9e565b6200015262001211565b60405190151581526020016200011e565b620000c662001342565b600054620001529062010000900460ff1681565b600054620001529060ff1681565b6200019962001ad2565b565b620001b6600f546001620001b091906200534c565b62001d84565b604051630618f58760e51b8152632c02744560e11b600482015260008051602062008d748339815191529063c31eb0e090602401600060405180830381600087803b1580156200020557600080fd5b505af11580156200021a573d6000803e3d6000fd5b50506013546014546016546017546015546018546019546200019998506001600160a01b0396871697509486169593949293919291169062001dc9565b600060646016546010546200026d919062005367565b62000279919062005389565b601354601c549192506200029b916001600160a01b0391821691168362001eb2565b601354600e546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015620002ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003139190620053ac565b601354601c546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa15801562000366573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200038c9190620053ac565b601354601b546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa158015620003df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004059190620053ac565b6013546018546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa15801562000458573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200047e9190620053ac565b600e54601b54601c54601354604051949550600094620004b7946001600160a01b039081169481169381169216908b90602001620053c6565b60408051808303601f19018152919052805160209091012060135460145460165460175460155460185460195496975062000506966001600160a01b0396871696958616959091169062001dc9565b600d54604051631f86c38760e31b81526004810183905288151560248201526001600160a01b039091169063fc361c3890604401600060405180830381600087803b1580156200055557600080fd5b505af11580156200056a573d6000803e3d6000fd5b505050506000606460165460115462000584919062005367565b62000590919062005389565b601354600e546040516370a0823160e01b81526001600160a01b03918216600482015292935062000644929116906370a0823190602401602060405180830381865afa158015620005e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200060b9190620053ac565b82620006188a8a62005409565b62000624919062005409565b60405180606001604052806023815260200162008e4b6023913962001ec6565b87156200085157601354601c546040516370a0823160e01b81526001600160a01b039182166004820152620006f19291909116906370a0823190602401602060405180830381865afa1580156200069f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c59190620053ac565b620006d1898862005409565b60405180606001604052806022815260200162008de16022913962001ec6565b601354601b546040516370a0823160e01b81526001600160a01b039182166004820152620007b09291909116906370a0823190602401602060405180830381865afa15801562000745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200076b9190620053ac565b6200077889600262005367565b6200078484886200534c565b6200079091906200534c565b6040518060800160405280604d815260200162008d94604d913962001ec6565b6013546018546040516370a0823160e01b81526001600160a01b0391821660048201526200084b9291909116906370a0823190602401602060405180830381865afa15801562000804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200082a9190620053ac565b8460405180606001604052806028815260200162008e036028913962001ec6565b62000a38565b601354601c546040516370a0823160e01b81526001600160a01b039182166004820152620008f79291909116906370a0823190602401602060405180830381865afa158015620008a5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008cb9190620053ac565b620008d789886200534c565b60405180606001604052806039815260200162008edb6039913962001ec6565b601354601b546040516370a0823160e01b81526001600160a01b039182166004820152620009929291909116906370a0823190602401602060405180830381865afa1580156200094b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009719190620053ac565b8560405180606001604052806023815260200162008d316023913962001ec6565b6013546018546040516370a0823160e01b81526001600160a01b03918216600482015262000a389291909116906370a0823190602401602060405180830381865afa158015620009e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a0c9190620053ac565b62000a1883866200534c565b60405180606001604052806029815260200162008e6e6029913962001ec6565b5050505050505050565b6013546014546016546000926001600160a01b0390811692169062000a699060016200534c565b60175460155460185460195460405162000a969796959493926001600160a01b0316919060200162005423565b60408051601f1981840301815282825280516020918201206024808501829052835180860390910181526044909401835290830180516001600160e01b0316635c8aa24760e11b179052905163f28dceb360e01b815290925060008051602062008d748339815191529163f28dceb39162000b159190600401620054d2565b600060405180830381600087803b15801562000b3057600080fd5b505af115801562000b45573d6000803e3d6000fd5b5050600e546013546014546016546001600160a01b0393841695506369cf50c1945091831692169062000b7a9060016200534c565b6017546015546018546019546040516001600160e01b031960e08a901b16815262000bb89796959493926001600160a01b03169190600401620054e7565b600060405180830381600087803b15801562000bd357600080fd5b505af115801562000be8573d6000803e3d6000fd5b5050505050565b600d54604051632631f2b160e11b81526001600160a01b0383811692169190911415600482015260008051602062008d7483398151915290634c63e56290602401600060405180830381600087803b15801562000c4b57600080fd5b505af115801562000c60573d6000803e3d6000fd5b50506040805161010081018252600e546001600160a01b039081168252601b5481166020830152601c54811692820192909252600b5490911660608201526064608082015260009250905060a0810160028152600160208083019190915260165460185460195460408051948501939093526001600160a01b039091168383015260608301529091019060800160408051808303601f1901815291815291525163ca669fa760e01b81526001600160a01b038416600482015290915060008051602062008d748339815191529063ca669fa790602401600060405180830381600087803b15801562000d5157600080fd5b505af115801562000d66573d6000803e3d6000fd5b5050604080516001600160a01b03861660248083019190915282518083039091018152604490910182526020810180516001600160e01b031663179a2eb160e01b179052905163f28dceb360e01b815260008051602062008d74833981519152935063f28dceb3925062000dde9190600401620054d2565b600060405180830381600087803b15801562000df957600080fd5b505af115801562000e0e573d6000803e3d6000fd5b5050600e5460405163734d162760e01b81526001600160a01b03909116925063734d1627915062000e66907fa709fd3aa96d9faf770e44a5aef2f4808a6fe3a5ddf546568f36ad3a3873f31d90859060040162005560565b600060405180830381600087803b15801562000e8157600080fd5b505af115801562000e96573d6000803e3d6000fd5b505050505050565b6000606460165460105462000eb4919062005367565b62000ec0919062005389565b601354601c5491925062000ee2916001600160a01b0391821691168362001eb2565b601c5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062008d748339815191529063ca669fa790602401600060405180830381600087803b15801562000f3757600080fd5b505af115801562000f4c573d6000803e3d6000fd5b5050600e546013546014546016546017546015546018546019546040516369cf50c160e01b81526001600160a01b039889169a506369cf50c1995062000fa198978816979687169690921691600401620054e7565b600060405180830381600087803b15801562000fbc57600080fd5b505af115801562000fd1573d6000803e3d6000fd5b505050506000620010066040518060400160405280600c81526020016b3732bc3a2234b9b83aba32b960a11b81525062001f02565b60135490915062001022906001600160a01b0316828462001eb2565b60405163ca669fa760e01b81526001600160a01b038216600482015260008051602062008d748339815191529063ca669fa790602401600060405180830381600087803b1580156200107357600080fd5b505af115801562001088573d6000803e3d6000fd5b5050601354600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620010c792909116906000199060040162005617565b6020604051808303816000875af1158015620010e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200110d919062005630565b50601a5460405160008051602062008d748339815191529163f28dceb391635c8aa24760e11b91620011459160240190815260200190565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b90921682526200118c91600401620054d2565b600060405180830381600087803b158015620011a757600080fd5b505af1158015620011bc573d6000803e3d6000fd5b5050600e546013546014546016546017546015546018546019546040516369cf50c160e01b81526001600160a01b039889169a506369cf50c1995062000e6698978816979687169690921691600401620054e7565b60008054610100900460ff1615620012325750600054610100900460ff1690565b600060008051602062008d748339815191523b156200133d5760405160009060008051602062008d74833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4906200129f9083906519985a5b195960d21b9060200162005617565b60408051601f1981840301815290829052620012bf929160200162005650565b60408051601f1981840301815290829052620012db9162005683565b6000604051808303816000865af19150503d80600081146200131a576040519150601f19603f3d011682016040523d82523d6000602084013e6200131f565b606091505b509150508080602001905181019062001339919062005630565b9150505b919050565b6000606460165460105462001358919062005367565b62001364919062005389565b601354601c5491925062001386916001600160a01b0391821691168362001eb2565b601354600e546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015620013d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013fe9190620053ac565b601354601c546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa15801562001451573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014779190620053ac565b601a54600e54919250600091620014f191620014eb91620014cf90639501325f60e01b90620014b2906001906001600160a01b031662001f90565b9060038201805463ffffffff191660e09290921c91909117905590565b9060028201805460018101825560009182526020909120015590565b62001fb4565b600e54601b54601c546013546040519495506000946200152a946001600160a01b039081169481169381169216908a90602001620053c6565b60408051808303601f19018152908290528051602090910120600e546381bad6f360e01b8352600160048401819052602484018190526044840181905260648401526001600160a01b03166084830152915060008051602062008d74833981519152906381bad6f39060a401600060405180830381600087803b158015620015b157600080fd5b505af1158015620015c6573d6000803e3d6000fd5b5050601954601b546040518681528594509192506001600160a01b0316907f3ce24c6eab720bcebe9baf9d21eee3175218126f896eb40e25675b054f19a40f9060200160405180910390a460135460145460165460175460155460185460195462001645966001600160a01b0390811696811695949392169062001dc9565b601a54600e546000916200167e91620014eb9190620014cf90639501325f60e01b90620014b2906001906001600160a01b031662001f90565b905062001696816200169085620056a1565b62001fd6565b600d54604051639d86698560e01b81526004810184905260009182918291829182918291829182916001600160a01b0390911690639d86698590602401600060405180830381865afa158015620016f1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200171b91908101906200577f565b975097509750975097509750975097506200178288600e60009054906101000a90046001600160a01b03166040518060400160405280601881526020017f5265717565737465722073686f756c6420626520626f6f6b0000000000000000815250620020bf565b601b5460408051808201909152601d81527f50726f706f7365722073686f756c6420657175616c2072656c617965720000006020820152620017d29189916001600160a01b0390911690620020bf565b601c5460408051606081019091526026808252620018079289926001600160a01b039091169162008f146020830139620020bf565b601354604080516060810190915260258082526200183c9288926001600160a01b039091169162008f3a6020830139620020bf565b6200187e848f6040518060400160405280601e81526020017f7265717565737420626f6e642073686f756c6420657175616c20626f6e64000081525062001ec6565b620018ba82600060405180604001604052806016815260200175416e737765722073686f756c642062652066616c736560501b8152506200210d565b62001911836002811115620018d357620018d362005527565b60016040518060400160405280601781526020017f53746174652073686f756c642062652050656e64696e6700000000000000000081525062001ec6565b6016546018546019546040805160208101949094526001600160a01b039092169183019190915260608201526200197290829060800160408051601f1981840301815260608301909152602680835290919062008f5f60208301396200214d565b601354600e546040516370a0823160e01b81526001600160a01b03918216600482015262001a1a9291909116906370a0823190602401602060405180830381865afa158015620019c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620019ec9190620053ac565b8f8f620019fa919062005409565b6040518060600160405280602c815260200162008f85602c913962001ec6565b601354601c546040516370a0823160e01b81526001600160a01b03918216600482015262001ac29291909116906370a0823190602401602060405180830381865afa15801562001a6e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a949190620053ac565b8f8e62001aa2919062005409565b60405180606001604052806024815260200162008eb76024913962001ec6565b5050505050505050505050505050565b62001adc6200215a565b600d54600e5460405163889590f160e01b81526001600160a01b039283169263889590f19262001b15929116906001906004016200584f565b600060405180830381600087803b15801562001b3057600080fd5b505af115801562001b45573d6000803e3d6000fd5b505060135460085460165462001b6c94506001600160a01b03928316935091169062001eb2565b60135460145460165460175460155460185460085462001ba2966001600160a01b039081169681169594939281169116620028d1565b601a55601955601454601b54601d5462001bca926001600160a01b0390811692169062001eb2565b601b5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062008d748339815191529063ca669fa790602401600060405180830381600087803b15801562001c1f57600080fd5b505af115801562001c34573d6000803e3d6000fd5b5050601354601454601654601754601554601854601954601d5462001c7699506001600160a01b03978816985095871696949593949293929091169162002a69565b601a54601b5462001c9291906001600160a01b03164362002b08565b601c5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062008d748339815191529063ca669fa790602401600060405180830381600087803b15801562001ce757600080fd5b505af115801562001cfc573d6000803e3d6000fd5b5050601354600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062001d3b92909116906000199060040162005617565b6020604051808303816000875af115801562001d5b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001d81919062005630565b50565b600062001d9282436200534c565b6040516301f7b4f360e41b81526004810182905290915060008051602062008d7483398151915290631f7b4f309060240162000e66565b601c5460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062008d748339815191529063ca669fa790602401600060405180830381600087803b15801562001e1e57600080fd5b505af115801562001e33573d6000803e3d6000fd5b5050600e546040516369cf50c160e01b81526001600160a01b0390911692506369cf50c1915062001e75908a908a908a908a908a908a908a90600401620054e7565b600060405180830381600087803b15801562001e9057600080fd5b505af115801562001ea5573d6000803e3d6000fd5b5050505050505050505050565b62001ec1838383600062002b8a565b505050565b81831462001ec15760008051602062008e2b8339815191528160405162001eee91906200586a565b60405180910390a162001ec1838362002da4565b805160208201206040516001625e79b760e01b0319815260009160008051602062008d748339815191529163ffa186499162001f449160040190815260200190565b6020604051808303816000875af115801562001f64573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f8a91906200589b565b92915050565b6005820180546001600160a01b0319166001600160a01b0383161790558192915050565b600062001fc18262002e78565b80602001905181019062001f8a9190620053ac565b808214620020bb5760008051602062008d54833981519152604051620020379060208082526021908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b696e746040820152605d60f81b606082015260800190565b60405180910390a17f2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f16881604051620020709190620058bb565b60405180910390a17f2fe632779174374378442a8e978bccfbdcc1d6b2b0d81f7e8eb776ab2286f16882604051620020a99190620058f4565b60405180910390a1620020bb62002f40565b5050565b816001600160a01b0316836001600160a01b03161462001ec15760008051602062008e2b83398151915281604051620020f991906200586a565b60405180910390a162001ec1838362003044565b8115158315151462001ec15760008051602062008e2b833981519152816040516200213991906200586a565b60405180910390a162001ec183836200312d565b62001ec183838362003271565b62002164620032b6565b600e54600b54604051630ffb1d8b60e01b81526001600160a01b0392831692630ffb1d8b926200219d929116906001906004016200584f565b600060405180830381600087803b158015620021b857600080fd5b505af1158015620021cd573d6000803e3d6000fd5b5050600e54600c54604051630ffb1d8b60e01b81526001600160a01b039283169450630ffb1d8b93506200220b92909116906001906004016200584f565b600060405180830381600087803b1580156200222657600080fd5b505af11580156200223b573d6000803e3d6000fd5b5050600b54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152635553444360e01b606482015260008051602062008d74833981519152925063c657c7189150608401600060405180830381600087803b158015620022b357600080fd5b505af1158015620022c8573d6000803e3d6000fd5b5050600c54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152630ae8aa8960e31b606482015260008051602062008d74833981519152925063c657c7189150608401600060405180830381600087803b1580156200234057600080fd5b505af115801562002355573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062008d7483398151915292506306447d569150602401600060405180830381600087803b158015620023ae57600080fd5b505af1158015620023c3573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200240292909116906000199060040162005617565b6020604051808303816000875af115801562002422573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002448919062005630565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262002483929116906000199060040162005617565b6020604051808303816000875af1158015620024a3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620024c9919062005630565b50604080516390c5013b60e01b8152905160008051602062008d74833981519152916390c5013b91600480830192600092919082900301818387803b1580156200251257600080fd5b505af115801562002527573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062008d7483398151915292506306447d569150602401600060405180830381600087803b1580156200258057600080fd5b505af115801562002595573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620025d492909116906000199060040162005617565b6020604051808303816000875af1158015620025f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200261a919062005630565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262002655929116906000199060040162005617565b6020604051808303816000875af115801562002675573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200269b919062005630565b50604080516390c5013b60e01b8152905160008051602062008d74833981519152916390c5013b91600480830192600092919082900301818387803b158015620026e457600080fd5b505af1158015620026f9573d6000803e3d6000fd5b5050600a546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062008d7483398151915292506306447d569150602401600060405180830381600087803b1580156200275257600080fd5b505af115801562002767573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620027a692909116906000199060040162005617565b6020604051808303816000875af1158015620027c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027ec919062005630565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262002827929116906000199060040162005617565b6020604051808303816000875af115801562002847573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200286d919062005630565b50604080516390c5013b60e01b8152905160008051602062008d74833981519152916390c5013b91600480830192600092919082900301818387803b158015620028b657600080fd5b505af1158015620028cb573d6000803e3d6000fd5b50505050565b6000806000600e60009054906101000a90046001600160a01b03166001600160a01b031663cd805d5e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200292a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620029509190620053ac565b90506000620029658b8b8b8b8b8b88620033ba565b60405163ca669fa760e01b81526001600160a01b038716600482015290915060008051602062008d748339815191529063ca669fa790602401600060405180830381600087803b158015620029b957600080fd5b505af1158015620029ce573d6000803e3d6000fd5b5050600e5460405163ad3e762560e01b81526001600160a01b038f811660048301528e81166024830152604482018e9052606482018d9052608482018c90528a811660a4830152909116925063ad3e7625915060c401600060405180830381600087803b15801562002a3f57600080fd5b505af115801562002a54573d6000803e3d6000fd5b50939d929c50919a5050505050505050505050565b600e54604051631655b32360e01b81526001600160a01b038a81166004830152898116602483015260448201899052606482018890526084820187905285811660a483015260c4820185905260e4820184905290911690631655b3239061010401600060405180830381600087803b15801562002ae557600080fd5b505af115801562002afa573d6000803e3d6000fd5b505050505050505050505050565b600e5462002b4f90839062002b499062002b43908790620014cf9063d70e3dfd60e01b90620014b2906001906001600160a01b031662001f90565b620033fe565b62003044565b600e5462001ec19082906200169090620014eb908790620014cf90639501325f60e01b90620014b2906001906001600160a01b031662001f90565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009287169162002be09162005683565b6000604051808303816000865af19150503d806000811462002c1f576040519150601f19603f3d011682016040523d82523d6000602084013e62002c24565b606091505b5091505060008180602001905181019062002c409190620053ac565b905062002c958462002c8e8762002c656370a0823160e01b620014b260018d62001f90565b90600282018054600181018255600091825260209091206001600160a01b039290921691015590565b9062003420565b821562000e965760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290516000916001600160a01b0389169162002ce0919062005683565b6000604051808303816000865af19150503d806000811462002d1f576040519150601f19603f3d011682016040523d82523d6000602084013e62002d24565b606091505b5091505060008180602001905181019062002d409190620053ac565b90508286101562002d6b5762002d57868462005409565b62002d63908262005409565b905062002d86565b62002d77838762005409565b62002d8390826200534c565b90505b62000a388162002c8e6318160ddd60e01b620014b260018d62001f90565b808214620020bb5760008051602062008d5483398151915260405162002e069060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88160405162002e3f9190620058bb565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051620020a99190620058f4565b60058101546060906001600160a01b0316600062002e96846200342c565b604051630667f9d760e41b815290915060008051602062008d748339815191529063667f9d709062002ecf908590859060040162005617565b6020604051808303816000875af115801562002eef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f159190620053ac565b60405160200162002f2891815260200190565b60405160208183030381529060405292505050919050565b60008051602062008d748339815191523b15620030335760405160009060008051602062008d74833981519152907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49062002fae9083906519985a5b195960d21b906001906020016200591f565b60408051601f198184030181529082905262002fce929160200162005650565b60408051601f198184030181529082905262002fea9162005683565b6000604051808303816000865af19150503d806000811462003029576040519150601f19603f3d011682016040523d82523d6000602084013e6200302e565b606091505b505050505b6000805461ff001916610100179055565b806001600160a01b0316826001600160a01b031614620020bb5760008051602062008d54833981519152604051620030bb9060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f81604051620030f4919062005940565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f82604051620020a9919062005985565b80151582151514620020bb5760008051602062008d54833981519152604051620031939060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a160008051602062008e2b83398151915281620031d5576040518060400160405280600581526020016466616c736560d81b815250620031f3565b604051806040016040528060048152602001637472756560e01b8152505b604051620032029190620059b0565b60405180910390a160008051602062008e2b8339815191528262003244576040518060400160405280600581526020016466616c736560d81b81525062003262565b604051806040016040528060048152602001637472756560e01b8152505b604051620020a99190620059ef565b6200327d838362004132565b62001ec15760008051602062008e2b83398151915281604051620032a291906200586a565b60405180910390a162001ec18383620041cb565b620032c0620042a9565b600d54600f546010546011546012546040516001600160a01b0390951694620032e99062005273565b6001600160a01b039095168552602085019390935260408401919091526060830152608082015260a001604051809103906000f08015801562003330573d6000803e3d6000fd5b50600e80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b81526004808201939093526024810191909152604481019190915263426f6f6b60e01b606482015260008051602062008d748339815191529063c657c718906084015b600060405180830381600087803b158015620028b657600080fd5b600087878787878787604051602001620033db979695949392919062005423565b604051602081830303815290604052805190602001209050979650505050505050565b60006200340b8262002e78565b80602001905181019062001f8a91906200589b565b620020bb828262004be8565b600581015460038201546004830154600284018054604080516020808402820181019092528281526000966001600160a01b03169560e01b9493879391929091908301828280156200349e57602002820191906000526020600020905b81548152602001906001019080831162003489575b5050506001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a1684528252808320905195965094919350620034ea9250859187910162005a1a565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff161562003589576001600160a01b0384166000908152602087815260408083206001600160e01b031987168452825280832090519092916200355991859187910162005a1a565b60405160208183030381529060405280519060200120815260200190815260200160002054945050505050919050565b600083620035978362004f4b565b604051602001620035aa92919062005650565b604051602081830303815290604052905060008051602062008e9783398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200360957600080fd5b505af11580156200361e573d6000803e3d6000fd5b50505050600080866001600160a01b0316836040516200363f919062005683565b600060405180830381855afa9150503d80600081146200367c576040519150601f19603f3d011682016040523d82523d6000602084013e62003681565b606091505b5091506200369e9050816200369887602062005367565b62004fff565b6040516365bc948160e01b81526001600160a01b03891660048201529092506000915060008051602062008d74833981519152906365bc9481906024016000604051808303816000875af1158015620036fb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262003725919081019062005adf565b5090508051600103620039f757600060008051602062008e9783398151915260001c6001600160a01b031663667f9d7089846000815181106200376c576200376c62005b4a565b60200260200101516040518363ffffffff1660e01b81526004016200379392919062005617565b6020604051808303816000875af1158015620037b3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620037d99190620053ac565b9050806200383d577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a5888360008151811062003819576200381962005b4a565b602002602001015160001c6040516200383492919062005617565b60405180910390a15b808314620038685760405162461bcd60e51b81526004016200385f9062005b60565b60405180910390fd5b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed88888789604051602001620038a092919062005a1a565b6040516020818303038152906040528051906020012085600081518110620038cc57620038cc62005b4a565b602002602001015160001c604051620038e9949392919062005bfb565b60405180910390a18160008151811062003907576200390762005b4a565b6020908102919091018101516001600160a01b038a1660009081528c835260408082206001600160e01b03198c168352845280822090519293909262003952918a918c910162005a1a565b60408051601f1981840301815291815281516020928301208352828201939093529082016000908120939093556001600160a01b038b16835260018d810182528284206001600160e01b03198c16855282528284209251909391620039bc918a918c910162005a1a565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff19169115159190911790555062003fb5565b60018151111562003f445760005b815181101562003f3d57600060008051602062008e9783398151915260001c6001600160a01b031663667f9d708a85858151811062003a485762003a4862005b4a565b60200260200101516040518363ffffffff1660e01b815260040162003a6f92919062005617565b6020604051808303816000875af115801562003a8f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003ab59190620053ac565b90508062003b18577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a58984848151811062003af45762003af462005b4a565b602002602001015160001c60405162003b0f92919062005617565b60405180910390a15b60008051602062008e9783398151915260001c6001600160a01b03166370ca10bb8a85858151811062003b4f5762003b4f62005b4a565b602002602001015161133760f01b6040518463ffffffff1660e01b815260040162003b7d939291906200591f565b600060405180830381600087803b15801562003b9857600080fd5b505af115801562003bad573d6000803e3d6000fd5b50505050600060608a6001600160a01b03168760405162003bcf919062005683565b600060405180830381855afa9150503d806000811462003c0c576040519150601f19603f3d011682016040523d82523d6000602084013e62003c11565b606091505b50909250905062003c2981620036988b602062005367565b955081801562003c3d575061133760f01b86145b1562003e90577f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c60405160200162003c7b92919062005a1a565b6040516020818303038152906040528051906020012088888151811062003ca65762003ca662005b4a565b602002602001015160001c60405162003cc3949392919062005bfb565b60405180910390a184848151811062003ce05762003ce062005b4a565b6020908102919091018101516001600160a01b038d1660009081528f835260408082206001600160e01b03198f168352845280822090519293909262003d2b918d918f910162005a1a565b6040516020818303038152906040528051906020012081526020019081526020016000208190555060018d60010160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160e01b0319166001600160e01b031916815260200190815260200160002060008a8c60405160200162003db892919062005a1a565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555060008051602062008e9783398151915260001c6001600160a01b03166370ca10bb8c87878151811062003e2a5762003e2a62005b4a565b6020026020010151866040518463ffffffff1660e01b815260040162003e53939291906200591f565b600060405180830381600087803b15801562003e6e57600080fd5b505af115801562003e83573d6000803e3d6000fd5b5050505050505062003f3d565b60008051602062008e9783398151915260001c6001600160a01b03166370ca10bb8c87878151811062003ec75762003ec762005b4a565b6020026020010151866040518463ffffffff1660e01b815260040162003ef0939291906200591f565b600060405180830381600087803b15801562003f0b57600080fd5b505af115801562003f20573d6000803e3d6000fd5b50505050505050808062003f349062005c2b565b91505062003a05565b5062003fb5565b6040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e60648201526084016200385f565b6001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a1684528252808320905190929162003ff99188918a910162005a1a565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620040885760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b60648201526084016200385f565b6005890180546001600160a01b031916905560038901805463ffffffff19169055620040b960028a01600062005281565b600060048a018190556001600160a01b038816815260208a815260408083206001600160e01b03198a16845282528083209051909291620040ff9188918a910162005a1a565b60405160208183030381529060405280519060200120815260200190815260200160002054975050505050505050919050565b805182516001919003620041c25760005b8351811015620041bb5782818151811062004162576200416262005b4a565b602001015160f81c60f81b6001600160f81b0319168482815181106200418c576200418c62005b4a565b01602001516001600160f81b03191614620041a657600091505b80620041b28162005c2b565b91505062004143565b5062001f8a565b50600092915050565b620041d7828262004132565b620020bb5760008051602062008d54833981519152604051620042379060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1881604051620042709190620059b0565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1882604051620020a99190620059ef565b620042b362005089565b604051620042c190620052a1565b604051809103906000f080158015620042de573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b03928316908117909155600b5460405163095ea7b360e01b815292169163095ea7b39162004329916000199060040162005617565b6020604051808303816000875af115801562004349573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200436f919062005630565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620043aa929116906000199060040162005617565b6020604051808303816000875af1158015620043ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620043f0919062005630565b50600d54604080516318caf8e360e31b81526001600160a01b0390921660048301526024820152601060448201526f416c6c4b6e6f77696e674f7261636c6560801b606482015260008051602062008d748339815191529063c657c71890608401600060405180830381600087803b1580156200446c57600080fd5b505af115801562004481573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062008d7483398151915292506306447d569150602401600060405180830381600087803b158015620044da57600080fd5b505af1158015620044ef573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200452e92909116906000199060040162005617565b6020604051808303816000875af11580156200454e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004574919062005630565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620045af929116906000199060040162005617565b6020604051808303816000875af1158015620045cf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620045f5919062005630565b50604080516390c5013b60e01b8152905160008051602062008d74833981519152916390c5013b91600480830192600092919082900301818387803b1580156200463e57600080fd5b505af115801562004653573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062008d7483398151915292506306447d569150602401600060405180830381600087803b158015620046ac57600080fd5b505af1158015620046c1573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200470092909116906000199060040162005617565b6020604051808303816000875af115801562004720573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004746919062005630565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262004781929116906000199060040162005617565b6020604051808303816000875af1158015620047a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620047c7919062005630565b50604080516390c5013b60e01b8152905160008051602062008d74833981519152916390c5013b91600480830192600092919082900301818387803b1580156200481057600080fd5b505af115801562004825573d6000803e3d6000fd5b5050600a546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062008d7483398151915292506306447d569150602401600060405180830381600087803b1580156200487e57600080fd5b505af115801562004893573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620048d292909116906000199060040162005617565b6020604051808303816000875af1158015620048f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004918919062005630565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262004953929116906000199060040162005617565b6020604051808303816000875af115801562004973573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004999919062005630565b50604080516390c5013b60e01b8152905160008051602062008d74833981519152916390c5013b91600480830192600092919082900301818387803b158015620049e257600080fd5b505af1158015620049f7573d6000803e3d6000fd5b5050600d54600b54604051630ffb1d8b60e01b81526001600160a01b039283169450630ffb1d8b935062004a3592909116906001906004016200584f565b600060405180830381600087803b15801562004a5057600080fd5b505af115801562004a65573d6000803e3d6000fd5b5050600d54600c54604051630ffb1d8b60e01b81526001600160a01b039283169450630ffb1d8b935062004aa392909116906001906004016200584f565b600060405180830381600087803b15801562004abe57600080fd5b505af115801562004ad3573d6000803e3d6000fd5b5050600d54600a5460405163194f29df60e11b81526001600160a01b03928316945063329e53be935062004b1192909116906001906004016200584f565b600060405180830381600087803b15801562004b2c57600080fd5b505af115801562004b41573d6000803e3d6000fd5b5050600d54600a5460405163889590f160e01b81526001600160a01b03928316945063889590f1935062004b7f92909116906001906004016200584f565b600060405180830381600087803b15801562004b9a57600080fd5b505af115801562004baf573d6000803e3d6000fd5b5050600d5460405163889590f160e01b81526001600160a01b03909116925063889590f191506200339f9030906001906004016200584f565b600582015460038301546004840154600285018054604080516020808402820181019092528281526001600160a01b039096169560e09590951b946000939092909183018282801562004c5b57602002820191906000526020600020905b81548152602001906001019080831162004c46575b5050505050905060008362004c708362004f4b565b60405160200162004c8392919062005650565b60408051601f198184030181528282526001600160a01b038816600090815260018b0160209081528382206001600160e01b03198a16835281529281209194509092909162004cd791869188910162005a1a565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff1662004d125762004d10876200342c565b505b6001600160a01b0385166000908152602088815260408083206001600160e01b031988168452825280832090519091839162004d5391879189910162005a1a565b6040516020818303038152906040528051906020012081526020019081526020016000205460001b9050600080876001600160a01b03168460405162004d9a919062005683565b600060405180830381855afa9150503d806000811462004dd7576040519150601f19603f3d011682016040523d82523d6000602084013e62004ddc565b606091505b50915062004df39050816200369888602062005367565b604051630667f9d760e41b81529092506000915060008051602062008d748339815191529063667f9d709062004e30908b90879060040162005617565b6020604051808303816000875af115801562004e50573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004e769190620053ac565b905080821462004e9a5760405162461bcd60e51b81526004016200385f9062005b60565b6040516370ca10bb60e01b815260008051602062008d74833981519152906370ca10bb9062004ed2908b9087908e906004016200591f565b600060405180830381600087803b15801562004eed57600080fd5b505af115801562004f02573d6000803e3d6000fd5b50505060058b0180546001600160a01b03191690555060038a01805463ffffffff1916905562004f3760028b01600062005281565b896004016000905550505050505050505050565b606060008251602062004f5f919062005367565b67ffffffffffffffff81111562004f7a5762004f7a620056c0565b6040519080825280601f01601f19166020018201604052801562004fa5576020820181803683370190505b50905060005b835181101562004ff857600084828151811062004fcc5762004fcc62005b4a565b60200260200101519050808260200260200184015250808062004fef9062005c2b565b91505062004fab565b5092915050565b600080600060208551116200501657845162005019565b60205b905060005b818110156200507f576200503481600862005367565b866200504183886200534c565b8151811062005054576200505462005b4a565b01602001516001600160f81b031916901c929092179180620050768162005c2b565b9150506200501e565b5090949350505050565b600854604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526005604482015264416c69636560d81b606482015260008051602062008d748339815191529063c657c71890608401600060405180830381600087803b158015620050f957600080fd5b505af11580156200510e573d6000803e3d6000fd5b5050600954604080516318caf8e360e31b81526001600160a01b039092166004830152602482015260036044820152622137b160e91b606482015260008051602062008d74833981519152925063c657c7189150608401600060405180830381600087803b1580156200518057600080fd5b505af115801562005195573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526007604482015266436861726c696560c81b606482015260008051602062008d74833981519152925063c657c7189150608401600060405180830381600087803b1580156200520b57600080fd5b505af115801562005220573d6000803e3d6000fd5b5050604080516318caf8e360e31b815230600482015260248101919091526003604482015262596f7560e81b606482015260008051602062008d74833981519152925063c657c71891506084016200339f565b611f898062005c4883390190565b508054600082559060005260206000209081019062001d819190620052af565b6111608062007bd183390190565b5b80821115620052c65760008155600101620052b0565b5090565b801515811462001d8157600080fd5b600060208284031215620052ec57600080fd5b8135620052f981620052ca565b9392505050565b6001600160a01b038116811462001d8157600080fd5b6000602082840312156200532957600080fd5b8135620052f98162005300565b634e487b7160e01b600052601160045260246000fd5b6000821982111562005362576200536262005336565b500190565b600081600019048311821515161562005384576200538462005336565b500290565b600082620053a757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215620053bf57600080fd5b5051919050565b6bffffffffffffffffffffffff19606096871b8116825294861b8516601482015292851b84166028840152931b909116603c820152605081019190915260700190565b6000828210156200541e576200541e62005336565b500390565b6bffffffffffffffffffffffff19606098891b8116825296881b8716601482015260288101959095526048850193909352606884019190915290931b9091166088820152609c81019190915260bc0190565b60005b838110156200549257818101518382015260200162005478565b83811115620028cb5750506000910152565b60008151808452620054be81602086016020860162005475565b601f01601f19169290920160200192915050565b602081526000620052f96020830184620054a4565b6001600160a01b039788168152958716602087015260408601949094526060850192909252608084015290921660a082015260c081019190915260e00190565b634e487b7160e01b600052602160045260246000fd5b600381106200555c57634e487b7160e01b600052602160045260246000fd5b9052565b8281526040602080830182905283516001600160a01b039081168385015290840151166060830152820151600090620055a460808401826001600160a01b03169052565b5060608301516001600160a01b03811660a084015250608083015160c083015260a0830151620055d860e08401826200553d565b5060c0830151610100620055ef8185018315159052565b60e0850151915080610120850152506200560e610140840182620054a4565b95945050505050565b6001600160a01b03929092168252602082015260400190565b6000602082840312156200564357600080fd5b8151620052f981620052ca565b6001600160e01b03198316815281516000906200567581600485016020870162005475565b919091016004019392505050565b600082516200569781846020870162005475565b9190910192915050565b6000600160ff1b8201620056b957620056b962005336565b5060000390565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715620057025762005702620056c0565b604052919050565b600082601f8301126200571c57600080fd5b815167ffffffffffffffff811115620057395762005739620056c0565b6200574e601f8201601f1916602001620056d6565b8181528460208386010111156200576457600080fd5b6200577782602083016020870162005475565b949350505050565b600080600080600080600080610100898b0312156200579d57600080fd5b8851620057aa8162005300565b60208a0151909850620057bd8162005300565b60408a0151909750620057d08162005300565b60608a0151909650620057e38162005300565b60808a015160a08b01519196509450600381106200580057600080fd5b60c08a01519093506200581381620052ca565b60e08a015190925067ffffffffffffffff8111156200583157600080fd5b6200583f8b828c016200570a565b9150509295985092959890939650565b6001600160a01b039290921682521515602082015260400190565b60408152600560408201526422b93937b960d91b6060820152608060208201526000620052f96080830184620054a4565b600060208284031215620058ae57600080fd5b8151620052f98162005300565b604081526000620058e660408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b604081526000620058e660408301600a815269080808081058dd1d585b60b21b602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6040815260006200596b60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b6040815260006200596b60408301600a815269080808081058dd1d585b60b21b602082015260400190565b604081526000620059db60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b8281036020840152620057778185620054a4565b604081526000620059db60408301600a815269080808081058dd1d585b60b21b602082015260400190565b825160009082906020808701845b8381101562005a465781518552938201939082019060010162005a28565b5050948252509092019392505050565b600082601f83011262005a6857600080fd5b8151602067ffffffffffffffff82111562005a875762005a87620056c0565b8160051b62005a98828201620056d6565b928352848101820192828101908785111562005ab357600080fd5b83870192505b8483101562005ad45782518252918301919083019062005ab9565b979650505050505050565b6000806040838503121562005af357600080fd5b825167ffffffffffffffff8082111562005b0c57600080fd5b62005b1a8683870162005a56565b9350602085015191508082111562005b3157600080fd5b5062005b408582860162005a56565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6020808252606f908201527f73746453746f726167652066696e642853746453746f72616765293a2050616360408201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560608201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960808201526e39b713ba1039bab83837b93a32b21760891b60a082015260c00190565b6001600160a01b039490941684526001600160e01b03199290921660208401526040830152606082015260800190565b60006001820162005c405762005c4062005336565b506001019056fe61012060405260006001553480156200001757600080fd5b5060405162001f8938038062001f898339810160408190526200003a9162000156565b600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506001600160a01b0385166101005260808490526040518481527f882885d0e4612a71677644a9d70e58ca05fc5a1ea1b0875f6e46c315241bfe149060200160405180910390a180620000ce8385620001ad565b620000da9190620001ad565b606414620000fb5760405163bcf1e5b360e01b815260040160405180910390fd5b60a083905260c082905260e081905260408051848152602081018490529081018290527ff33486d12ebec978385318eaf8163e096679d7eab14d4def8f26b7a5fda0f5829060600160405180910390a15050505050620001d4565b600080600080600060a086880312156200016f57600080fd5b85516001600160a01b03811681146200018757600080fd5b602087015160408801516060890151608090990151929a91995097965090945092505050565b60008219821115620001cf57634e487b7160e01b600052601160045260246000fd5b500190565b60805160a05160c05160e05161010051611d1c6200026d60003960008181610214015281816103ce0152818161068c015281816106b501528181610798015261081c0152600081816101c701528181610d630152610fc5015260008181610299015261088a0152600081816101a0015261064c01526000818161012b015281816105ce01528181610c910152610cdf0152611d1c6000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063cb7b1ec811610071578063cb7b1ec8146102ce578063cd805d5e146102e1578063d70e3dfd146102ea578063daf9c21014610313578063ee35a4f91461034657600080fd5b80638da5cb5b1461024e5780639501325f14610261578063ad3e762514610281578063c16402bb14610294578063c3f6f431146102bb57600080fd5b8063391fe4e2116100f4578063391fe4e21461019b57806353906a59146101c257806369cf50c1146101e9578063734d1627146101fc5780637dc0d1d01461020f57600080fd5b80630ff0c00e146101265780630ffb1d8b1461016057806313af4035146101755780631655b32314610188575b600080fd5b61014d7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61017361016e3660046116df565b610359565b005b610173610183366004611718565b6104c3565b61017361019636600461173c565b610557565b61014d7f000000000000000000000000000000000000000000000000000000000000000081565b61014d7f000000000000000000000000000000000000000000000000000000000000000081565b6101736101f73660046117b6565b610587565b61017361020a366004611828565b610811565b6102367f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610157565b600054610236906001600160a01b031681565b61014d61026f36600461186c565b60036020526000908152604090205481565b61017361028f366004611885565b610985565b61014d7f000000000000000000000000000000000000000000000000000000000000000081565b6101736102c936600461192e565b610b4a565b6101736102dc3660046117b6565b610c4a565b61014d60015481565b6102366102f836600461186c565b6004602052600090815260409020546001600160a01b031681565b610336610321366004611718565b60026020526000908152604090205460ff1681565b6040519015158152602001610157565b6101736103543660046119f2565b610e03565b6000546001600160a01b031633146103a75760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064015b60405180910390fd5b80801561043b5750604051630daf9c2160e41b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063daf9c21090602401602060405180830381865afa158015610415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104399190611ac2565b155b15610464576040516313c42eef60e21b81526001600160a01b038316600482015260240161039e565b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d92910160405180910390a25050565b6000546001600160a01b0316331461050c5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161039e565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b600061056889898989898989610e44565b905061057c89898989898989888a33610eb2565b505050505050505050565b600061059888888888888888610e44565b60008181526003602052604081205491925081136105cc57604051635c8aa24760e11b81526004810183905260240161039e565b7f00000000000000000000000000000000000000000000000000000000000000006105f78243611af5565b1061061557604051632c02744560e11b815260040160405180910390fd5b61061e81611b0c565b60008381526003602090815260408083209390935560049052908120546001600160a01b03169060646106717f00000000000000000000000000000000000000000000000000000000000000008b611b28565b61067b9190611b47565b90506106b16001600160a01b038c167f000000000000000000000000000000000000000000000000000000000000000083611017565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f7d3b58b84338f868f8d8d604051602001610715939291909283526001600160a01b03919091166020830152604082015260600190565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401610744959493929190611b69565b6020604051808303816000875af1158015610763573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107879190611bea565b90506107be6001600160a01b038d167f00000000000000000000000000000000000000000000000000000000000000006000611017565b8086846001600160a01b03167f3ce24c6eab720bcebe9baf9d21eee3175218126f896eb40e25675b054f19a40f876040516107fb91815260200190565b60405180910390a4505050505050505050505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461085c5760405163179a2eb160e01b815233600482015260240161039e565b6000808061086d60e0850185611c03565b81019061087a9190611c4a565b91945092509050600060646108af7f000000000000000000000000000000000000000000000000000000000000000086611b28565b6108b99190611b47565b90506108cb60e0860160c08701611c82565b15610909576109046108e36040870160208801611718565b826108f46080890160608a01611718565b6001600160a01b03169190611094565b61091e565b61091e83826108f46080890160608a01611718565b85826109306040880160208901611718565b6001600160a01b03167f5346d9dd24f7f5e01b23ca4dada136d909acecf7ff9e4ed41474140d5d1319f661096a60e08a0160c08b01611c82565b604051901515815260200160405180910390a4505050505050565b6001600160a01b03861660009081526002602052604090205460ff166109c95760405163f602627d60e01b81526001600160a01b038716600482015260240161039e565b6001600160a01b03851660009081526002602052604090205460ff16610a0d5760405163f602627d60e01b81526001600160a01b038616600482015260240161039e565b846001600160a01b0316866001600160a01b031603610a3f57604051631d2792fb60e31b815260040160405180910390fd5b6703782dace9d90000821115610a6b576040516305bf279d60e41b81526004810183905260240161039e565b831580610a76575082155b15610a945760405163abc5ee6f60e01b815260040160405180910390fd5b6001600160a01b038116610abb57604051631feef77d60e01b815260040160405180910390fd5b60015460408051868152602081018690529081018490526001600160a01b03838116606083015280881691908916907ff4650f30e27746417929b97bf256a6022b15957ffef5971ddbe48867d9e01d459060800160405180910390a460018054906000610b2783611c9f565b90915550610b4290506001600160a01b03871633308761110c565b505050505050565b6000610b5b8c8c8c8c8c8c8c610e44565b90506703782dace9d90000841115610b89576040516305bf279d60e41b81526004810185905260240161039e565b6000818152600360205260408120541215610bba57604051635c8aa24760e11b81526004810182905260240161039e565b6000818152600360205260408120541315610beb576040516304daa62560e21b81526004810182905260240161039e565b610bf88582868686611196565b85856001600160a01b03167f6ab91dbc42f726b630639350395426be048c50255f12e82d28e2dffac417459386604051610c3491815260200190565b60405180910390a3505050505050505050505050565b6000610c5b88888888888888610e44565b6000818152600360205260408120549192508113610c8f57604051635c8aa24760e11b81526004810183905260240161039e565b7f0000000000000000000000000000000000000000000000000000000000000000610cba8243611af5565b1015610d2257600082815260036020526040812054610cd99043611af5565b610d03907f0000000000000000000000000000000000000000000000000000000000000000611af5565b9050806040516325797e0360e11b815260040161039e91815260200190565b60008281526004602081815260408084208054600384529185208590559290915281546001600160a01b0319169091556001600160a01b0316906064610d887f000000000000000000000000000000000000000000000000000000000000000082611af5565b610d92908b611b28565b610d9c9190611b47565b9050610db26001600160a01b038c168383611094565b84826001600160a01b03167f32b1eeadbe2d36ad64238ef29d8064aedff6d8150cf1f0c4d6617bae1c00d92685604051610dee91815260200190565b60405180910390a35050505050505050505050565b6000610e148d8d8d8d8d8d8d610e44565b9050610e238582868686611196565b610e358d8d8d8d888d8d888e33610eb2565b50505050505050505050505050565b604080516bffffffffffffffffffffffff196060998a1b8116602080840191909152988a1b81166034830152604882019790975260688101959095526088850193909352951b90921660a882015260bc808201949094528151808203909401845260dc019052815191012090565b6000838152600360205260408120541215610ee357604051635c8aa24760e11b81526004810184905260240161039e565b6000838152600360205260408120541315610f14576040516304daa62560e21b81526004810184905260240161039e565b86821015610f355760405163a53754a760e01b815260040160405180910390fd5b6000838152600360209081526040808320439055600482529182902080546001600160a01b0319166001600160a01b0385169081179091558251898152918201859052869290917f942417ccf4f356e8d909c054f8a8147622647605cbeafd9c63b4fc3cc1dd2a53910160405180910390a3610fbc6001600160a01b038a1682878561110c565b60006064610fea7f00000000000000000000000000000000000000000000000000000000000000008b611b28565b610ff49190611b47565b905061100a6001600160a01b038c168383611094565b5050505050505050505050565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061108e5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640161039e565b50505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061108e5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640161039e565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d116001600051141617169150508061118f5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161039e565b5050505050565b6703782dace9d900008311156111c2576040516305bf279d60e41b81526004810184905260240161039e565b60008481526003602052604081205412156111f357604051635c8aa24760e11b81526004810185905260240161039e565b6000848152600360205260408120541315611224576040516304daa62560e21b81526004810185905260240161039e565b604080517f582b2ba4cf2b931b2e1a054db15a958a1d2222e9e884ffc3c15f79da7d0177ba6020808301919091528183018790526060808301879052835180840390910181526080830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a084015260bc8084018290528451808503909101815260dc909301909352815191012060006112fd8286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061133b92505050565b9050876001600160a01b0316816001600160a01b031614611331576040516324a0dbd760e21b815260040160405180910390fd5b5050505050505050565b600080600061134a858561135f565b91509150611357816113cd565b509392505050565b60008082516041036113955760208301516040840151606085015160001a61138987828585611586565b945094505050506113c6565b82516040036113be57602083015160408401516113b3868383611673565b9350935050506113c6565b506000905060025b9250929050565b60008160048111156113e1576113e1611cb8565b036113e95750565b60018160048111156113fd576113fd611cb8565b0361144a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161039e565b600281600481111561145e5761145e611cb8565b036114ab5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161039e565b60038160048111156114bf576114bf611cb8565b036115175760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161039e565b600481600481111561152b5761152b611cb8565b036115835760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161039e565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156115bd575060009050600361166a565b8460ff16601b141580156115d557508460ff16601c14155b156115e6575060009050600461166a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561163a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166116635760006001925092505061166a565b9150600090505b94509492505050565b6000806001600160ff1b0383168161169060ff86901c601b611cce565b905061169e87828885611586565b935093505050935093915050565b6001600160a01b038116811461158357600080fd5b80356116cc816116ac565b919050565b801515811461158357600080fd5b600080604083850312156116f257600080fd5b82356116fd816116ac565b9150602083013561170d816116d1565b809150509250929050565b60006020828403121561172a57600080fd5b8135611735816116ac565b9392505050565b600080600080600080600080610100898b03121561175957600080fd5b8835611764816116ac565b97506020890135611774816116ac565b965060408901359550606089013594506080890135935060a0890135611799816116ac565b979a969950949793969295929450505060c08201359160e0013590565b600080600080600080600060e0888a0312156117d157600080fd5b87356117dc816116ac565b965060208801356117ec816116ac565b955060408801359450606088013593506080880135925060a0880135611811816116ac565b8092505060c0880135905092959891949750929550565b6000806040838503121561183b57600080fd5b82359150602083013567ffffffffffffffff81111561185957600080fd5b8301610100818603121561170d57600080fd5b60006020828403121561187e57600080fd5b5035919050565b60008060008060008060c0878903121561189e57600080fd5b86356118a9816116ac565b955060208701356118b9816116ac565b945060408701359350606087013592506080870135915060a08701356118de816116ac565b809150509295509295509295565b60008083601f8401126118fe57600080fd5b50813567ffffffffffffffff81111561191657600080fd5b6020830191508360208285010111156113c657600080fd5b60008060008060008060008060008060006101408c8e03121561195057600080fd5b8b3561195b816116ac565b9a5060208c013561196b816116ac565b995060408c0135985060608c0135975060808c0135965060a08c0135611990816116ac565b955060c08c0135945060e08c01356119a7816116ac565b93506101008c013592506101208c013567ffffffffffffffff8111156119cc57600080fd5b6119d88e828f016118ec565b915080935050809150509295989b509295989b9093969950565b6000806000806000806000806000806000806101608d8f031215611a1557600080fd5b611a1f8d356116ac565b8c359b50611a3060208e01356116ac565b60208d01359a5060408d0135995060608d0135985060808d01359750611a5860a08e016116c1565b965060c08d0135955060e08d01359450611a756101008e016116c1565b93506101208d0135925067ffffffffffffffff6101408e01351115611a9957600080fd5b611aaa8e6101408f01358f016118ec565b81935080925050509295989b509295989b509295989b565b600060208284031215611ad457600080fd5b8151611735816116d1565b634e487b7160e01b600052601160045260246000fd5b600082821015611b0757611b07611adf565b500390565b6000600160ff1b8201611b2157611b21611adf565b5060000390565b6000816000190483118215151615611b4257611b42611adf565b500290565b600082611b6457634e487b7160e01b600052601260045260246000fd5b500490565b600060018060a01b038088168352602081881681850152818716604085015285606085015260a06080850152845191508160a085015260005b82811015611bbe5785810182015185820160c001528101611ba2565b82811115611bd057600060c084870101525b5050601f01601f19169190910160c0019695505050505050565b600060208284031215611bfc57600080fd5b5051919050565b6000808335601e19843603018112611c1a57600080fd5b83018035915067ffffffffffffffff821115611c3557600080fd5b6020019150368190038213156113c657600080fd5b600080600060608486031215611c5f57600080fd5b833592506020840135611c71816116ac565b929592945050506040919091013590565b600060208284031215611c9457600080fd5b8135611735816116d1565b600060018201611cb157611cb1611adf565b5060010190565b634e487b7160e01b600052602160045260246000fd5b60008219821115611ce157611ce1611adf565b50019056fea2646970667358221220d4b04807a9b92af316f64575d8e0c355adb8979067c87ce0ab86bdfe7a5f7c6964736f6c634300080f0033608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350336000908152600360205260409020805460ff191660011790556110e58061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063c70a900f11610071578063c70a900f1461015e578063d6f8307f14610191578063daf9c210146101b4578063e6717ce7146101d7578063f7d3b58b146101f8578063fc361c381461020b57600080fd5b80630ffb1d8b146100b957806313af4035146100ce578063329e53be146100e1578063889590f1146100f45780638da5cb5b146101075780639d86698514610137575b600080fd5b6100cc6100c7366004610b44565b61021e565b005b6100cc6100dc366004610b77565b6102b1565b6100cc6100ef366004610b44565b610326565b6100cc610102366004610b44565b6103a8565b60005461011a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014a610145366004610b99565b61042a565b60405161012e989796959493929190610bea565b61018161016c366004610b77565b60036020526000908152604090205460ff1681565b604051901515815260200161012e565b61018161019f366004610b77565b60046020526000908152604090205460ff1681565b6101816101c2366004610b77565b60026020526000908152604090205460ff1681565b6101ea6101e5366004610c93565b610511565b60405190815260200161012e565b6101ea610206366004610cef565b61052a565b6100cc610219366004610d9c565b610804565b6000546001600160a01b031633146102515760405162461bcd60e51b815260040161024890610dbf565b60405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d9291015b60405180910390a25050565b6000546001600160a01b031633146102db5760405162461bcd60e51b815260040161024890610dbf565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103505760405162461bcd60e51b815260040161024890610dbf565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f8cc72bec7e2cf5979aefd933f40a28eb590098d522a5c458e497e71c5e6fa90f91016102a5565b6000546001600160a01b031633146103d25760405162461bcd60e51b815260040161024890610dbf565b6001600160a01b038216600081815260046020908152604091829020805460ff191685151590811790915591519182527f2bf32d6c1bf8a8d32ace419214cf1c0fa979b6ed1135840088771f67f25f104991016102a5565b600160208190526000918252604090912080549181015460028201546003830154600484015460058501546006860180546001600160a01b0398891698968716979587169690941694929360ff808416946101009094041692919061048e90610de5565b80601f01602080910402602001604051908101604052809291908181526020018280546104ba90610de5565b80156105075780601f106104dc57610100808354040283529160200191610507565b820191906000526020600020905b8154815290600101906020018083116104ea57829003601f168201915b5050505050905088565b600061052086868686866109ae565b9695505050505050565b3360009081526004602052604081205460ff1661055a576040516325c0cb7960e11b815260040160405180910390fd5b6001600160a01b03851660009081526002602052604090205460ff1661059e5760405163028511d160e51b81526001600160a01b0386166004820152602401610248565b6105ab33888888886109ae565b90506000808281526001602052604090206005015460ff1660028111156105d4576105d4610bb2565b146105f55760405163d5e880e960e01b815260048101829052602401610248565b6000604051806101000160405280336001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b031681526020018681526020016001600281111561065857610658610bb2565b815260200160001515815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505084815260016020818152604092839020855181546001600160a01b03199081166001600160a01b039283161783559287015182850180548516918316919091179055938601516002808301805485169287169290921790915560608701516003830180549094169516949094179091556080850151600482015560a085015160058201805496975087969295509093909260ff199092169190849081111561074857610748610bb2565b021790555060c08201516005820180549115156101000261ff001990921691909117905560e082015160068201906107809082610e84565b5050604080516001600160a01b03898116825260208201899052808b1693508b169185917f2609e116ca576195fecb47831f147fd6fee721377e4d88fff48807f3e9442a42910160405180910390a46107e46001600160a01b038716333088610a16565b6107f96001600160a01b038716883088610a16565b509695505050505050565b3360009081526003602052604090205460ff16610834576040516314e9dd3960e31b815260040160405180910390fd5b60008281526001602052604090206002600582015460ff16600281111561085d5761085d610bb2565b0361087e5760405163b677167760e01b815260048101849052602401610248565b6000816004015460026108919190610f44565b905082156108bf57600182015460038301546108ba916001600160a01b03918216911683610aa0565b6108e0565b600282015460038301546108e0916001600160a01b03918216911683610aa0565b60058201805461ffff19166101008515159081029190911760021790915560405190815284907fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a281546001600160a01b03163b156109a857815460405163734d162760e01b81526001600160a01b039091169063734d1627906109759087908690600401610fee565b600060405180830381600087803b15801561098f57600080fd5b505af11580156109a3573d6000803e3d6000fd5b505050505b50505050565b6040516bffffffffffffffffffffffff19606087811b8216602084015286811b8216603484015285811b8216604884015284901b16605c8201526070810182905260009060900160405160208183030381529060405280519060200120905095945050505050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610a995760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610248565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806109a85760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610248565b80356001600160a01b0381168114610b2f57600080fd5b919050565b80358015158114610b2f57600080fd5b60008060408385031215610b5757600080fd5b610b6083610b18565b9150610b6e60208401610b34565b90509250929050565b600060208284031215610b8957600080fd5b610b9282610b18565b9392505050565b600060208284031215610bab57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60038110610be657634e487b7160e01b600052602160045260246000fd5b9052565b600061010060018060a01b03808c1684526020818c1681860152818b166040860152818a166060860152886080860152610c2760a0860189610bc8565b86151560c08601528260e0860152855191508183860152600092505b81831015610c6257858301810151858401610120015291820191610c43565b5080821115610c7657600061012082860101525b601f01601f191692909201610120019a9950505050505050505050565b600080600080600060a08688031215610cab57600080fd5b610cb486610b18565b9450610cc260208701610b18565b9350610cd060408701610b18565b9250610cde60608701610b18565b949793965091946080013592915050565b60008060008060008060a08789031215610d0857600080fd5b610d1187610b18565b9550610d1f60208801610b18565b9450610d2d60408801610b18565b935060608701359250608087013567ffffffffffffffff80821115610d5157600080fd5b818901915089601f830112610d6557600080fd5b813581811115610d7457600080fd5b8a6020828501011115610d8657600080fd5b6020830194508093505050509295509295509295565b60008060408385031215610daf57600080fd5b82359150610b6e60208401610b34565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b600181811c90821680610df957607f821691505b602082108103610e1957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f821115610e7f57600081815260208120601f850160051c81016020861015610e5c5750805b601f850160051c820191505b81811015610e7b57828155600101610e68565b5050505b505050565b815167ffffffffffffffff811115610e9e57610e9e610e1f565b610eb281610eac8454610de5565b84610e35565b602080601f831160018114610ee75760008415610ecf5750858301515b600019600386901b1c1916600185901b178555610e7b565b600085815260208120601f198616915b82811015610f1657888601518255948401946001909101908401610ef7565b5085821015610f345787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000816000190483118215151615610f6c57634e487b7160e01b600052601160045260246000fd5b500290565b60008154610f7e81610de5565b808552602060018381168015610f9b5760018114610fb557610fe3565b60ff1985168884015283151560051b880183019550610fe3565b866000528260002060005b85811015610fdb5781548a8201860152908301908401610fc0565b890184019650505b505050505092915050565b8281526040602082015261101d6040820161101084546001600160a01b031690565b6001600160a01b03169052565b600061103360018401546001600160a01b031690565b6001600160a01b03908116606084015260028401548116608084015260038401541660a0830152600483015460c0830152600583015461107960e0840160ff8316610bc8565b61010061108f81850160ff8460081c1615159052565b610120840152506110a7610140830160068501610f71565b94935050505056fea2646970667358221220378e2adecaf12d8d961ecc660ca8a2e8d7f85594e2d186b05480fc09bda2009864736f6c634300080f003352656c617965722073686f756c64206861766520726563656976656420746f6b656e7341304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f500000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d52656c617965722073686f756c64206861766520726563656976656420746865207265626174652c2068697320626f6e64206261636b20616e642074686520646973707574657220626f6e642e44697370757465722073686f756c642068617665206c6f73742074686520626f6e64526563697069656e742073686f756c642068617665207265636569766564206e6f20746f6b656e73280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583426f6f6b2073686f756c64206e6f20746f6b656e496e2062616c616e6365206c656674526563697069656e742073686f756c6420686176652072656365697665642074686520726562617465885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d44697370757465722073686f756c64206861766520706f737465642074686520626f6e6444697370757465722073686f756c6420686176652072656365697665642069747320626f6e64202b207468652072656c6179657220626f6e64526571756573742044697370757465722073686f756c6420657175616c206469737075746572526571756573742063757272656e63792073686f756c6420657175616c20746f6b656e496e5265717565737420446174612073686f756c6420657175616c20726571756573742064617461426f6f6b2073686f756c6420686176652073706f6e736f726564207468652070726f706f73657220626f6e64a2646970667358221220047ec5c6bc3b2f442178074221cc517ca15533e547a3a73a75281c952e711dd964736f6c634300080f0033" . parse () . expect ("invalid bytecode")
        });
    pub struct DisputeTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for DisputeTest<M> {
        fn clone(&self) -> Self {
            DisputeTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for DisputeTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for DisputeTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(DisputeTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> DisputeTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), DISPUTETEST_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                DISPUTETEST_ABI.clone(),
                DISPUTETEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_SCRIPT` (0xf8ccbf47) function"]
        pub fn is_script(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([248, 204, 191, 71], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotCallOnPriceSettledIfNotOracle` (0x56edfbab) function"]
        pub fn test_cannot_call_on_price_settled_if_not_oracle(
            &self,
            caller: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([86, 237, 251, 171], caller)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotDisputeIfNotFilled` (0x2b56612b) function"]
        pub fn test_cannot_dispute_if_not_filled(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([43, 86, 97, 43], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotDisputeIfPeriodIsOver` (0x231c9c36) function"]
        pub fn test_cannot_dispute_if_period_is_over(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 28, 156, 54], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotDisputeTwice` (0xb5f38d04) function"]
        pub fn test_cannot_dispute_twice(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([181, 243, 141, 4], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testDispute` (0xc75b9644) function"]
        pub fn test_dispute(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([199, 91, 150, 68], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testOnPriceSettledCallback` (0x28b86878) function"]
        pub fn test_on_price_settled_callback(
            &self,
            answer: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([40, 184, 104, 120], answer)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `FeeCombinationSet` event"]
        pub fn fee_combination_set_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, FeeCombinationSetFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `SafeBlockThresholdSet` event"]
        pub fn safe_block_threshold_set_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, SafeBlockThresholdSetFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenWhitelisted` event"]
        pub fn token_whitelisted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenWhitelistedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputeSettled` event"]
        pub fn trade_dispute_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputed` event"]
        pub fn trade_disputed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeFilled` event"]
        pub fn trade_filled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeFilledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeRequested` event"]
        pub fn trade_requested_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeRequestedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeSettled` event"]
        pub fn trade_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `UpdatedFeeForTrade` event"]
        pub fn updated_fee_for_trade_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, UpdatedFeeForTradeFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_1_filter(&self) -> ethers::contract::builders::Event<M, LogArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_2_filter(&self) -> ethers::contract::builders::Event<M, LogArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_3_filter(&self) -> ethers::contract::builders::Event<M, LogArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_1_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_2_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_3_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, DisputeTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for DisputeTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "FeeCombinationSet",
        abi = "FeeCombinationSet(uint256,uint256,uint256)"
    )]
    pub struct FeeCombinationSetFilter {
        pub dispute_bond_pct: ethers::core::types::U256,
        pub trade_rebate_pct: ethers::core::types::U256,
        pub relayer_refund_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "SafeBlockThresholdSet", abi = "SafeBlockThresholdSet(uint256)")]
    pub struct SafeBlockThresholdSetFilter {
        pub new_safe_block_threshold: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokenWhitelisted", abi = "TokenWhitelisted(address,bool)")]
    pub struct TokenWhitelistedFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
        pub whitelisted: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeDisputeSettled",
        abi = "TradeDisputeSettled(address,uint256,bytes32,bool)"
    )]
    pub struct TradeDisputeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub dispute_id: [u8; 32],
        pub answer: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeDisputed",
        abi = "TradeDisputed(address,uint256,bytes32,uint256)"
    )]
    pub struct TradeDisputedFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub dispute_id: [u8; 32],
        pub filled_at_block: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeFilled",
        abi = "TradeFilled(address,uint256,uint256,uint256)"
    )]
    pub struct TradeFilledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeRequested",
        abi = "TradeRequested(address,address,uint256,uint256,uint256,address,uint256)"
    )]
    pub struct TradeRequestedFilter {
        #[ethevent(indexed)]
        pub token_in: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub token_out: ethers::core::types::Address,
        pub amount_in: ethers::core::types::U256,
        pub min_amount_out: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub to: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TradeSettled", abi = "TradeSettled(address,uint256,uint256)")]
    pub struct TradeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        pub filled_at_block: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "UpdatedFeeForTrade",
        abi = "UpdatedFeeForTrade(address,uint256,uint256)"
    )]
    pub struct UpdatedFeeForTradeFilter {
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        pub new_fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_array", abi = "log_array(uint256[])")]
    pub struct LogArray1Filter {
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_array", abi = "log_array(int256[])")]
    pub struct LogArray2Filter {
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_array", abi = "log_array(address[])")]
    pub struct LogArray3Filter {
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,uint256[])")]
    pub struct LogNamedArray1Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,int256[])")]
    pub struct LogNamedArray2Filter {
        pub key: String,
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,address[])")]
    pub struct LogNamedArray3Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum DisputeTestEvents {
        FeeCombinationSetFilter(FeeCombinationSetFilter),
        SafeBlockThresholdSetFilter(SafeBlockThresholdSetFilter),
        TokenWhitelistedFilter(TokenWhitelistedFilter),
        TradeDisputeSettledFilter(TradeDisputeSettledFilter),
        TradeDisputedFilter(TradeDisputedFilter),
        TradeFilledFilter(TradeFilledFilter),
        TradeRequestedFilter(TradeRequestedFilter),
        TradeSettledFilter(TradeSettledFilter),
        UpdatedFeeForTradeFilter(UpdatedFeeForTradeFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogArray1Filter(LogArray1Filter),
        LogArray2Filter(LogArray2Filter),
        LogArray3Filter(LogArray3Filter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedArray1Filter(LogNamedArray1Filter),
        LogNamedArray2Filter(LogNamedArray2Filter),
        LogNamedArray3Filter(LogNamedArray3Filter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for DisputeTestEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = FeeCombinationSetFilter::decode_log(log) {
                return Ok(DisputeTestEvents::FeeCombinationSetFilter(decoded));
            }
            if let Ok(decoded) = SafeBlockThresholdSetFilter::decode_log(log) {
                return Ok(DisputeTestEvents::SafeBlockThresholdSetFilter(decoded));
            }
            if let Ok(decoded) = TokenWhitelistedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TokenWhitelistedFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputeSettledFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TradeDisputeSettledFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TradeDisputedFilter(decoded));
            }
            if let Ok(decoded) = TradeFilledFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TradeFilledFilter(decoded));
            }
            if let Ok(decoded) = TradeRequestedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TradeRequestedFilter(decoded));
            }
            if let Ok(decoded) = TradeSettledFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TradeSettledFilter(decoded));
            }
            if let Ok(decoded) = UpdatedFeeForTradeFilter::decode_log(log) {
                return Ok(DisputeTestEvents::UpdatedFeeForTradeFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogArray1Filter::decode_log(log) {
                return Ok(DisputeTestEvents::LogArray1Filter(decoded));
            }
            if let Ok(decoded) = LogArray2Filter::decode_log(log) {
                return Ok(DisputeTestEvents::LogArray2Filter(decoded));
            }
            if let Ok(decoded) = LogArray3Filter::decode_log(log) {
                return Ok(DisputeTestEvents::LogArray3Filter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(DisputeTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedArray1Filter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedArray1Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray2Filter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedArray2Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray3Filter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedArray3Filter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for DisputeTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                DisputeTestEvents::FeeCombinationSetFilter(element) => element.fmt(f),
                DisputeTestEvents::SafeBlockThresholdSetFilter(element) => element.fmt(f),
                DisputeTestEvents::TokenWhitelistedFilter(element) => element.fmt(f),
                DisputeTestEvents::TradeDisputeSettledFilter(element) => element.fmt(f),
                DisputeTestEvents::TradeDisputedFilter(element) => element.fmt(f),
                DisputeTestEvents::TradeFilledFilter(element) => element.fmt(f),
                DisputeTestEvents::TradeRequestedFilter(element) => element.fmt(f),
                DisputeTestEvents::TradeSettledFilter(element) => element.fmt(f),
                DisputeTestEvents::UpdatedFeeForTradeFilter(element) => element.fmt(f),
                DisputeTestEvents::LogFilter(element) => element.fmt(f),
                DisputeTestEvents::LogAddressFilter(element) => element.fmt(f),
                DisputeTestEvents::LogArray1Filter(element) => element.fmt(f),
                DisputeTestEvents::LogArray2Filter(element) => element.fmt(f),
                DisputeTestEvents::LogArray3Filter(element) => element.fmt(f),
                DisputeTestEvents::LogBytesFilter(element) => element.fmt(f),
                DisputeTestEvents::LogBytes32Filter(element) => element.fmt(f),
                DisputeTestEvents::LogIntFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedArray1Filter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedArray2Filter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedArray3Filter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                DisputeTestEvents::LogStringFilter(element) => element.fmt(f),
                DisputeTestEvents::LogUintFilter(element) => element.fmt(f),
                DisputeTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_SCRIPT", abi = "IS_SCRIPT()")]
    pub struct IsScriptCall;
    #[doc = "Container type for all input parameters for the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `setUp` function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `testCannotCallOnPriceSettledIfNotOracle` function with signature `testCannotCallOnPriceSettledIfNotOracle(address)` and selector `[86, 237, 251, 171]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotCallOnPriceSettledIfNotOracle",
        abi = "testCannotCallOnPriceSettledIfNotOracle(address)"
    )]
    pub struct TestCannotCallOnPriceSettledIfNotOracleCall {
        pub caller: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `testCannotDisputeIfNotFilled` function with signature `testCannotDisputeIfNotFilled()` and selector `[43, 86, 97, 43]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotDisputeIfNotFilled",
        abi = "testCannotDisputeIfNotFilled()"
    )]
    pub struct TestCannotDisputeIfNotFilledCall;
    #[doc = "Container type for all input parameters for the `testCannotDisputeIfPeriodIsOver` function with signature `testCannotDisputeIfPeriodIsOver()` and selector `[35, 28, 156, 54]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotDisputeIfPeriodIsOver",
        abi = "testCannotDisputeIfPeriodIsOver()"
    )]
    pub struct TestCannotDisputeIfPeriodIsOverCall;
    #[doc = "Container type for all input parameters for the `testCannotDisputeTwice` function with signature `testCannotDisputeTwice()` and selector `[181, 243, 141, 4]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testCannotDisputeTwice", abi = "testCannotDisputeTwice()")]
    pub struct TestCannotDisputeTwiceCall;
    #[doc = "Container type for all input parameters for the `testDispute` function with signature `testDispute()` and selector `[199, 91, 150, 68]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testDispute", abi = "testDispute()")]
    pub struct TestDisputeCall;
    #[doc = "Container type for all input parameters for the `testOnPriceSettledCallback` function with signature `testOnPriceSettledCallback(bool)` and selector `[40, 184, 104, 120]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testOnPriceSettledCallback",
        abi = "testOnPriceSettledCallback(bool)"
    )]
    pub struct TestOnPriceSettledCallbackCall {
        pub answer: bool,
    }
    #[doc = "Container type for all input parameters for the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum DisputeTestCalls {
        IsScript(IsScriptCall),
        IsTest(IsTestCall),
        Failed(FailedCall),
        SetUp(SetUpCall),
        TestCannotCallOnPriceSettledIfNotOracle(TestCannotCallOnPriceSettledIfNotOracleCall),
        TestCannotDisputeIfNotFilled(TestCannotDisputeIfNotFilledCall),
        TestCannotDisputeIfPeriodIsOver(TestCannotDisputeIfPeriodIsOverCall),
        TestCannotDisputeTwice(TestCannotDisputeTwiceCall),
        TestDispute(TestDisputeCall),
        TestOnPriceSettledCallback(TestOnPriceSettledCallbackCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for DisputeTestCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <IsScriptCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::IsScript(decoded));
            }
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::SetUp(decoded));
            }
            if let Ok (decoded) = < TestCannotCallOnPriceSettledIfNotOracleCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (DisputeTestCalls :: TestCannotCallOnPriceSettledIfNotOracle (decoded)) }
            if let Ok(decoded) =
                <TestCannotDisputeIfNotFilledCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(DisputeTestCalls::TestCannotDisputeIfNotFilled(decoded));
            }
            if let Ok(decoded) =
                <TestCannotDisputeIfPeriodIsOverCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(DisputeTestCalls::TestCannotDisputeIfPeriodIsOver(decoded));
            }
            if let Ok(decoded) =
                <TestCannotDisputeTwiceCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::TestCannotDisputeTwice(decoded));
            }
            if let Ok(decoded) =
                <TestDisputeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::TestDispute(decoded));
            }
            if let Ok(decoded) =
                <TestOnPriceSettledCallbackCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(DisputeTestCalls::TestOnPriceSettledCallback(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DisputeTestCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for DisputeTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                DisputeTestCalls::IsScript(element) => element.encode(),
                DisputeTestCalls::IsTest(element) => element.encode(),
                DisputeTestCalls::Failed(element) => element.encode(),
                DisputeTestCalls::SetUp(element) => element.encode(),
                DisputeTestCalls::TestCannotCallOnPriceSettledIfNotOracle(element) => {
                    element.encode()
                }
                DisputeTestCalls::TestCannotDisputeIfNotFilled(element) => element.encode(),
                DisputeTestCalls::TestCannotDisputeIfPeriodIsOver(element) => element.encode(),
                DisputeTestCalls::TestCannotDisputeTwice(element) => element.encode(),
                DisputeTestCalls::TestDispute(element) => element.encode(),
                DisputeTestCalls::TestOnPriceSettledCallback(element) => element.encode(),
                DisputeTestCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for DisputeTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                DisputeTestCalls::IsScript(element) => element.fmt(f),
                DisputeTestCalls::IsTest(element) => element.fmt(f),
                DisputeTestCalls::Failed(element) => element.fmt(f),
                DisputeTestCalls::SetUp(element) => element.fmt(f),
                DisputeTestCalls::TestCannotCallOnPriceSettledIfNotOracle(element) => {
                    element.fmt(f)
                }
                DisputeTestCalls::TestCannotDisputeIfNotFilled(element) => element.fmt(f),
                DisputeTestCalls::TestCannotDisputeIfPeriodIsOver(element) => element.fmt(f),
                DisputeTestCalls::TestCannotDisputeTwice(element) => element.fmt(f),
                DisputeTestCalls::TestDispute(element) => element.fmt(f),
                DisputeTestCalls::TestOnPriceSettledCallback(element) => element.fmt(f),
                DisputeTestCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsScriptCall> for DisputeTestCalls {
        fn from(var: IsScriptCall) -> Self {
            DisputeTestCalls::IsScript(var)
        }
    }
    impl ::std::convert::From<IsTestCall> for DisputeTestCalls {
        fn from(var: IsTestCall) -> Self {
            DisputeTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<FailedCall> for DisputeTestCalls {
        fn from(var: FailedCall) -> Self {
            DisputeTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for DisputeTestCalls {
        fn from(var: SetUpCall) -> Self {
            DisputeTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<TestCannotCallOnPriceSettledIfNotOracleCall> for DisputeTestCalls {
        fn from(var: TestCannotCallOnPriceSettledIfNotOracleCall) -> Self {
            DisputeTestCalls::TestCannotCallOnPriceSettledIfNotOracle(var)
        }
    }
    impl ::std::convert::From<TestCannotDisputeIfNotFilledCall> for DisputeTestCalls {
        fn from(var: TestCannotDisputeIfNotFilledCall) -> Self {
            DisputeTestCalls::TestCannotDisputeIfNotFilled(var)
        }
    }
    impl ::std::convert::From<TestCannotDisputeIfPeriodIsOverCall> for DisputeTestCalls {
        fn from(var: TestCannotDisputeIfPeriodIsOverCall) -> Self {
            DisputeTestCalls::TestCannotDisputeIfPeriodIsOver(var)
        }
    }
    impl ::std::convert::From<TestCannotDisputeTwiceCall> for DisputeTestCalls {
        fn from(var: TestCannotDisputeTwiceCall) -> Self {
            DisputeTestCalls::TestCannotDisputeTwice(var)
        }
    }
    impl ::std::convert::From<TestDisputeCall> for DisputeTestCalls {
        fn from(var: TestDisputeCall) -> Self {
            DisputeTestCalls::TestDispute(var)
        }
    }
    impl ::std::convert::From<TestOnPriceSettledCallbackCall> for DisputeTestCalls {
        fn from(var: TestOnPriceSettledCallbackCall) -> Self {
            DisputeTestCalls::TestOnPriceSettledCallback(var)
        }
    }
    impl ::std::convert::From<VmCall> for DisputeTestCalls {
        fn from(var: VmCall) -> Self {
            DisputeTestCalls::Vm(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsScriptReturn(pub bool);
    #[doc = "Container type for all return fields from the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsTestReturn(pub bool);
    #[doc = "Container type for all return fields from the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct FailedReturn(pub bool);
    #[doc = "Container type for all return fields from the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct VmReturn(pub ethers::core::types::Address);
}
