pub use disputetest_mod::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod disputetest_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "DisputeTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static DISPUTETEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newMaxFeePct\",\"type\":\"uint128\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MaxFeePctChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSafeBlockThreshold\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"SafeBlockThresholdChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeDisputed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeFilled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeRequested\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"newFeePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"UpdatedFeeForTrade\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"WARNING_Deprecated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"adjust\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rewind\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"skip\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotDisputeIfNotFilled\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotDisputeIfPeriodIsOver\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testDispute\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tip\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static DISPUTETEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060408190526000805460ff191660011790556001625e79b760e01b031990527f81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a608452737109709ecfa91a80626ff3989d68f67f5b1dd12d63ffa1864960a46020604051808303816000875af115801562000080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a6919062000607565b600880546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b66004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156200013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000161919062000607565b600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f9791f723bf26b668c8cac0664b66d058cdb2a424cfb08c05dd9da570be0eff6f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015620001f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021c919062000607565b600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002bb73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506006604051602001620002a5919062000632565b60408051601f1981840301815291905262000430565b600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200038c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506012604051602001620002a591906060808252600d908201526c2bb930b83832b21022ba3432b960991b608082015260a060208201819052600490820152630ae8aa8960e31b60c082015260ff91909116604082015260e00190565b600c80546001600160a01b039283166001600160a01b031991821681179092556064600f55601080548216909217909155600b54601180548316918416919091179055662386f26fc10000601255670de0b6b3a7640000601355600a546014805483169184169182179055600954601780548416919094161790925560188054909116909117905563773594006019553480156200042957600080fd5b506200080f565b60006001600160a01b0384163b80156200044e5784915050620004cc565b60006200045c8585620004d3565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200049d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004c7919081019062000752565b509150505b9392505050565b604051638d1cc92560e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc9259062000511908790600401620007a7565b6000604051808303816000875af115801562000531573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200055b919081019062000752565b836040516020016200056f929190620007dc565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620006005760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b606482015260840160405180910390fd5b5092915050565b6000602082840312156200061a57600080fd5b81516001600160a01b0381168114620004cc57600080fd5b606081526000620006576060830160048152635553444360e01b602082015260400190565b82810360208401526200067b8160048152635553444360e01b602082015260400190565b91505060ff8316604083015292915050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620006c0578181015183820152602001620006a6565b83811115620006d0576000848401525b50505050565b60006001600160401b0380841115620006f357620006f36200068d565b604051601f8501601f19908116603f011681019082821181831017156200071e576200071e6200068d565b816040528093508581528686860111156200073857600080fd5b62000748866020830187620006a3565b5050509392505050565b6000602082840312156200076557600080fd5b81516001600160401b038111156200077c57600080fd5b8201601f810184136200078e57600080fd5b6200079f84825160208401620006d6565b949350505050565b6020815260008251806020840152620007c8816040850160208701620006a3565b601f01601f19169190910160400192915050565b60008351620007f0818460208801620006a3565b83519083019062000806818360208801620006a3565b01949350505050565b617e5d806200081f6000396000f3fe60806040523480156200001157600080fd5b5060043610620001755760003560e01c80636f59707511620000d3578063c75b96441162000086578063c75b96441462000323578063c88a5e6d146200032d578063d06d82291462000344578063d82555f1146200035b578063e9a79a7b1462000372578063fa7626d4146200038957600080fd5b80636f597075146200029557806397754ae914620002ac5780639a8325a014620002c3578063af9bbe5f14620002da578063b9c071b414620002f1578063ba414fa6146200030857600080fd5b80632b56612b116200012c5780632b56612b14620002095780632d6c17a314620002135780633a768463146200022a5780633bf82db114620002415780635a6c1eed14620002585780636bce989b146200027e57600080fd5b80630a9254e4146200017a578063108554f21462000186578063231c9c36146200019d578063233240ee14620001a757806329a9e30014620001be57806329ce9dde14620001d5575b600080fd5b6200018462000397565b005b620001846200019736600462004c34565b62000508565b62000184620005e1565b62000184620001b836600462004c63565b620006f4565b62000184620001cf36600462004c8a565b620007d0565b620001ec620001e636600462004da3565b62000882565b6040516001600160a01b0390911681526020015b60405180910390f35b62000184620009b2565b620001846200022436600462004e23565b62000b32565b620001ec60008051602062007c4383398151915281565b620001846200025236600462004e3d565b62000b72565b6200026f6200026936600462004e83565b62000c54565b60405190815260200162000200565b620001846200028f36600462004e3d565b62000d8d565b62000184620002a636600462004c63565b62000da1565b62000184620002bd36600462004ebf565b62000e4b565b620001ec620002d436600462004f19565b6200108c565b62000184620002eb36600462004e3d565b6200118e565b620001846200030236600462004e23565b6200123c565b620003126200125d565b604051901515815260200162000200565b620001846200138e565b620001846200033e36600462004c34565b62001eaa565b620001846200035536600462004c8a565b62001ee0565b620001846200036c36600462004e3d565b62001f92565b620001846200038336600462004c34565b62002043565b600054620003129060ff1681565b620003a1620020e9565b601054600854601354620003c3926001600160a01b0390811692169062000d8d565b6010546011546013546012546014546008546000958695620003fe956001600160a01b0392831695918316949093919290811691166200283e565b601580546fffffffffffffffffffffffffffffffff19166001600160801b038416179055601681905560115460175460195493955091935062000452926001600160a01b0391821692919091169062000d8d565b60175460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007c438339815191529063ca669fa790602401600060405180830381600087803b158015620004a757600080fd5b505af1158015620004bc573d6000803e3d6000fd5b50506010546011546013546012546014546015546019546200050498506001600160a01b0396871697509486169593949293909116916001600160801b0390911690620029ef565b5050565b60405163c88a5e6d60e01b815260008051602062007c438339815191529063c88a5e6d906200053e908590859060040162004f5a565b600060405180830381600087803b1580156200055957600080fd5b505af11580156200056e573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b038516600482015260008051602062007c4383398151915292506306447d5691506024015b600060405180830381600087803b158015620005c457600080fd5b505af1158015620005d9573d6000803e3d6000fd5b505050505050565b620005fc600f546001620005f6919062004f89565b62002a8d565b604051630618f58760e51b8152632c02744560e11b600482015260008051602062007c438339815191529063c31eb0e090602401600060405180830381600087803b1580156200064b57600080fd5b505af115801562000660573d6000803e3d6000fd5b5050600e5460105460115460135460125460145460155460405163fbc534ef60e01b81526001600160a01b03978816995063fbc534ef9850620006be979687169695861695909216916001600160801b039091169060040162004fa4565b600060405180830381600087803b158015620006d957600080fd5b505af1158015620006ee573d6000803e3d6000fd5b50505050565b60405163c88a5e6d60e01b815260008051602062007c438339815191529063c88a5e6d906200072e908490600160801b9060040162004f5a565b600060405180830381600087803b1580156200074957600080fd5b505af11580156200075e573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038416600482015260008051602062007c43833981519152925063ca669fa791506024015b600060405180830381600087803b158015620007b457600080fd5b505af1158015620007c9573d6000803e3d6000fd5b5050505050565b60405163c88a5e6d60e01b815260008051602062007c438339815191529063c88a5e6d906200080a908590600160801b9060040162004f5a565b600060405180830381600087803b1580156200082557600080fd5b505af11580156200083a573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b0380861660048301528416602482015260008051602062007c4383398151915292506347e50cce9150604401620005a9565b604051638d1cc92560e01b8152600090819060008051602062007c4383398151915290638d1cc92590620008bb90879060040162005044565b6000604051808303816000875af1158015620008db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000905919081019062005059565b8360405160200162000919929190620050d9565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620009ab5760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b60648201526084015b60405180910390fd5b5092915050565b6010546011546013546000926001600160a01b03908116921690620009d990600162004f89565b60125460145460155460405162000a0b96959493926001600160a01b0316916001600160801b03169060200162004fa4565b60408051601f1981840301815282825280516020918201206024808501829052835180860390910181526044909401835290830180516001600160e01b031663cc4f06a160e01b179052905163f28dceb360e01b815290925060008051602062007c438339815191529163f28dceb39162000a8a919060040162005044565b600060405180830381600087803b15801562000aa557600080fd5b505af115801562000aba573d6000803e3d6000fd5b5050600e546010546011546013546001600160a01b03938416955063fbc534ef945091831692169062000aef90600162004f89565b6012546014546015546040516001600160e01b031960e089901b1681526200079996959493926001600160a01b0316916001600160801b03169060040162004fa4565b60008051602062007c4383398151915263e5d6bf0262000b5383426200510c565b6040518263ffffffff1660e01b81526004016200079991815260200190565b60405163c88a5e6d60e01b815260008051602062007c438339815191529063c88a5e6d9062000ba8908690859060040162004f5a565b600060405180830381600087803b15801562000bc357600080fd5b505af115801562000bd8573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b0380871660048301528516602482015260008051602062007c4383398151915292506345b5607891506044015b600060405180830381600087803b15801562000c3657600080fd5b505af115801562000c4b573d6000803e3d6000fd5b50505050505050565b60008183111562000cce5760405162461bcd60e51b815260206004820152603a60248201527f5465737420626f756e642875696e743235362c75696e743235362c75696e743260448201527f3536293a204d6178206973206c657373207468616e206d696e2e0000000000006064820152608401620009a2565b600062000cdc84846200510c565b90508060000362000cf05783915062000d30565b600019810362000d035784915062000d30565b62000d0e8162005126565b9050600062000d1e828762005142565b905062000d2c818662004f89565b9250505b60408051818152600c818301526b109bdd5b990814995cdd5b1d60a21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1509392505050565b62000d9c838383600062000e4b565b505050565b60405163c88a5e6d60e01b815260008051602062007c438339815191529063c88a5e6d9062000ddb908490600160801b9060040162004f5a565b600060405180830381600087803b15801562000df657600080fd5b505af115801562000e0b573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b038416600482015260008051602062007c4383398151915292506306447d56915060240162000799565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009287169162000ea19162005165565b6000604051808303816000865af19150503d806000811462000ee0576040519150601f19603f3d011682016040523d82523d6000602084013e62000ee5565b606091505b5091505060008180602001905181019062000f01919062005183565b905062000f738462000f6c8762000f436370a0823160e01b62000f2660018d62002ad2565b9060038201805463ffffffff191660e09290921c91909117905590565b90600282018054600181018255600091825260209091206001600160a01b039290921691015590565b9062002af7565b8215620005d95760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290516000916001600160a01b0389169162000fbe919062005165565b6000604051808303816000865af19150503d806000811462000ffd576040519150601f19603f3d011682016040523d82523d6000602084013e62001002565b606091505b509150506000818060200190518101906200101e919062005183565b90508286101562001049576200103586846200510c565b6200104190826200510c565b905062001064565b6200105583876200510c565b62001061908262004f89565b90505b620010828162000f6c6318160ddd60e01b62000f2660018d62002ad2565b5050505050505050565b604051638d1cc92560e01b8152600090819060008051602062007c4383398151915290638d1cc92590620010c590869060040162005044565b6000604051808303816000875af1158015620010e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200110f919081019062005059565b90508051602082016000f091506001600160a01b038216620011885760405162461bcd60e51b815260206004820152602b60248201527f54657374206465706c6f79436f646528737472696e67293a204465706c6f796d60448201526a32b73a103330b4b632b21760a91b6064820152608401620009a2565b50919050565b60405163c88a5e6d60e01b815260008051602062007c438339815191529063c88a5e6d90620011c4908690859060040162004f5a565b600060405180830381600087803b158015620011df57600080fd5b505af1158015620011f4573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b0380871660048301528516602482015260008051602062007c4383398151915292506347e50cce915060440162000c1b565b60008051602062007c4383398151915263e5d6bf0262000b53834262004f89565b60008054610100900460ff16156200127e5750600054610100900460ff1690565b600060008051602062007c438339815191523b15620013895760405160009060008051602062007c43833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc490620012eb9083906519985a5b195960d21b9060200162004f5a565b60408051601f19818403018152908290526200130b92916020016200519d565b60408051601f1981840301815290829052620013279162005165565b6000604051808303816000865af19150503d806000811462001366576040519150601f19603f3d011682016040523d82523d6000602084013e6200136b565b606091505b5091505080806020019051810190620013859190620051d0565b9150505b919050565b601654600e54600091620013e991620013e39190620013c7906302c82def60e21b9062000f26906001906001600160a01b031662002ad2565b9060028201805460018101825560009182526020909120015590565b62002b03565b9050620014138160195460405180606001604052806030815260200162007d7d6030913962002b2b565b601654600e5460009162001452916200144c9190620013c79063d70e3dfd60e01b9062000f26906001906001600160a01b031662002ad2565b62002b67565b60175460408051606081019091526028808252929350620014899284926001600160a01b0316919062007c63602083013962002b89565b601654600e54600091620014c291620013e39190620013c790639501325f60e01b9062000f26906001906001600160a01b031662002ad2565b9050620014ea81436040518060600160405280603b815260200162007c8b603b913962002b2b565b600d546019546040516303ef4cfb60e11b815260048101919091526000916001600160a01b0316906307de99f690602401602060405180830381865afa15801562001539573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200155f919062005183565b60115460185491925062001581916001600160a01b0391821691168362000d8d565b601154600e546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015620015d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015f9919062005183565b6011546018546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa1580156200164c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001672919062005183565b60185460405163ca669fa760e01b81526001600160a01b03909116600482015290915060008051602062007c438339815191529063ca669fa790602401600060405180830381600087803b158015620016ca57600080fd5b505af1158015620016df573d6000803e3d6000fd5b5050601154600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200171e92909116906000199060040162004f5a565b6020604051808303816000875af11580156200173e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620017649190620051d0565b5060185460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062007c438339815191529063ca669fa790602401600060405180830381600087803b158015620017ba57600080fd5b505af1158015620017cf573d6000803e3d6000fd5b5050600e546040516381bad6f360e01b8152600160048201819052602482018190526044820181905260648201526001600160a01b03909116608482015260008051602062007c4383398151915292506381bad6f3915060a401600060405180830381600087803b1580156200184457600080fd5b505af115801562001859573d6000803e3d6000fd5b50506019546016546017546012546040519081529294509092506001600160a01b0316907fbfb0e6d8f5102fdad9ead2713eec1014861fe90e38a91786fb5c610873c38ad89060200160405180910390a4600e5460105460115460135460125460145460155460405163fbc534ef60e01b81526001600160a01b039788169763fbc534ef9762001907979082169690821695909490939116916001600160801b039091169060040162004fa4565b600060405180830381600087803b1580156200192257600080fd5b505af115801562001937573d6000803e3d6000fd5b5050601754601854601154601954604080516001600160a01b0395861660208201529385169084015292166060820152608081019190915260a081018690526000925060c001905060408051601f19818403018152908290528051602090910120600d54639d86698560e01b8352600483018290529092506000918291829182918291829182916001600160a01b0390911690639d8669859060240160e060405180830381865afa158015620019f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a179190620051f0565b965096509650965096509650965062001a6087601760009054906101000a90046001600160a01b031660405180606001604052806027815260200162007dd16027913962002b89565b6018546040805160608101909152602880825262001a959289926001600160a01b039091169162007ce6602083013962002b89565b6011546040805160608101909152603080825262001aca9288926001600160a01b039091169162007df8602083013962002b89565b62001af28460195460405180606001604052806028815260200162007d0e6028913962002b2b565b62001b34838c6040518060400160405280602081526020017f426f6e642073686f756c6420626520657175616c20746f2074686520626f6e6481525062002b2b565b62001b778260006040518060400160405280601f81526020017f416e737765722073686f756c6420626520657175616c20746f2066616c73650081525062002bd7565b62001bce81600281111562001b905762001b9062005287565b60016040518060400160405280602081526020017f53746174652073686f756c6420626520657175616c20746f2050656e64696e6781525062002b2b565b601154600e546040516370a0823160e01b81526001600160a01b03918216600482015262001c779291909116906370a0823190602401602060405180830381865afa15801562001c22573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c48919062005183565b60195462001c57908d6200510c565b60405180606001604052806027815260200162007d566027913962002b2b565b6011546018546040516370a0823160e01b81526001600160a01b03918216600482015262001d1d9291909116906370a0823190602401602060405180830381865afa15801562001ccb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001cf1919062005183565b62001cfd8d8c6200510c565b60405180606001604052806024815260200162007dad6024913962002b2b565b601654600e5460009162001d5691620013e39190620013c7906302c82def60e21b9062000f26906001906001600160a01b031662002ad2565b905062001d9b8160006040518060400160405280601d81526020017f46696c6c656420616d6f756e742073686f756c6420626520756e73657400000081525062002b2b565b601654600e5460009162001dd4916200144c9190620013c79063d70e3dfd60e01b9062000f26906001906001600160a01b031662002ad2565b905062001e198160006040518060400160405280601981526020017f46696c6c65642062792073686f756c6420626520756e7365740000000000000081525062002b89565b601654600e5460009162001e5291620013e39190620013c790639501325f60e01b9062000f26906001906001600160a01b031662002ad2565b905062001e978160006040518060400160405280601f81526020017f46696c6c656420617420626c6f636b2073686f756c6420626520756e7365740081525062002b2b565b5050505050505050505050505050505050565b60405163c88a5e6d60e01b815260008051602062007c438339815191529063c88a5e6d90620005a9908590859060040162004f5a565b60405163c88a5e6d60e01b815260008051602062007c438339815191529063c88a5e6d9062001f1a908590600160801b9060040162004f5a565b600060405180830381600087803b15801562001f3557600080fd5b505af115801562001f4a573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b0380861660048301528416602482015260008051602062007c4383398151915292506345b560789150604401620005a9565b7f42b963ace015abb7c727e77dec115c5f418f4f96d9ec897f85c202793274661a60405162002018906020808252603b908201527f54686520607469706020737464636865617420686173206265656e206465707260408201527f6563617465642e2055736520606465616c6020696e73746561642e0000000000606082015260800190565b60405180910390a162000d9c8162000f6c8462000f436370a0823160e01b62000f2660018a62002ad2565b60405163c88a5e6d60e01b815260008051602062007c438339815191529063c88a5e6d9062002079908590859060040162004f5a565b600060405180830381600087803b1580156200209457600080fd5b505af1158015620020a9573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038516600482015260008051602062007c43833981519152925063ca669fa79150602401620005a9565b620020f362002c17565b600e54600b54604051630ffb1d8b60e01b81526001600160a01b03918216600482015260016024820152911690630ffb1d8b90604401600060405180830381600087803b1580156200214457600080fd5b505af115801562002159573d6000803e3d6000fd5b5050600e54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b158015620021ae57600080fd5b505af1158015620021c3573d6000803e3d6000fd5b5050600b54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152635553444360e01b606482015260008051602062007c43833981519152925063c657c7189150608401600060405180830381600087803b1580156200223b57600080fd5b505af115801562002250573d6000803e3d6000fd5b5050600c54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152630ae8aa8960e31b606482015260008051602062007c43833981519152925063c657c7189150608401600060405180830381600087803b158015620022c857600080fd5b505af1158015620022dd573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c4383398151915292506306447d569150602401600060405180830381600087803b1580156200233657600080fd5b505af11580156200234b573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200238a92909116906000199060040162004f5a565b6020604051808303816000875af1158015620023aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620023d09190620051d0565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200240b929116906000199060040162004f5a565b6020604051808303816000875af11580156200242b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620024519190620051d0565b50604080516390c5013b60e01b8152905160008051602062007c43833981519152916390c5013b91600480830192600092919082900301818387803b1580156200249a57600080fd5b505af1158015620024af573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c4383398151915292506306447d569150602401600060405180830381600087803b1580156200250857600080fd5b505af11580156200251d573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200255c92909116906000199060040162004f5a565b6020604051808303816000875af11580156200257c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025a29190620051d0565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620025dd929116906000199060040162004f5a565b6020604051808303816000875af1158015620025fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620026239190620051d0565b50604080516390c5013b60e01b8152905160008051602062007c43833981519152916390c5013b91600480830192600092919082900301818387803b1580156200266c57600080fd5b505af115801562002681573d6000803e3d6000fd5b5050600a546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c4383398151915292506306447d569150602401600060405180830381600087803b158015620026da57600080fd5b505af1158015620026ef573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200272e92909116906000199060040162004f5a565b6020604051808303816000875af11580156200274e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027749190620051d0565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620027af929116906000199060040162004f5a565b6020604051808303816000875af1158015620027cf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027f59190620051d0565b50604080516390c5013b60e01b8152905160008051602062007c43833981519152916390c5013b91600480830192600092919082900301818387803b158015620006d957600080fd5b6000806000600e60009054906101000a90046001600160a01b03166001600160a01b031663cd805d5e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002897573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620028bd91906200529d565b90506000898989898986604051602001620028de9695949392919062004fa4565b60408051808303601f1901815290829052805160209091012063ca669fa760e01b82526001600160a01b0387166004830152915060008051602062007c438339815191529063ca669fa790602401600060405180830381600087803b1580156200294757600080fd5b505af11580156200295c573d6000803e3d6000fd5b5050600e54604051639170c05b60e01b81526001600160a01b038e811660048301528d81166024830152604482018d9052606482018c90528a811660848301529091169250639170c05b915060a401600060405180830381600087803b158015620029c657600080fd5b505af1158015620029db573d6000803e3d6000fd5b50939c929b50919950505050505050505050565b600e54604051634159761f60e11b81526001600160a01b0389811660048301528881166024830152604482018890526064820187905285811660848301526001600160801b03851660a483015260c48201849052909116906382b2ec3e9060e401600060405180830381600087803b15801562002a6b57600080fd5b505af115801562002a80573d6000803e3d6000fd5b5050505050505050505050565b600062002a9b824362004f89565b6040516301f7b4f360e41b81526004810182905290915060008051602062007c4383398151915290631f7b4f3090602401620005a9565b6005820180546001600160a01b0319166001600160a01b039290921691909117905590565b62000504828262002ce6565b600062002b1082620030e1565b80602001905181019062002b25919062005183565b92915050565b81831462000d9c5760008051602062007cc68339815191528160405162002b539190620052c8565b60405180910390a162000d9c8383620031a9565b600062002b7482620030e1565b80602001905181019062002b259190620052f9565b816001600160a01b0316836001600160a01b03161462000d9c5760008051602062007cc68339815191528160405162002bc39190620052c8565b60405180910390a162000d9c8383620032a0565b8115158315151462000d9c5760008051602062007cc68339815191528160405162002c039190620052c8565b60405180910390a162000d9c83836200339a565b62002c21620034ef565b600f54600d546040516001600160a01b039091169062002c419062004bc4565b9182526001600160a01b03166020820152604001604051809103906000f08015801562002c72573d6000803e3d6000fd5b50600e80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b81526004808201939093526024810191909152604481019190915263426f6f6b60e01b606482015260008051602062007c438339815191529063c657c71890608401620006be565b600582015460038301546004840154600285018054604080516020808402820181019092528281526001600160a01b039096169560e09590951b946000939092909183018282801562002d5957602002820191906000526020600020905b81548152602001906001019080831162002d44575b5050505050905060008362002d6e8362003a17565b60405160200162002d819291906200519d565b60408051601f198184030181528282526001600160a01b038816600090815260018b0160209081528382206001600160e01b03198a16835281529281209194509092909162002dd591869188910162005319565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff1662002e105762002e0e8762003ac4565b505b6001600160a01b0385166000908152602088815260408083206001600160e01b031988168452825280832090519091839162002e5191879189910162005319565b6040516020818303038152906040528051906020012081526020019081526020016000205460001b9050600080876001600160a01b03168460405162002e98919062005165565b600060405180830381855afa9150503d806000811462002ed5576040519150601f19603f3d011682016040523d82523d6000602084013e62002eda565b606091505b50915062002ef790508162002ef188602062005355565b6200484c565b604051630667f9d760e41b81529092506000915060008051602062007c438339815191529063667f9d709062002f34908b90879060040162004f5a565b6020604051808303816000875af115801562002f54573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f7a919062005183565b9050808214620030305760405162461bcd60e51b815260206004820152606e60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526d39b73a1039bab83837b93a32b21760911b60a482015260c401620009a2565b6040516370ca10bb60e01b815260008051602062007c43833981519152906370ca10bb9062003068908b9087908e9060040162005377565b600060405180830381600087803b1580156200308357600080fd5b505af115801562003098573d6000803e3d6000fd5b50505060058b0180546001600160a01b03191690555060038a01805463ffffffff19169055620030cd60028b01600062004bd2565b896004016000905550505050505050505050565b60058101546060906001600160a01b03166000620030ff8462003ac4565b604051630667f9d760e41b815290915060008051602062007c438339815191529063667f9d709062003138908590859060040162004f5a565b6020604051808303816000875af115801562003158573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200317e919062005183565b6040516020016200319191815260200190565b60405160208183030381529060405292505050919050565b80821462000504577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516200321c9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88160405162003255919062005398565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516200328e9190620053d1565b60405180910390a162000504620048d6565b806001600160a01b0316826001600160a01b03161462000504577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620033289060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f81604051620033619190620053fc565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f826040516200328e919062005441565b8015158215151462000504577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620034119060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a160008051602062007cc68339815191528162003453576040518060400160405280600581526020016466616c736560d81b81525062003471565b604051806040016040528060048152602001637472756560e01b8152505b6040516200348091906200546c565b60405180910390a160008051602062007cc683398151915282620034c2576040518060400160405280600581526020016466616c736560d81b815250620034e0565b604051806040016040528060048152602001637472756560e01b8152505b6040516200328e9190620054ab565b620034f9620049da565b604051620035079062004bf5565b604051809103906000f08015801562003524573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b815260048101929092526024820152601060448201526f416c6c4b6e6f77696e674f7261636c6560801b606482015260008051602062007c438339815191529063c657c71890608401600060405180830381600087803b158015620035b457600080fd5b505af1158015620035c9573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c4383398151915292506306447d569150602401600060405180830381600087803b1580156200362257600080fd5b505af115801562003637573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200367692909116906000199060040162004f5a565b6020604051808303816000875af115801562003696573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620036bc9190620051d0565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620036f7929116906000199060040162004f5a565b6020604051808303816000875af115801562003717573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200373d9190620051d0565b50604080516390c5013b60e01b8152905160008051602062007c43833981519152916390c5013b91600480830192600092919082900301818387803b1580156200378657600080fd5b505af11580156200379b573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062007c4383398151915292506306447d569150602401600060405180830381600087803b158015620037f457600080fd5b505af115801562003809573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200384892909116906000199060040162004f5a565b6020604051808303816000875af115801562003868573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200388e9190620051d0565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620038c9929116906000199060040162004f5a565b6020604051808303816000875af1158015620038e9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200390f9190620051d0565b50604080516390c5013b60e01b8152905160008051602062007c43833981519152916390c5013b91600480830192600092919082900301818387803b1580156200395857600080fd5b505af11580156200396d573d6000803e3d6000fd5b5050600d54600b54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b158015620039c257600080fd5b505af1158015620039d7573d6000803e3d6000fd5b5050600d54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401620006be565b606060008251602062003a2b919062005355565b67ffffffffffffffff81111562003a465762003a4662004cc8565b6040519080825280601f01601f19166020018201604052801562003a71576020820181803683370190505b50905060005b8351811015620009ab57600084828151811062003a985762003a98620054d6565b60200260200101519050808260200260200184015250808062003abb9062005126565b91505062003a77565b600581015460038201546004830154600284018054604080516020808402820181019092528281526000966001600160a01b03169560e01b94938793919290919083018282801562003b3657602002820191906000526020600020905b81548152602001906001019080831162003b21575b5050506001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a168452825280832090519596509491935062003b829250859187910162005319565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff161562003c21576001600160a01b0384166000908152602087815260408083206001600160e01b0319871684528252808320905190929162003bf191859187910162005319565b60405160208183030381529060405280519060200120815260200190815260200160002054945050505050919050565b60008362003c2f8362003a17565b60405160200162003c429291906200519d565b604051602081830303815290604052905060008051602062007d3683398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562003ca157600080fd5b505af115801562003cb6573d6000803e3d6000fd5b50505050600080866001600160a01b03168360405162003cd7919062005165565b600060405180830381855afa9150503d806000811462003d14576040519150601f19603f3d011682016040523d82523d6000602084013e62003d19565b606091505b50915062003d3090508162002ef187602062005355565b6040516365bc948160e01b81526001600160a01b03891660048201529092506000915060008051602062007c43833981519152906365bc9481906024016000604051808303816000875af115801562003d8d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262003db7919081019062005575565b50905080516001036200411157600060008051602062007d3683398151915260001c6001600160a01b031663667f9d70898460008151811062003dfe5762003dfe620054d6565b60200260200101516040518363ffffffff1660e01b815260040162003e2592919062004f5a565b6020604051808303816000875af115801562003e45573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003e6b919062005183565b90508062003ecf577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a5888360008151811062003eab5762003eab620054d6565b602002602001015160001c60405162003ec692919062004f5a565b60405180910390a15b80831462003f825760405162461bcd60e51b815260206004820152606d60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526c1cdb9d081cdd5c1c1bdc9d1959609a1b60a482015260c401620009a2565b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8888878960405160200162003fba92919062005319565b604051602081830303815290604052805190602001208560008151811062003fe65762003fe6620054d6565b602002602001015160001c604051620040039493929190620055d6565b60405180910390a181600081518110620040215762004021620054d6565b6020908102919091018101516001600160a01b038a1660009081528c835260408082206001600160e01b03198c16835284528082209051929390926200406c918a918c910162005319565b60408051601f1981840301815291815281516020928301208352828201939093529082016000908120939093556001600160a01b038b16835260018d810182528284206001600160e01b03198c16855282528284209251909391620040d6918a918c910162005319565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff191691151591909117905550620046cf565b6001815111156200465e5760005b81518110156200465757600060008051602062007d3683398151915260001c6001600160a01b031663667f9d708a858581518110620041625762004162620054d6565b60200260200101516040518363ffffffff1660e01b81526004016200418992919062004f5a565b6020604051808303816000875af1158015620041a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620041cf919062005183565b90508062004232577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a5898484815181106200420e576200420e620054d6565b602002602001015160001c6040516200422992919062004f5a565b60405180910390a15b60008051602062007d3683398151915260001c6001600160a01b03166370ca10bb8a858581518110620042695762004269620054d6565b602002602001015161133760f01b6040518463ffffffff1660e01b8152600401620042979392919062005377565b600060405180830381600087803b158015620042b257600080fd5b505af1158015620042c7573d6000803e3d6000fd5b50505050600060608a6001600160a01b031687604051620042e9919062005165565b600060405180830381855afa9150503d806000811462004326576040519150601f19603f3d011682016040523d82523d6000602084013e6200432b565b606091505b509092509050620043438162002ef18b602062005355565b955081801562004357575061133760f01b86145b15620045aa577f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c6040516020016200439592919062005319565b60405160208183030381529060405280519060200120888881518110620043c057620043c0620054d6565b602002602001015160001c604051620043dd9493929190620055d6565b60405180910390a1848481518110620043fa57620043fa620054d6565b6020908102919091018101516001600160a01b038d1660009081528f835260408082206001600160e01b03198f168352845280822090519293909262004445918d918f910162005319565b6040516020818303038152906040528051906020012081526020019081526020016000208190555060018d60010160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160e01b0319166001600160e01b031916815260200190815260200160002060008a8c604051602001620044d292919062005319565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555060008051602062007d3683398151915260001c6001600160a01b03166370ca10bb8c878781518110620045445762004544620054d6565b6020026020010151866040518463ffffffff1660e01b81526004016200456d9392919062005377565b600060405180830381600087803b1580156200458857600080fd5b505af11580156200459d573d6000803e3d6000fd5b5050505050505062004657565b60008051602062007d3683398151915260001c6001600160a01b03166370ca10bb8c878781518110620045e157620045e1620054d6565b6020026020010151866040518463ffffffff1660e01b81526004016200460a9392919062005377565b600060405180830381600087803b1580156200462557600080fd5b505af11580156200463a573d6000803e3d6000fd5b5050505050505080806200464e9062005126565b9150506200411f565b50620046cf565b6040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e6064820152608401620009a2565b6001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a16845282528083209051909291620047139188918a910162005319565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620047a25760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b6064820152608401620009a2565b6005890180546001600160a01b031916905560038901805463ffffffff19169055620047d360028a01600062004bd2565b600060048a018190556001600160a01b038816815260208a815260408083206001600160e01b03198a16845282528083209051909291620048199188918a910162005319565b60405160208183030381529060405280519060200120815260200190815260200160002054975050505050505050919050565b600080600060208551116200486357845162004866565b60205b905060005b81811015620048cc576200488181600862005355565b866200488e838862004f89565b81518110620048a157620048a1620054d6565b01602001516001600160f81b031916901c929092179180620048c38162005126565b9150506200486b565b5090949350505050565b60008051602062007c438339815191523b15620049c95760405160009060008051602062007c43833981519152907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc490620049449083906519985a5b195960d21b9060019060200162005377565b60408051601f19818403018152908290526200496492916020016200519d565b60408051601f1981840301815290829052620049809162005165565b6000604051808303816000865af19150503d8060008114620049bf576040519150601f19603f3d011682016040523d82523d6000602084013e620049c4565b606091505b505050505b6000805461ff001916610100179055565b600854604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526005604482015264416c69636560d81b606482015260008051602062007c438339815191529063c657c71890608401600060405180830381600087803b15801562004a4a57600080fd5b505af115801562004a5f573d6000803e3d6000fd5b5050600954604080516318caf8e360e31b81526001600160a01b039092166004830152602482015260036044820152622137b160e91b606482015260008051602062007c43833981519152925063c657c7189150608401600060405180830381600087803b15801562004ad157600080fd5b505af115801562004ae6573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526007604482015266436861726c696560c81b606482015260008051602062007c43833981519152925063c657c7189150608401600060405180830381600087803b15801562004b5c57600080fd5b505af115801562004b71573d6000803e3d6000fd5b5050604080516318caf8e360e31b815230600482015260248101919091526003604482015262596f7560e81b606482015260008051602062007c43833981519152925063c657c7189150608401620006be565b61194a806200560783390190565b508054600082559060005260206000209081019062004bf2919062004c03565b50565b610cf28062006f5183390190565b5b8082111562004c1a576000815560010162004c04565b5090565b6001600160a01b038116811462004bf257600080fd5b6000806040838503121562004c4857600080fd5b823562004c558162004c1e565b946020939093013593505050565b60006020828403121562004c7657600080fd5b813562004c838162004c1e565b9392505050565b6000806040838503121562004c9e57600080fd5b823562004cab8162004c1e565b9150602083013562004cbd8162004c1e565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562004d0a5762004d0a62004cc8565b604052919050565b600067ffffffffffffffff82111562004d2f5762004d2f62004cc8565b50601f01601f191660200190565b600062004d5462004d4e8462004d12565b62004cde565b905082815283838301111562004d6957600080fd5b828260208301376000602084830101529392505050565b600082601f83011262004d9257600080fd5b62004c838383356020850162004d3d565b6000806040838503121562004db757600080fd5b823567ffffffffffffffff8082111562004dd057600080fd5b62004dde8683870162004d80565b9350602085013591508082111562004df557600080fd5b508301601f8101851362004e0857600080fd5b62004e198582356020840162004d3d565b9150509250929050565b60006020828403121562004e3657600080fd5b5035919050565b60008060006060848603121562004e5357600080fd5b833562004e608162004c1e565b9250602084013562004e728162004c1e565b929592945050506040919091013590565b60008060006060848603121562004e9957600080fd5b505081359360208301359350604090920135919050565b801515811462004bf257600080fd5b6000806000806080858703121562004ed657600080fd5b843562004ee38162004c1e565b9350602085013562004ef58162004c1e565b925060408501359150606085013562004f0e8162004eb0565b939692955090935050565b60006020828403121562004f2c57600080fd5b813567ffffffffffffffff81111562004f4457600080fd5b62004f528482850162004d80565b949350505050565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052601160045260246000fd5b6000821982111562004f9f5762004f9f62004f73565b500190565b6001600160a01b03968716815294861660208601526040850193909352606084019190915290921660808201526001600160801b0390911660a082015260c00190565b60005b838110156200500457818101518382015260200162004fea565b83811115620006ee5750506000910152565b600081518084526200503081602086016020860162004fe7565b601f01601f19169290920160200192915050565b60208152600062004c83602083018462005016565b6000602082840312156200506c57600080fd5b815167ffffffffffffffff8111156200508457600080fd5b8201601f810184136200509657600080fd5b8051620050a762004d4e8262004d12565b818152856020838501011115620050bd57600080fd5b620050d082602083016020860162004fe7565b95945050505050565b60008351620050ed81846020880162004fe7565b8351908301906200510381836020880162004fe7565b01949350505050565b60008282101562005121576200512162004f73565b500390565b6000600182016200513b576200513b62004f73565b5060010190565b6000826200516057634e487b7160e01b600052601260045260246000fd5b500690565b600082516200517981846020870162004fe7565b9190910192915050565b6000602082840312156200519657600080fd5b5051919050565b6001600160e01b0319831681528151600090620051c281600485016020870162004fe7565b919091016004019392505050565b600060208284031215620051e357600080fd5b815162004c838162004eb0565b600080600080600080600060e0888a0312156200520c57600080fd5b8751620052198162004c1e565b60208901519097506200522c8162004c1e565b60408901519096506200523f8162004c1e565b80955050606088015193506080880151925060a0880151620052618162004eb0565b60c0890151909250600381106200527757600080fd5b8091505092959891949750929550565b634e487b7160e01b600052602160045260246000fd5b600060208284031215620052b057600080fd5b81516001600160801b038116811462004c8357600080fd5b60408152600560408201526422b93937b960d91b606082015260806020820152600062004c83608083018462005016565b6000602082840312156200530c57600080fd5b815162004c838162004c1e565b825160009082906020808701845b83811015620053455781518552938201939082019060010162005327565b5050948252509092019392505050565b600081600019048311821515161562005372576200537262004f73565b500290565b6001600160a01b039390931683526020830191909152604082015260600190565b604081526000620053c360408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b604081526000620053c360408301600a815269080808081058dd1d585b60b21b602082015260400190565b6040815260006200542760408301600a8152690808115e1c1958dd195960b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b6040815260006200542760408301600a815269080808081058dd1d585b60b21b602082015260400190565b6040815260006200549760408301600a8152690808115e1c1958dd195960b21b602082015260400190565b828103602084015262004f52818562005016565b6040815260006200549760408301600a815269080808081058dd1d585b60b21b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b600082601f830112620054fe57600080fd5b8151602067ffffffffffffffff8211156200551d576200551d62004cc8565b8160051b6200552e82820162004cde565b92835284810182019282810190878511156200554957600080fd5b83870192505b848310156200556a578251825291830191908301906200554f565b979650505050505050565b600080604083850312156200558957600080fd5b825167ffffffffffffffff80821115620055a257600080fd5b620055b086838701620054ec565b93506020850151915080821115620055c757600080fd5b5062004e1985828601620054ec565b6001600160a01b039490941684526001600160e01b0319929092166020840152604083015260608201526080019056fe60a0604052600180546001600160801b031916905534801561002057600080fd5b5060405161194a38038061194a83398101604081905261003f9161011c565b600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506001600160a01b03811660805260028290556040518281527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd76159060200160405180910390a1600380546001600160801b0319166703782dace9d900009081179091556040519081527f248707dbfdce07115740191c2a4ec04702f5d55967ca82b9dc65c55801531f7f9060200160405180910390a15050610159565b6000806040838503121561012f57600080fd5b825160208401519092506001600160a01b038116811461014e57600080fd5b809150509250929050565b6080516117c8610182600039600081816101c801528181610b020152610bb801526117c86000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063d70e3dfd11610071578063d70e3dfd14610299578063d8642295146102c2578063daf9c210146102d5578063fbc534ef14610308578063fc711c3a1461031b57600080fd5b80638da5cb5b146102155780639170c05b146102285780639362776f1461023b5780639501325f1461024e578063cd805d5e1461026e57600080fd5b80632613f307116100f45780632613f3071461018a578063436146791461019d5780636f1335b9146101b05780637dc0d1d0146101c357806382b2ec3e1461020257600080fd5b80630b20b7bc146101265780630ff0c00e146101595780630ffb1d8b1461016257806313af403514610177575b600080fd5b61014661013436600461134c565b60076020526000908152604090205481565b6040519081526020015b60405180910390f35b61014660025481565b61017561017036600461138f565b61032e565b005b6101756101853660046113c6565b6103c0565b61017561019836600461134c565b610435565b6101756101ab3660046113ff565b61049b565b6101756101be366004611465565b6105fe565b6101ea7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610150565b610175610210366004611480565b6106b0565b6000546101ea906001600160a01b031681565b6101756102363660046114f1565b610747565b61017561024936600461158a565b610932565b61014661025c36600461134c565b60056020526000908152604090205481565b600154610281906001600160801b031681565b6040516001600160801b039091168152602001610150565b6101ea6102a736600461134c565b6006602052600090815260409020546001600160a01b031681565b6101756102d03660046115f2565b6109e9565b6102f86102e33660046113c6565b60046020526000908152604090205460ff1681565b6040519015158152602001610150565b6101756103163660046113ff565b610a60565b600354610281906001600160801b031681565b6000546001600160a01b031633146103615760405162461bcd60e51b8152600401610358906116b5565b60405180910390fd5b6001600160a01b038216600081815260046020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d92910160405180910390a25050565b6000546001600160a01b031633146103ea5760405162461bcd60e51b8152600401610358906116b5565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b0316331461045f5760405162461bcd60e51b8152600401610358906116b5565b60028190556040518181527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd7615906020015b60405180910390a150565b60006104ab878787878787610ca5565b600081815260056020526040812054919250036104de5760405163cc4f06a160e01b815260048101829052602401610358565b6002546000828152600560205260409020546104fa90436116f1565b10156105455760008181526005602052604081205461051990436116f1565b60025461052691906116f1565b9050806040516325797e0360e11b815260040161035891815260200190565b600081815260076020818152604080842080546006845282862080546005865293872087905580546001600160a01b031916905593909252929055906001600160a01b039081169061059a9089168684610d09565b6105ae6001600160a01b038a168289610d09565b8183826001600160a01b03167ff74daea4b4b80ee368b87f2feb712805f4ef30acd087e35c5d16df8736c2d6f2896040516105eb91815260200190565b60405180910390a4505050505050505050565b6000546001600160a01b031633146106285760405162461bcd60e51b8152600401610358906116b5565b670de0b6b3a7640000816001600160801b03161061065957604051636a143fdd60e11b815260040160405180910390fd5b600380546fffffffffffffffffffffffffffffffff19166001600160801b0383169081179091556040519081527f248707dbfdce07115740191c2a4ec04702f5d55967ca82b9dc65c55801531f7f90602001610490565b60006106c0888888888888610ca5565b600081815260056020526040902054909150156106f3576040516304daa62560e21b815260048101829052602401610358565b6106fe878284610d87565b60408051868152602081018490524391839133917f9e2cd6515276369145ad3c2ee5eb7c8f09ca9c99e8e7d6e68de40895a72f3464910160405180910390a45050505050505050565b6001600160a01b03851660009081526004602052604090205460ff1661078b5760405163f602627d60e01b81526001600160a01b0386166004820152602401610358565b6001600160a01b03841660009081526004602052604090205460ff166107cf5760405163f602627d60e01b81526001600160a01b0385166004820152602401610358565b836001600160a01b0316856001600160a01b03160361080157604051631d2792fb60e31b815260040160405180910390fd5b6003546001600160801b0316821115610830576040516305bf279d60e41b815260048101839052602401610358565b826000036108515760405163abc5ee6f60e01b815260040160405180910390fd5b6001600160a01b03811661087857604051631feef77d60e01b815260040160405180910390fd5b61088d6001600160a01b038616333086610ddb565b60015460408051858152602081018590526001600160a01b038481168284015291516001600160801b0390931692878316928916917f7361c265d28ece9d5df249995186533440e0b7a1310ae54d496fa1783056e3da919081900360600190a4600180546001600160801b031690600061090683611708565b91906101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6003546001600160801b0316831115610961576040516305bf279d60e41b815260048101849052602401610358565b60008481526005602052604090205415610991576040516304daa62560e21b815260048101859052602401610358565b61099e8585858585610e65565b83856001600160a01b03167f2932e14c54a9749927aed2cd6d014eb7cd6a224f5fe6dfb944d9ced9b04c4f47856040516109da91815260200190565b60405180910390a35050505050565b60006109f98c8c8c8c8c8c610ca5565b9050610a088582868686610e65565b610a138b8288610d87565b60408051858152602081018890524391839133917f9e2cd6515276369145ad3c2ee5eb7c8f09ca9c99e8e7d6e68de40895a72f3464910160405180910390a4505050505050505050505050565b6000610a70878787878787610ca5565b600081815260056020526040812054919250819003610aa55760405163cc4f06a160e01b815260048101839052602401610358565b600254610ab282436116f1565b10610ad057604051632c02744560e11b815260040160405180910390fd5b60008281526007602090815260408083205460069092529182902054915163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905291928216918a169063095ea7b3906044016020604051808303816000875af1158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b83919061172e565b50604051632bd6267f60e21b81526001600160a01b0382811660048301523360248301528a81166044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063af5899fc906084016020604051808303816000875af1158015610c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c25919061174b565b5060008481526005602090815260408083208390556006825280832080546001600160a01b031916905560078252808320929092559051888152839186916001600160a01b038516917fbfb0e6d8f5102fdad9ead2713eec1014861fe90e38a91786fb5c610873c38ad8910160405180910390a450505050505050505050565b604080516001600160a01b039788166020808301919091529688168183015260608101959095526080850193909352941660a08301526001600160801b0390931660c0808301919091528351808303909101815260e0909101909252815191012090565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610d815760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610358565b50505050565b60008281526005602090815260408083204390556006825280832080546001600160a01b031916339081179091556007909252909120829055610dd6906001600160a01b038516903084610ddb565b505050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610e5e5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610358565b5050505050565b6003546001600160801b0316831115610e94576040516305bf279d60e41b815260048101849052602401610358565b60008481526005602052604090205415610ec4576040516304daa62560e21b815260048101859052602401610358565b604080517f0efb9dda140a951df4393d44ca40349032d31811466afd20eacd4b4136c3f4986020808301919091528183018790526060808301879052835180840390910181526080830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a084015260bc8084018290528451808503909101815260dc90930190935281519101206000610f9d8286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fdb92505050565b9050876001600160a01b0316816001600160a01b031614610fd1576040516324a0dbd760e21b815260040160405180910390fd5b5050505050505050565b6000806000610fea8585610fff565b91509150610ff78161106d565b509392505050565b60008082516041036110355760208301516040840151606085015160001a61102987828585611226565b94509450505050611066565b825160400361105e5760208301516040840151611053868383611313565b935093505050611066565b506000905060025b9250929050565b600081600481111561108157611081611764565b036110895750565b600181600481111561109d5761109d611764565b036110ea5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610358565b60028160048111156110fe576110fe611764565b0361114b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610358565b600381600481111561115f5761115f611764565b036111b75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610358565b60048160048111156111cb576111cb611764565b036112235760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610358565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561125d575060009050600361130a565b8460ff16601b1415801561127557508460ff16601c14155b15611286575060009050600461130a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156112da573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113035760006001925092505061130a565b9150600090505b94509492505050565b6000806001600160ff1b0383168161133060ff86901c601b61177a565b905061133e87828885611226565b935093505050935093915050565b60006020828403121561135e57600080fd5b5035919050565b80356001600160a01b038116811461137c57600080fd5b919050565b801515811461122357600080fd5b600080604083850312156113a257600080fd5b6113ab83611365565b915060208301356113bb81611381565b809150509250929050565b6000602082840312156113d857600080fd5b6113e182611365565b9392505050565b80356001600160801b038116811461137c57600080fd5b60008060008060008060c0878903121561141857600080fd5b61142187611365565b955061142f60208801611365565b9450604087013593506060870135925061144b60808801611365565b915061145960a088016113e8565b90509295509295509295565b60006020828403121561147757600080fd5b6113e1826113e8565b600080600080600080600060e0888a03121561149b57600080fd5b6114a488611365565b96506114b260208901611365565b955060408801359450606088013593506114ce60808901611365565b92506114dc60a089016113e8565b915060c0880135905092959891949750929550565b600080600080600060a0868803121561150957600080fd5b61151286611365565b945061152060208701611365565b9350604086013592506060860135915061153c60808701611365565b90509295509295909350565b60008083601f84011261155a57600080fd5b50813567ffffffffffffffff81111561157257600080fd5b60208301915083602082850101111561106657600080fd5b6000806000806000608086880312156115a257600080fd5b6115ab86611365565b94506020860135935060408601359250606086013567ffffffffffffffff8111156115d557600080fd5b6115e188828901611548565b969995985093965092949392505050565b60008060008060008060008060008060006101408c8e03121561161457600080fd5b61161d8c611365565b9a5061162b60208d01611365565b995060408c0135985060608c0135975061164760808d01611365565b965061165560a08d016113e8565b955060c08c0135945061166a60e08d01611365565b93506101008c013592506101208c013567ffffffffffffffff81111561168f57600080fd5b61169b8e828f01611548565b915080935050809150509295989b509295989b9093969950565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015611703576117036116db565b500390565b60006001600160801b03808316818103611724576117246116db565b6001019392505050565b60006020828403121561174057600080fd5b81516113e181611381565b60006020828403121561175d57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6000821982111561178d5761178d6116db565b50019056fea2646970667358221220b144609d5e94d9780a67f8606701da17b69128c8d7de725234b2a7005a9c983e64736f6c634300080d0033608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350601960038190556040519081527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a1610c578061009b6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461010d5780639d86698514610138578063af5899fc146101ab578063daf9c210146101be578063fc361c38146101f157600080fd5b806307de99f6146100a35780630ffb1d8b146100c957806313af4035146100de578063391fe4e2146100f15780638945bd28146100fa575b600080fd5b6100b66100b13660046109e4565b610204565b6040519081526020015b60405180910390f35b6100dc6100d7366004610a2a565b610215565b005b6100dc6100ec366004610a61565b610273565b6100b660035481565b6100dc6101083660046109e4565b6102e8565b600054610120906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b6101986101463660046109e4565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b0395861695938416949390921692909160ff8082169161010090041687565b6040516100c09796959493929190610a99565b6100b66101b9366004610aff565b61034d565b6101e16101cc366004610a61565b60026020526000908152604090205460ff1681565b60405190151581526020016100c0565b6100dc6101ff366004610b4a565b6105ee565b600061020f8261093e565b92915050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f90610b6f565b60405180910390fd5b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b6000546001600160a01b0316331461029d5760405162461bcd60e51b815260040161023f90610b6f565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103125760405162461bcd60e51b815260040161023f90610b6f565b60038190556040518181527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a150565b6001600160a01b03821660009081526002602052604081205460ff166103915760405163010d7e6160e11b81526001600160a01b038416600482015260240161023f565b600061039c8361093e565b604080516001600160a01b03808a1660208301528089169282019290925290861660608201526080810185905260a0810182905290915060009060c00160408051601f19818403018152919052805160209091012090506001600082815260016020526040902060050154610100900460ff16600281111561042057610420610a83565b036104415760405163d5e880e960e01b81526004810182905260240161023f565b60006040518060e00160405280896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b03168152602001868152602001848152602001600015158152602001600160028111156104a3576104a3610a83565b9052600083815260016020818152604092839020845181546001600160a01b03199081166001600160a01b03928316178355928601519382018054841694821694909417909355928401516002808501805490931691909316179055606083015160038301556080830151600483015560a083015160058301805460ff198116921515928317825560c0860151959650869593919261ffff1990911661ff0019909116179061010090849081111561055d5761055d610a83565b021790555061057a9150506001600160a01b03871688308661095a565b61058f6001600160a01b03871633308861095a565b604080516001600160a01b03888116825260208201889052918101859052818916918a169084907fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699060600160405180910390a4509695505050505050565b6000546001600160a01b031633146106185760405162461bcd60e51b815260040161023f90610b6f565b6000828152600160208181526040808420815160e08101835281546001600160a01b03908116825294820154851693810193909352600280820154909416918301919091526003810154606083015260048101546080830152600581015460ff808216151560a08501529293919260c085019261010090920416908111156106a2576106a2610a83565b60028111156106b3576106b3610a83565b905250905060028160c0015160028111156106d0576106d0610a83565b036106f15760405163b677167760e01b81526004810184905260240161023f565b81151560010361079c5780604001516001600160a01b031663a9059cbb8260000151836060015184608001516107279190610bab565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107969190610bc3565b50610839565b80604001516001600160a01b031663a9059cbb8260200151836060015184608001516107c89190610bab565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108379190610bc3565b505b600260c0820181815283151560a08401908152600086815260016020818152604092839020875181546001600160a01b039182166001600160a01b0319918216178355928901519382018054948216948416949094179093559287015183870180549190931691161790556060850151600382015560808501516004820155905160058201805491151560ff198316811782559351869593949093919261ff001990911661ffff1990911617906101009084908111156108fb576108fb610a83565b02179055505060405183151581528491507fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a2505050565b60006064600354836109509190610be0565b61020f9190610bff565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806109dd5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161023f565b5050505050565b6000602082840312156109f657600080fd5b5035919050565b80356001600160a01b0381168114610a1457600080fd5b919050565b8015158114610a2757600080fd5b50565b60008060408385031215610a3d57600080fd5b610a46836109fd565b91506020830135610a5681610a19565b809150509250929050565b600060208284031215610a7357600080fd5b610a7c826109fd565b9392505050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905282151560a082015260e0810160038310610aed57634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b60008060008060808587031215610b1557600080fd5b610b1e856109fd565b9350610b2c602086016109fd565b9250610b3a604086016109fd565b9396929550929360600135925050565b60008060408385031215610b5d57600080fd5b823591506020830135610a5681610a19565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610bbe57610bbe610b95565b500190565b600060208284031215610bd557600080fd5b8151610a7c81610a19565b6000816000190483118215151615610bfa57610bfa610b95565b500290565b600082610c1c57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205bdec491885dcc1ed8f1a4dbb49b3f7c52371c21a2e5f51f7e6207c148789ec264736f6c634300080d00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d46696c6c65642062792073686f756c6420626520657175616c20746f207468652072656c6179657246696c6c656420617420626c6f636b2073686f756c6420626520657175616c20746f207468652063757272656e7420626c6f636b206e756d626572280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358344697370757465722073686f756c6420626520657175616c20746f207468652064697370757465725374616b652073686f756c6420626520657175616c20746f2074686520616d6f756e742073656e74885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d426f6f6b2073686f756c6420686176652073706f6e736f726564207468652070726f706f73616c46696c6c656420616d6f756e742073686f756c6420626520657175616c20746f2074686520616d6f756e742073656e7444697370757465722073686f756c64206861766520706f737465642074686520626f6e6450726f706f7365722073686f756c6420626520657175616c20746f207468652072656c61796572426f6e6420746f6b656e2073686f756c6420626520657175616c20746f20746865207465737420746f6b656e206f7574a264697066735822122034c3d88f9226000aef51ae127e75d5682781f0901254f62e7dcfe59de8e34e3764736f6c634300080d0033" . parse () . expect ("invalid bytecode")
        });
    pub struct DisputeTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for DisputeTest<M> {
        fn clone(&self) -> Self {
            DisputeTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for DisputeTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for DisputeTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(DisputeTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> DisputeTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), DISPUTETEST_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                DISPUTETEST_ABI.clone(),
                DISPUTETEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bound` (0x5a6c1eed) function"]
        pub fn bound(
            &self,
            x: ethers::core::types::U256,
            min: ethers::core::types::U256,
            max: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([90, 108, 30, 237], (x, min, max))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x6bce989b) function"]
        pub fn deal_with_token(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([107, 206, 152, 155], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x97754ae9) function"]
        pub fn deal_with_token_and_adjust(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
            adjust: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([151, 117, 74, 233], (token, to, give, adjust))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0xc88a5e6d) function"]
        pub fn deal(
            &self,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 138, 94, 109], (to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x29ce9dde) function"]
        pub fn deploy_code_with_args(
            &self,
            what: String,
            args: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 206, 157, 222], (what, args))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x9a8325a0) function"]
        pub fn deploy_code(
            &self,
            what: String,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([154, 131, 37, 160], what)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x233240ee) function"]
        pub fn hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 50, 64, 238], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x29a9e300) function"]
        pub fn hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([41, 169, 227, 0], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xaf9bbe5f) function"]
        pub fn hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([175, 155, 190, 95], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xe9a79a7b) function"]
        pub fn hoax_4(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([233, 167, 154, 123], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewind` (0x2d6c17a3) function"]
        pub fn rewind(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([45, 108, 23, 163], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `skip` (0xb9c071b4) function"]
        pub fn skip(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([185, 192, 113, 180], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x108554f2) function"]
        pub fn start_hoax_1(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([16, 133, 84, 242], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x3bf82db1) function"]
        pub fn start_hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 248, 45, 177], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x6f597075) function"]
        pub fn start_hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([111, 89, 112, 117], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0xd06d8229) function"]
        pub fn start_hoax_4(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 109, 130, 41], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotDisputeIfNotFilled` (0x2b56612b) function"]
        pub fn test_cannot_dispute_if_not_filled(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([43, 86, 97, 43], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotDisputeIfPeriodIsOver` (0x231c9c36) function"]
        pub fn test_cannot_dispute_if_period_is_over(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 28, 156, 54], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testDispute` (0xc75b9644) function"]
        pub fn test_dispute(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([199, 91, 150, 68], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tip` (0xd82555f1) function"]
        pub fn tip(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 37, 85, 241], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `MaxFeePctChanged` event"]
        pub fn max_fee_pct_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MaxFeePctChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `SafeBlockThresholdChanged` event"]
        pub fn safe_block_threshold_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, SafeBlockThresholdChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenWhitelisted` event"]
        pub fn token_whitelisted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenWhitelistedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputed` event"]
        pub fn trade_disputed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeFilled` event"]
        pub fn trade_filled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeFilledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeRequested` event"]
        pub fn trade_requested_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeRequestedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeSettled` event"]
        pub fn trade_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `UpdatedFeeForTrade` event"]
        pub fn updated_fee_for_trade_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, UpdatedFeeForTradeFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `WARNING_Deprecated` event"]
        pub fn warning_deprecated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, WarningDeprecatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, DisputeTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for DisputeTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "MaxFeePctChanged", abi = "MaxFeePctChanged(uint128)")]
    pub struct MaxFeePctChangedFilter {
        pub new_max_fee_pct: u128,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "SafeBlockThresholdChanged",
        abi = "SafeBlockThresholdChanged(uint256)"
    )]
    pub struct SafeBlockThresholdChangedFilter {
        pub new_safe_block_threshold: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokenWhitelisted", abi = "TokenWhitelisted(address,bool)")]
    pub struct TokenWhitelistedFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
        pub whitelisted: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeDisputed",
        abi = "TradeDisputed(address,bytes32,uint256,uint256)"
    )]
    pub struct TradeDisputedFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        #[ethevent(indexed)]
        pub filled_amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeFilled",
        abi = "TradeFilled(address,bytes32,uint256,uint256,uint256)"
    )]
    pub struct TradeFilledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        #[ethevent(indexed)]
        pub filled_at_block: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeRequested",
        abi = "TradeRequested(address,address,uint256,uint256,address,uint256)"
    )]
    pub struct TradeRequestedFilter {
        #[ethevent(indexed)]
        pub token_in: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub token_out: ethers::core::types::Address,
        pub fee_pct: ethers::core::types::U256,
        pub amount: ethers::core::types::U256,
        pub to: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeSettled",
        abi = "TradeSettled(address,bytes32,uint256,uint256)"
    )]
    pub struct TradeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        #[ethevent(indexed)]
        pub filled_amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "UpdatedFeeForTrade",
        abi = "UpdatedFeeForTrade(address,bytes32,uint256)"
    )]
    pub struct UpdatedFeeForTradeFilter {
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        pub new_fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "WARNING_Deprecated", abi = "WARNING_Deprecated(string)")]
    pub struct WarningDeprecatedFilter {
        pub msg: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum DisputeTestEvents {
        MaxFeePctChangedFilter(MaxFeePctChangedFilter),
        SafeBlockThresholdChangedFilter(SafeBlockThresholdChangedFilter),
        TokenWhitelistedFilter(TokenWhitelistedFilter),
        TradeDisputedFilter(TradeDisputedFilter),
        TradeFilledFilter(TradeFilledFilter),
        TradeRequestedFilter(TradeRequestedFilter),
        TradeSettledFilter(TradeSettledFilter),
        UpdatedFeeForTradeFilter(UpdatedFeeForTradeFilter),
        WarningDeprecatedFilter(WarningDeprecatedFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for DisputeTestEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = MaxFeePctChangedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::MaxFeePctChangedFilter(decoded));
            }
            if let Ok(decoded) = SafeBlockThresholdChangedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::SafeBlockThresholdChangedFilter(decoded));
            }
            if let Ok(decoded) = TokenWhitelistedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TokenWhitelistedFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TradeDisputedFilter(decoded));
            }
            if let Ok(decoded) = TradeFilledFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TradeFilledFilter(decoded));
            }
            if let Ok(decoded) = TradeRequestedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TradeRequestedFilter(decoded));
            }
            if let Ok(decoded) = TradeSettledFilter::decode_log(log) {
                return Ok(DisputeTestEvents::TradeSettledFilter(decoded));
            }
            if let Ok(decoded) = UpdatedFeeForTradeFilter::decode_log(log) {
                return Ok(DisputeTestEvents::UpdatedFeeForTradeFilter(decoded));
            }
            if let Ok(decoded) = WarningDeprecatedFilter::decode_log(log) {
                return Ok(DisputeTestEvents::WarningDeprecatedFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(DisputeTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(DisputeTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for DisputeTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                DisputeTestEvents::MaxFeePctChangedFilter(element) => element.fmt(f),
                DisputeTestEvents::SafeBlockThresholdChangedFilter(element) => element.fmt(f),
                DisputeTestEvents::TokenWhitelistedFilter(element) => element.fmt(f),
                DisputeTestEvents::TradeDisputedFilter(element) => element.fmt(f),
                DisputeTestEvents::TradeFilledFilter(element) => element.fmt(f),
                DisputeTestEvents::TradeRequestedFilter(element) => element.fmt(f),
                DisputeTestEvents::TradeSettledFilter(element) => element.fmt(f),
                DisputeTestEvents::UpdatedFeeForTradeFilter(element) => element.fmt(f),
                DisputeTestEvents::WarningDeprecatedFilter(element) => element.fmt(f),
                DisputeTestEvents::LogFilter(element) => element.fmt(f),
                DisputeTestEvents::LogAddressFilter(element) => element.fmt(f),
                DisputeTestEvents::LogBytesFilter(element) => element.fmt(f),
                DisputeTestEvents::LogBytes32Filter(element) => element.fmt(f),
                DisputeTestEvents::LogIntFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                DisputeTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                DisputeTestEvents::LogStringFilter(element) => element.fmt(f),
                DisputeTestEvents::LogUintFilter(element) => element.fmt(f),
                DisputeTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST`function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `bound`function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bound", abi = "bound(uint256,uint256,uint256)")]
    pub struct BoundCall {
        pub x: ethers::core::types::U256,
        pub min: ethers::core::types::U256,
        pub max: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256)` and selector `[107, 206, 152, 155]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256)")]
    pub struct DealWithTokenCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256,bool)` and selector `[151, 117, 74, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256,bool)")]
    pub struct DealWithTokenAndAdjustCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
        pub adjust: bool,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,uint256)` and selector `[200, 138, 94, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,uint256)")]
    pub struct DealCall {
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string,bytes)")]
    pub struct DeployCodeWithArgsCall {
        pub what: String,
        pub args: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string)")]
    pub struct DeployCodeCall {
        pub what: String,
    }
    #[doc = "Container type for all input parameters for the `failed`function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address)` and selector `[35, 50, 64, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address)")]
    pub struct Hoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address)` and selector `[41, 169, 227, 0]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address)")]
    pub struct Hoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address,uint256)` and selector `[175, 155, 190, 95]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address,uint256)")]
    pub struct Hoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,uint256)` and selector `[233, 167, 154, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,uint256)")]
    pub struct Hoax4Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `rewind`function with signature `rewind(uint256)` and selector `[45, 108, 23, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewind", abi = "rewind(uint256)")]
    pub struct RewindCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setUp`function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `skip`function with signature `skip(uint256)` and selector `[185, 192, 113, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "skip", abi = "skip(uint256)")]
    pub struct SkipCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,uint256)` and selector `[16, 133, 84, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,uint256)")]
    pub struct StartHoax1Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address,uint256)` and selector `[59, 248, 45, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address,uint256)")]
    pub struct StartHoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address)` and selector `[111, 89, 112, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address)")]
    pub struct StartHoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address)` and selector `[208, 109, 130, 41]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address)")]
    pub struct StartHoax4Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `testCannotDisputeIfNotFilled`function with signature `testCannotDisputeIfNotFilled()` and selector `[43, 86, 97, 43]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotDisputeIfNotFilled",
        abi = "testCannotDisputeIfNotFilled()"
    )]
    pub struct TestCannotDisputeIfNotFilledCall;
    #[doc = "Container type for all input parameters for the `testCannotDisputeIfPeriodIsOver`function with signature `testCannotDisputeIfPeriodIsOver()` and selector `[35, 28, 156, 54]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotDisputeIfPeriodIsOver",
        abi = "testCannotDisputeIfPeriodIsOver()"
    )]
    pub struct TestCannotDisputeIfPeriodIsOverCall;
    #[doc = "Container type for all input parameters for the `testDispute`function with signature `testDispute()` and selector `[199, 91, 150, 68]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testDispute", abi = "testDispute()")]
    pub struct TestDisputeCall;
    #[doc = "Container type for all input parameters for the `tip`function with signature `tip(address,address,uint256)` and selector `[216, 37, 85, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tip", abi = "tip(address,address,uint256)")]
    pub struct TipCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `vm`function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum DisputeTestCalls {
        IsTest(IsTestCall),
        Bound(BoundCall),
        DealWithToken(DealWithTokenCall),
        DealWithTokenAndAdjust(DealWithTokenAndAdjustCall),
        Deal(DealCall),
        DeployCodeWithArgs(DeployCodeWithArgsCall),
        DeployCode(DeployCodeCall),
        Failed(FailedCall),
        Hoax0(Hoax0Call),
        Hoax2(Hoax2Call),
        Hoax3(Hoax3Call),
        Hoax4(Hoax4Call),
        Rewind(RewindCall),
        SetUp(SetUpCall),
        Skip(SkipCall),
        StartHoax1(StartHoax1Call),
        StartHoax2(StartHoax2Call),
        StartHoax0(StartHoax0Call),
        StartHoax4(StartHoax4Call),
        TestCannotDisputeIfNotFilled(TestCannotDisputeIfNotFilledCall),
        TestCannotDisputeIfPeriodIsOver(TestCannotDisputeIfPeriodIsOverCall),
        TestDispute(TestDisputeCall),
        Tip(TipCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for DisputeTestCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <BoundCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Bound(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::DealWithToken(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenAndAdjustCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::DealWithTokenAndAdjust(decoded));
            }
            if let Ok(decoded) = <DealCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DisputeTestCalls::Deal(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeWithArgsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::DeployCodeWithArgs(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::DeployCode(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <Hoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Hoax0(decoded));
            }
            if let Ok(decoded) = <Hoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Hoax2(decoded));
            }
            if let Ok(decoded) = <Hoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Hoax3(decoded));
            }
            if let Ok(decoded) = <Hoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Hoax4(decoded));
            }
            if let Ok(decoded) = <RewindCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::Rewind(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) = <SkipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DisputeTestCalls::Skip(decoded));
            }
            if let Ok(decoded) =
                <StartHoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::StartHoax1(decoded));
            }
            if let Ok(decoded) =
                <StartHoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::StartHoax2(decoded));
            }
            if let Ok(decoded) =
                <StartHoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::StartHoax0(decoded));
            }
            if let Ok(decoded) =
                <StartHoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::StartHoax4(decoded));
            }
            if let Ok(decoded) =
                <TestCannotDisputeIfNotFilledCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(DisputeTestCalls::TestCannotDisputeIfNotFilled(decoded));
            }
            if let Ok(decoded) =
                <TestCannotDisputeIfPeriodIsOverCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(DisputeTestCalls::TestCannotDisputeIfPeriodIsOver(decoded));
            }
            if let Ok(decoded) =
                <TestDisputeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(DisputeTestCalls::TestDispute(decoded));
            }
            if let Ok(decoded) = <TipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DisputeTestCalls::Tip(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(DisputeTestCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for DisputeTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                DisputeTestCalls::IsTest(element) => element.encode(),
                DisputeTestCalls::Bound(element) => element.encode(),
                DisputeTestCalls::DealWithToken(element) => element.encode(),
                DisputeTestCalls::DealWithTokenAndAdjust(element) => element.encode(),
                DisputeTestCalls::Deal(element) => element.encode(),
                DisputeTestCalls::DeployCodeWithArgs(element) => element.encode(),
                DisputeTestCalls::DeployCode(element) => element.encode(),
                DisputeTestCalls::Failed(element) => element.encode(),
                DisputeTestCalls::Hoax0(element) => element.encode(),
                DisputeTestCalls::Hoax2(element) => element.encode(),
                DisputeTestCalls::Hoax3(element) => element.encode(),
                DisputeTestCalls::Hoax4(element) => element.encode(),
                DisputeTestCalls::Rewind(element) => element.encode(),
                DisputeTestCalls::SetUp(element) => element.encode(),
                DisputeTestCalls::Skip(element) => element.encode(),
                DisputeTestCalls::StartHoax1(element) => element.encode(),
                DisputeTestCalls::StartHoax2(element) => element.encode(),
                DisputeTestCalls::StartHoax0(element) => element.encode(),
                DisputeTestCalls::StartHoax4(element) => element.encode(),
                DisputeTestCalls::TestCannotDisputeIfNotFilled(element) => element.encode(),
                DisputeTestCalls::TestCannotDisputeIfPeriodIsOver(element) => element.encode(),
                DisputeTestCalls::TestDispute(element) => element.encode(),
                DisputeTestCalls::Tip(element) => element.encode(),
                DisputeTestCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for DisputeTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                DisputeTestCalls::IsTest(element) => element.fmt(f),
                DisputeTestCalls::Bound(element) => element.fmt(f),
                DisputeTestCalls::DealWithToken(element) => element.fmt(f),
                DisputeTestCalls::DealWithTokenAndAdjust(element) => element.fmt(f),
                DisputeTestCalls::Deal(element) => element.fmt(f),
                DisputeTestCalls::DeployCodeWithArgs(element) => element.fmt(f),
                DisputeTestCalls::DeployCode(element) => element.fmt(f),
                DisputeTestCalls::Failed(element) => element.fmt(f),
                DisputeTestCalls::Hoax0(element) => element.fmt(f),
                DisputeTestCalls::Hoax2(element) => element.fmt(f),
                DisputeTestCalls::Hoax3(element) => element.fmt(f),
                DisputeTestCalls::Hoax4(element) => element.fmt(f),
                DisputeTestCalls::Rewind(element) => element.fmt(f),
                DisputeTestCalls::SetUp(element) => element.fmt(f),
                DisputeTestCalls::Skip(element) => element.fmt(f),
                DisputeTestCalls::StartHoax1(element) => element.fmt(f),
                DisputeTestCalls::StartHoax2(element) => element.fmt(f),
                DisputeTestCalls::StartHoax0(element) => element.fmt(f),
                DisputeTestCalls::StartHoax4(element) => element.fmt(f),
                DisputeTestCalls::TestCannotDisputeIfNotFilled(element) => element.fmt(f),
                DisputeTestCalls::TestCannotDisputeIfPeriodIsOver(element) => element.fmt(f),
                DisputeTestCalls::TestDispute(element) => element.fmt(f),
                DisputeTestCalls::Tip(element) => element.fmt(f),
                DisputeTestCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for DisputeTestCalls {
        fn from(var: IsTestCall) -> Self {
            DisputeTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<BoundCall> for DisputeTestCalls {
        fn from(var: BoundCall) -> Self {
            DisputeTestCalls::Bound(var)
        }
    }
    impl ::std::convert::From<DealWithTokenCall> for DisputeTestCalls {
        fn from(var: DealWithTokenCall) -> Self {
            DisputeTestCalls::DealWithToken(var)
        }
    }
    impl ::std::convert::From<DealWithTokenAndAdjustCall> for DisputeTestCalls {
        fn from(var: DealWithTokenAndAdjustCall) -> Self {
            DisputeTestCalls::DealWithTokenAndAdjust(var)
        }
    }
    impl ::std::convert::From<DealCall> for DisputeTestCalls {
        fn from(var: DealCall) -> Self {
            DisputeTestCalls::Deal(var)
        }
    }
    impl ::std::convert::From<DeployCodeWithArgsCall> for DisputeTestCalls {
        fn from(var: DeployCodeWithArgsCall) -> Self {
            DisputeTestCalls::DeployCodeWithArgs(var)
        }
    }
    impl ::std::convert::From<DeployCodeCall> for DisputeTestCalls {
        fn from(var: DeployCodeCall) -> Self {
            DisputeTestCalls::DeployCode(var)
        }
    }
    impl ::std::convert::From<FailedCall> for DisputeTestCalls {
        fn from(var: FailedCall) -> Self {
            DisputeTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<Hoax0Call> for DisputeTestCalls {
        fn from(var: Hoax0Call) -> Self {
            DisputeTestCalls::Hoax0(var)
        }
    }
    impl ::std::convert::From<Hoax2Call> for DisputeTestCalls {
        fn from(var: Hoax2Call) -> Self {
            DisputeTestCalls::Hoax2(var)
        }
    }
    impl ::std::convert::From<Hoax3Call> for DisputeTestCalls {
        fn from(var: Hoax3Call) -> Self {
            DisputeTestCalls::Hoax3(var)
        }
    }
    impl ::std::convert::From<Hoax4Call> for DisputeTestCalls {
        fn from(var: Hoax4Call) -> Self {
            DisputeTestCalls::Hoax4(var)
        }
    }
    impl ::std::convert::From<RewindCall> for DisputeTestCalls {
        fn from(var: RewindCall) -> Self {
            DisputeTestCalls::Rewind(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for DisputeTestCalls {
        fn from(var: SetUpCall) -> Self {
            DisputeTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<SkipCall> for DisputeTestCalls {
        fn from(var: SkipCall) -> Self {
            DisputeTestCalls::Skip(var)
        }
    }
    impl ::std::convert::From<StartHoax1Call> for DisputeTestCalls {
        fn from(var: StartHoax1Call) -> Self {
            DisputeTestCalls::StartHoax1(var)
        }
    }
    impl ::std::convert::From<StartHoax2Call> for DisputeTestCalls {
        fn from(var: StartHoax2Call) -> Self {
            DisputeTestCalls::StartHoax2(var)
        }
    }
    impl ::std::convert::From<StartHoax0Call> for DisputeTestCalls {
        fn from(var: StartHoax0Call) -> Self {
            DisputeTestCalls::StartHoax0(var)
        }
    }
    impl ::std::convert::From<StartHoax4Call> for DisputeTestCalls {
        fn from(var: StartHoax4Call) -> Self {
            DisputeTestCalls::StartHoax4(var)
        }
    }
    impl ::std::convert::From<TestCannotDisputeIfNotFilledCall> for DisputeTestCalls {
        fn from(var: TestCannotDisputeIfNotFilledCall) -> Self {
            DisputeTestCalls::TestCannotDisputeIfNotFilled(var)
        }
    }
    impl ::std::convert::From<TestCannotDisputeIfPeriodIsOverCall> for DisputeTestCalls {
        fn from(var: TestCannotDisputeIfPeriodIsOverCall) -> Self {
            DisputeTestCalls::TestCannotDisputeIfPeriodIsOver(var)
        }
    }
    impl ::std::convert::From<TestDisputeCall> for DisputeTestCalls {
        fn from(var: TestDisputeCall) -> Self {
            DisputeTestCalls::TestDispute(var)
        }
    }
    impl ::std::convert::From<TipCall> for DisputeTestCalls {
        fn from(var: TipCall) -> Self {
            DisputeTestCalls::Tip(var)
        }
    }
    impl ::std::convert::From<VmCall> for DisputeTestCalls {
        fn from(var: VmCall) -> Self {
            DisputeTestCalls::Vm(var)
        }
    }
}
