pub use book::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod book {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    //!Book was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs
    use std::sync::Arc;
    use ::ethers::core::{
        abi::{Abi, Token, Detokenize, InvalidOutputType, Tokenizable},
        types::*,
    };
    use ::ethers::contract::{
        Contract, builders::{ContractCall, Event},
        Lazy,
    };
    use ::ethers::providers::Middleware;
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"contract FloodRegistry\",\"name\":\"_registry\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_safeBlockThreshold\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_disputeBondPct\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_tradeRebatePct\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_relayerRefundPct\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"_feePct\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Book__AmountOutTooLow\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocksLeft\",\"type\":\"uint256\",\"components\":[]}],\"type\":\"error\",\"name\":\"Book__DisputePeriodNotOver\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Book__FeePctTooHigh\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Book__InvalidParamsCombination\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]}],\"type\":\"error\",\"name\":\"Book__InvalidToken\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Book__InvalidValue\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\",\"components\":[]}],\"type\":\"error\",\"name\":\"Book__MaliciousCaller\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Book__NotWeth\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Book__SameToken\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Book__SentToBlackHole\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[]}],\"type\":\"error\",\"name\":\"Book__TradeNotCancelable\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Book__TradeNotDisputable\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[]}],\"type\":\"error\",\"name\":\"Book__TradeNotFilled\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[]}],\"type\":\"error\",\"name\":\"Book__TradeNotInFillableState\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Book__ZeroAmount\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Book__ZeroRegistry\",\"outputs\":[]},{\"inputs\":[],\"type\":\"error\",\"name\":\"Book__ZeroSafeBlockThreshold\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"FeePctSet\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeBondPct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeRebatePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"relayerRefundPct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ParamsCombinationSet\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSafeBlockThreshold\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"SafeBlockThresholdSet\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeCancelled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"disputeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"answer\",\"type\":\"bool\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeDisputeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"disputeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeDisputed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeFilled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"unwrapOutput\",\"type\":\"bool\",\"components\":[],\"indexed\":false},{\"internalType\":\"bool\",\"name\":\"wrapInput\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeRequested\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"cancelTrade\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"disputeBondPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"disputeTrade\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"feePct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountToSend\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"fillTrade\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"numberOfTrades\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"struct Request\",\"name\":\"request\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"enum RequestState\",\"name\":\"state\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"answer\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\",\"components\":[]}]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"onPriceSettled\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract AllKnowingOracle\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract FloodRegistry\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"relayerRefundPct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"unwrapOutput\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"requestTrade\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"safeBlockThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"settleTrade\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"tradeRebatePct\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"tradesData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"filledBy\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"enum TradeStatus\",\"name\":\"status\",\"type\":\"uint8\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"unwrapOutput\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"wrapInput\",\"type\":\"bool\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"receive\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static BOOK_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        97,
        1,
        128,
        96,
        64,
        82,
        96,
        0,
        96,
        1,
        85,
        52,
        128,
        21,
        98,
        0,
        0,
        23,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        64,
        81,
        98,
        0,
        38,
        135,
        56,
        3,
        128,
        98,
        0,
        38,
        135,
        131,
        57,
        129,
        1,
        96,
        64,
        129,
        144,
        82,
        98,
        0,
        0,
        58,
        145,
        98,
        0,
        2,
        224,
        86,
        91,
        96,
        1,
        96,
        0,
        85,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        98,
        0,
        0,
        103,
        87,
        96,
        64,
        81,
        99,
        218,
        204,
        105,
        89,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        132,
        96,
        0,
        3,
        98,
        0,
        0,
        137,
        87,
        96,
        64,
        81,
        99,
        169,
        86,
        4,
        177,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        97,
        1,
        32,
        129,
        144,
        82,
        96,
        64,
        128,
        81,
        99,
        1,
        117,
        114,
        123,
        96,
        229,
        27,
        129,
        82,
        144,
        81,
        99,
        46,
        174,
        79,
        96,
        145,
        96,
        4,
        128,
        130,
        1,
        146,
        96,
        32,
        146,
        144,
        145,
        144,
        130,
        144,
        3,
        1,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        98,
        0,
        0,
        213,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        98,
        0,
        0,
        251,
        145,
        144,
        98,
        0,
        3,
        54,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        1,
        64,
        129,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        82,
        80,
        80,
        97,
        1,
        32,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        173,
        92,
        70,
        72,
        96,
        64,
        81,
        129,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        98,
        0,
        1,
        87,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        98,
        0,
        1,
        125,
        145,
        144,
        98,
        0,
        3,
        54,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        1,
        96,
        82,
        96,
        128,
        133,
        144,
        82,
        96,
        64,
        81,
        133,
        129,
        82,
        127,
        136,
        40,
        133,
        208,
        228,
        97,
        42,
        113,
        103,
        118,
        68,
        169,
        215,
        14,
        88,
        202,
        5,
        252,
        90,
        30,
        161,
        176,
        135,
        95,
        110,
        70,
        195,
        21,
        36,
        27,
        254,
        20,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        98,
        0,
        1,
        207,
        132,
        132,
        132,
        98,
        0,
        2,
        136,
        86,
        91,
        96,
        160,
        132,
        144,
        82,
        96,
        192,
        131,
        144,
        82,
        96,
        224,
        130,
        144,
        82,
        96,
        64,
        128,
        81,
        133,
        129,
        82,
        96,
        32,
        129,
        1,
        133,
        144,
        82,
        144,
        129,
        1,
        131,
        144,
        82,
        127,
        139,
        225,
        235,
        28,
        186,
        73,
        115,
        134,
        199,
        121,
        51,
        80,
        1,
        88,
        235,
        170,
        239,
        158,
        81,
        18,
        95,
        165,
        235,
        223,
        170,
        146,
        19,
        157,
        50,
        13,
        67,
        41,
        144,
        96,
        96,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        97,
        9,
        196,
        129,
        17,
        21,
        98,
        0,
        2,
        67,
        87,
        96,
        64,
        81,
        99,
        183,
        104,
        136,
        1,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        1,
        0,
        129,
        144,
        82,
        96,
        64,
        81,
        129,
        129,
        82,
        127,
        158,
        103,
        193,
        115,
        240,
        209,
        191,
        102,
        169,
        85,
        118,
        74,
        107,
        7,
        45,
        116,
        224,
        149,
        175,
        24,
        94,
        83,
        159,
        159,
        101,
        112,
        251,
        145,
        215,
        136,
        252,
        165,
        144,
        96,
        32,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        161,
        80,
        80,
        80,
        80,
        80,
        80,
        98,
        0,
        3,
        133,
        86,
        91,
        128,
        98,
        0,
        2,
        149,
        131,
        133,
        98,
        0,
        3,
        93,
        86,
        91,
        98,
        0,
        2,
        161,
        145,
        144,
        98,
        0,
        3,
        93,
        86,
        91,
        96,
        100,
        20,
        98,
        0,
        2,
        194,
        87,
        96,
        64,
        81,
        99,
        147,
        39,
        188,
        135,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        98,
        0,
        2,
        221,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        192,
        135,
        137,
        3,
        18,
        21,
        98,
        0,
        2,
        250,
        87,
        96,
        0,
        128,
        253,
        91,
        134,
        81,
        98,
        0,
        3,
        7,
        129,
        98,
        0,
        2,
        199,
        86,
        91,
        96,
        32,
        136,
        1,
        81,
        96,
        64,
        137,
        1,
        81,
        96,
        96,
        138,
        1,
        81,
        96,
        128,
        139,
        1,
        81,
        96,
        160,
        144,
        155,
        1,
        81,
        147,
        156,
        146,
        155,
        80,
        144,
        153,
        144,
        152,
        80,
        150,
        80,
        144,
        148,
        80,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        98,
        0,
        3,
        73,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        98,
        0,
        3,
        86,
        129,
        98,
        0,
        2,
        199,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        98,
        0,
        3,
        127,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        128,
        81,
        96,
        160,
        81,
        96,
        192,
        81,
        96,
        224,
        81,
        97,
        1,
        0,
        81,
        97,
        1,
        32,
        81,
        97,
        1,
        64,
        81,
        97,
        1,
        96,
        81,
        97,
        34,
        51,
        98,
        0,
        4,
        84,
        96,
        0,
        57,
        96,
        0,
        129,
        129,
        97,
        13,
        183,
        1,
        82,
        129,
        129,
        97,
        14,
        23,
        1,
        82,
        129,
        129,
        97,
        14,
        218,
        1,
        82,
        129,
        129,
        97,
        16,
        171,
        1,
        82,
        129,
        129,
        97,
        22,
        32,
        1,
        82,
        97,
        23,
        128,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        2,
        224,
        1,
        82,
        129,
        129,
        97,
        5,
        221,
        1,
        82,
        129,
        129,
        97,
        6,
        83,
        1,
        82,
        97,
        10,
        225,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        2,
        148,
        1,
        82,
        129,
        129,
        97,
        24,
        145,
        1,
        82,
        97,
        25,
        67,
        1,
        82,
        96,
        0,
        97,
        3,
        20,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        1,
        167,
        1,
        82,
        97,
        8,
        186,
        1,
        82,
        96,
        0,
        97,
        3,
        123,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        1,
        115,
        1,
        82,
        129,
        129,
        97,
        4,
        194,
        1,
        82,
        97,
        6,
        0,
        1,
        82,
        96,
        0,
        129,
        129,
        97,
        1,
        44,
        1,
        82,
        129,
        129,
        97,
        18,
        81,
        1,
        82,
        97,
        19,
        194,
        1,
        82,
        97,
        34,
        51,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        97,
        0,
        236,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        123,
        16,
        57,
        153,
        17,
        97,
        0,
        138,
        87,
        128,
        99,
        171,
        101,
        82,
        229,
        17,
        97,
        0,
        89,
        87,
        128,
        99,
        171,
        101,
        82,
        229,
        20,
        97,
        3,
        86,
        87,
        128,
        99,
        193,
        100,
        2,
        187,
        20,
        97,
        3,
        105,
        87,
        128,
        99,
        205,
        128,
        93,
        94,
        20,
        97,
        3,
        157,
        87,
        128,
        99,
        230,
        106,
        52,
        238,
        20,
        97,
        3,
        179,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        123,
        16,
        57,
        153,
        20,
        97,
        2,
        130,
        87,
        128,
        99,
        125,
        192,
        209,
        208,
        20,
        97,
        2,
        206,
        87,
        128,
        99,
        160,
        44,
        249,
        55,
        20,
        97,
        3,
        2,
        87,
        128,
        99,
        170,
        49,
        26,
        180,
        20,
        97,
        3,
        54,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        83,
        144,
        106,
        89,
        17,
        97,
        0,
        198,
        87,
        128,
        99,
        83,
        144,
        106,
        89,
        20,
        97,
        1,
        149,
        87,
        128,
        99,
        107,
        22,
        232,
        230,
        20,
        97,
        1,
        201,
        87,
        128,
        99,
        115,
        77,
        22,
        39,
        20,
        97,
        1,
        233,
        87,
        128,
        99,
        117,
        239,
        92,
        153,
        20,
        97,
        2,
        9,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        9,
        121,
        109,
        255,
        20,
        97,
        0,
        248,
        87,
        128,
        99,
        15,
        240,
        192,
        14,
        20,
        97,
        1,
        26,
        87,
        128,
        99,
        57,
        31,
        228,
        226,
        20,
        97,
        1,
        97,
        87,
        96,
        0,
        128,
        253,
        91,
        54,
        97,
        0,
        243,
        87,
        0,
        91,
        96,
        0,
        128,
        253,
        91,
        52,
        128,
        21,
        97,
        1,
        4,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        24,
        97,
        1,
        19,
        54,
        96,
        4,
        97,
        28,
        84,
        86,
        91,
        97,
        3,
        211,
        86,
        91,
        0,
        91,
        52,
        128,
        21,
        97,
        1,
        38,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        78,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        52,
        128,
        21,
        97,
        1,
        109,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        78,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        161,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        78,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        213,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        24,
        97,
        1,
        228,
        54,
        96,
        4,
        97,
        28,
        207,
        86,
        91,
        97,
        7,
        169,
        86,
        91,
        52,
        128,
        21,
        97,
        1,
        245,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        24,
        97,
        2,
        4,
        54,
        96,
        4,
        97,
        29,
        180,
        86,
        91,
        97,
        10,
        214,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        21,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        2,
        112,
        97,
        2,
        36,
        54,
        96,
        4,
        97,
        30,
        3,
        86,
        91,
        96,
        2,
        96,
        32,
        129,
        144,
        82,
        96,
        0,
        145,
        130,
        82,
        96,
        64,
        144,
        145,
        32,
        128,
        84,
        96,
        1,
        130,
        1,
        84,
        145,
        144,
        146,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        145,
        96,
        255,
        96,
        1,
        96,
        160,
        27,
        130,
        4,
        129,
        22,
        146,
        96,
        1,
        96,
        168,
        27,
        131,
        4,
        130,
        22,
        146,
        96,
        1,
        96,
        176,
        27,
        144,
        4,
        144,
        145,
        22,
        144,
        134,
        86,
        91,
        96,
        64,
        81,
        97,
        1,
        88,
        150,
        149,
        148,
        147,
        146,
        145,
        144,
        97,
        30,
        50,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        142,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        2,
        182,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        1,
        88,
        86,
        91,
        52,
        128,
        21,
        97,
        2,
        218,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        2,
        182,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        3,
        14,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        78,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        3,
        66,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        24,
        97,
        3,
        81,
        54,
        96,
        4,
        97,
        30,
        138,
        86,
        91,
        97,
        12,
        119,
        86,
        91,
        97,
        1,
        24,
        97,
        3,
        100,
        54,
        96,
        4,
        97,
        30,
        255,
        86,
        91,
        97,
        13,
        171,
        86,
        91,
        52,
        128,
        21,
        97,
        3,
        117,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        78,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        3,
        169,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        78,
        96,
        1,
        84,
        129,
        86,
        91,
        52,
        128,
        21,
        97,
        3,
        191,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        1,
        24,
        97,
        3,
        206,
        54,
        96,
        4,
        97,
        28,
        84,
        86,
        91,
        97,
        17,
        64,
        86,
        91,
        96,
        0,
        97,
        3,
        228,
        136,
        136,
        136,
        136,
        136,
        136,
        136,
        97,
        19,
        38,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        129,
        81,
        96,
        192,
        129,
        1,
        131,
        82,
        129,
        84,
        129,
        82,
        96,
        1,
        130,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        148,
        130,
        1,
        148,
        144,
        148,
        82,
        148,
        149,
        80,
        146,
        147,
        146,
        145,
        144,
        131,
        1,
        144,
        96,
        1,
        96,
        160,
        27,
        144,
        4,
        96,
        255,
        22,
        96,
        3,
        129,
        17,
        21,
        97,
        4,
        61,
        87,
        97,
        4,
        61,
        97,
        30,
        28,
        86,
        91,
        96,
        3,
        129,
        17,
        21,
        97,
        4,
        78,
        87,
        97,
        4,
        78,
        97,
        30,
        28,
        86,
        91,
        129,
        82,
        96,
        1,
        130,
        1,
        84,
        96,
        255,
        96,
        1,
        96,
        168,
        27,
        130,
        4,
        129,
        22,
        21,
        21,
        96,
        32,
        132,
        1,
        82,
        96,
        1,
        96,
        176,
        27,
        144,
        145,
        4,
        22,
        21,
        21,
        96,
        64,
        128,
        131,
        1,
        145,
        144,
        145,
        82,
        96,
        2,
        144,
        146,
        1,
        84,
        96,
        96,
        144,
        145,
        1,
        82,
        129,
        81,
        144,
        130,
        1,
        81,
        145,
        146,
        80,
        144,
        97,
        4,
        156,
        144,
        130,
        144,
        97,
        19,
        158,
        86,
        91,
        97,
        4,
        185,
        87,
        96,
        64,
        81,
        99,
        49,
        192,
        137,
        13,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        0,
        96,
        100,
        97,
        4,
        231,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        139,
        97,
        31,
        133,
        86,
        91,
        97,
        4,
        241,
        145,
        144,
        97,
        31,
        156,
        86,
        91,
        144,
        80,
        128,
        131,
        96,
        160,
        1,
        81,
        97,
        5,
        3,
        145,
        144,
        97,
        31,
        190,
        86,
        91,
        96,
        160,
        132,
        1,
        82,
        96,
        3,
        96,
        64,
        132,
        1,
        129,
        144,
        82,
        80,
        96,
        0,
        132,
        129,
        82,
        96,
        2,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        145,
        130,
        144,
        32,
        133,
        81,
        129,
        85,
        144,
        133,
        1,
        81,
        96,
        1,
        130,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        130,
        85,
        147,
        135,
        1,
        81,
        135,
        148,
        144,
        146,
        96,
        1,
        96,
        1,
        96,
        168,
        27,
        3,
        25,
        22,
        23,
        96,
        1,
        96,
        160,
        27,
        131,
        96,
        3,
        129,
        17,
        21,
        97,
        5,
        118,
        87,
        97,
        5,
        118,
        97,
        30,
        28,
        86,
        91,
        2,
        23,
        144,
        85,
        80,
        96,
        96,
        130,
        1,
        81,
        96,
        1,
        130,
        1,
        128,
        84,
        96,
        128,
        133,
        1,
        81,
        21,
        21,
        96,
        1,
        96,
        176,
        27,
        2,
        96,
        255,
        96,
        176,
        27,
        25,
        147,
        21,
        21,
        96,
        1,
        96,
        168,
        27,
        2,
        147,
        144,
        147,
        22,
        97,
        255,
        255,
        96,
        168,
        27,
        25,
        144,
        145,
        22,
        23,
        145,
        144,
        145,
        23,
        144,
        85,
        96,
        160,
        144,
        145,
        1,
        81,
        96,
        2,
        144,
        145,
        1,
        85,
        97,
        5,
        216,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        140,
        22,
        51,
        48,
        132,
        97,
        19,
        242,
        86,
        91,
        97,
        6,
        79,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        6,
        42,
        141,
        96,
        2,
        97,
        31,
        133,
        86,
        91,
        97,
        6,
        52,
        145,
        144,
        97,
        31,
        133,
        86,
        91,
        97,
        6,
        62,
        145,
        144,
        97,
        31,
        156,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        142,
        22,
        145,
        144,
        97,
        20,
        99,
        86,
        91,
        96,
        0,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        247,
        211,
        181,
        139,
        133,
        96,
        32,
        1,
        81,
        51,
        143,
        134,
        143,
        142,
        142,
        142,
        142,
        96,
        64,
        81,
        96,
        32,
        1,
        97,
        6,
        202,
        149,
        148,
        147,
        146,
        145,
        144,
        148,
        133,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        147,
        132,
        22,
        96,
        32,
        134,
        1,
        82,
        96,
        64,
        133,
        1,
        146,
        144,
        146,
        82,
        144,
        145,
        22,
        96,
        96,
        131,
        1,
        82,
        96,
        128,
        130,
        1,
        82,
        96,
        160,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        96,
        64,
        81,
        134,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        6,
        249,
        149,
        148,
        147,
        146,
        145,
        144,
        97,
        32,
        33,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        7,
        24,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        7,
        60,
        145,
        144,
        97,
        32,
        92,
        86,
        91,
        144,
        80,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        129,
        136,
        127,
        97,
        29,
        39,
        144,
        238,
        188,
        45,
        251,
        211,
        50,
        158,
        184,
        206,
        137,
        48,
        45,
        148,
        210,
        180,
        44,
        72,
        156,
        253,
        59,
        168,
        218,
        228,
        41,
        119,
        163,
        249,
        66,
        135,
        96,
        32,
        1,
        81,
        135,
        96,
        64,
        81,
        97,
        7,
        147,
        146,
        145,
        144,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        146,
        144,
        146,
        22,
        130,
        82,
        96,
        32,
        130,
        1,
        82,
        96,
        64,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        164,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        7,
        177,
        97,
        21,
        125,
        86,
        91,
        96,
        0,
        97,
        7,
        194,
        139,
        139,
        139,
        139,
        139,
        139,
        139,
        97,
        19,
        38,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        129,
        81,
        96,
        192,
        129,
        1,
        131,
        82,
        129,
        84,
        129,
        82,
        96,
        1,
        130,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        148,
        130,
        1,
        148,
        144,
        148,
        82,
        148,
        149,
        80,
        146,
        147,
        146,
        145,
        144,
        131,
        1,
        144,
        96,
        1,
        96,
        160,
        27,
        144,
        4,
        96,
        255,
        22,
        96,
        3,
        129,
        17,
        21,
        97,
        8,
        27,
        87,
        97,
        8,
        27,
        97,
        30,
        28,
        86,
        91,
        96,
        3,
        129,
        17,
        21,
        97,
        8,
        44,
        87,
        97,
        8,
        44,
        97,
        30,
        28,
        86,
        91,
        129,
        82,
        96,
        1,
        130,
        129,
        1,
        84,
        96,
        255,
        96,
        1,
        96,
        168,
        27,
        130,
        4,
        129,
        22,
        21,
        21,
        96,
        32,
        133,
        1,
        82,
        96,
        1,
        96,
        176,
        27,
        144,
        145,
        4,
        22,
        21,
        21,
        96,
        64,
        131,
        1,
        82,
        96,
        2,
        144,
        146,
        1,
        84,
        96,
        96,
        144,
        145,
        1,
        82,
        144,
        145,
        80,
        129,
        96,
        64,
        1,
        81,
        96,
        3,
        129,
        17,
        21,
        97,
        8,
        123,
        87,
        97,
        8,
        123,
        97,
        30,
        28,
        86,
        91,
        20,
        97,
        8,
        161,
        87,
        96,
        64,
        81,
        99,
        55,
        214,
        238,
        139,
        96,
        225,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        131,
        144,
        82,
        96,
        36,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        67,
        129,
        82,
        51,
        96,
        32,
        130,
        1,
        82,
        96,
        2,
        96,
        64,
        130,
        1,
        82,
        96,
        0,
        96,
        100,
        97,
        8,
        223,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        141,
        97,
        31,
        133,
        86,
        91,
        97,
        8,
        233,
        145,
        144,
        97,
        31,
        156,
        86,
        91,
        96,
        160,
        131,
        1,
        129,
        144,
        82,
        96,
        0,
        132,
        129,
        82,
        96,
        2,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        145,
        130,
        144,
        32,
        133,
        81,
        129,
        85,
        144,
        133,
        1,
        81,
        96,
        1,
        130,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        146,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        130,
        85,
        147,
        135,
        1,
        81,
        148,
        149,
        80,
        134,
        148,
        146,
        147,
        144,
        145,
        96,
        1,
        96,
        1,
        96,
        168,
        27,
        3,
        25,
        22,
        23,
        96,
        1,
        96,
        160,
        27,
        131,
        96,
        3,
        129,
        17,
        21,
        97,
        9,
        89,
        87,
        97,
        9,
        89,
        97,
        30,
        28,
        86,
        91,
        2,
        23,
        144,
        85,
        80,
        96,
        96,
        130,
        1,
        81,
        96,
        1,
        130,
        1,
        128,
        84,
        96,
        128,
        133,
        1,
        81,
        21,
        21,
        96,
        1,
        96,
        176,
        27,
        2,
        96,
        255,
        96,
        176,
        27,
        25,
        147,
        21,
        21,
        96,
        1,
        96,
        168,
        27,
        2,
        147,
        144,
        147,
        22,
        97,
        255,
        255,
        96,
        168,
        27,
        25,
        144,
        145,
        22,
        23,
        145,
        144,
        145,
        23,
        144,
        85,
        96,
        160,
        144,
        145,
        1,
        81,
        96,
        2,
        144,
        145,
        1,
        85,
        97,
        9,
        186,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        142,
        22,
        51,
        131,
        97,
        21,
        214,
        86,
        91,
        133,
        132,
        21,
        97,
        10,
        60,
        87,
        96,
        64,
        81,
        99,
        60,
        231,
        8,
        51,
        96,
        225,
        27,
        129,
        82,
        96,
        0,
        144,
        51,
        144,
        99,
        121,
        206,
        16,
        102,
        144,
        97,
        9,
        233,
        144,
        138,
        144,
        138,
        144,
        96,
        4,
        1,
        97,
        32,
        117,
        86,
        91,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        90,
        241,
        21,
        128,
        21,
        97,
        10,
        8,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        10,
        44,
        145,
        144,
        97,
        32,
        92,
        86,
        91,
        144,
        80,
        135,
        129,
        17,
        21,
        97,
        10,
        58,
        87,
        128,
        145,
        80,
        91,
        80,
        91,
        138,
        129,
        16,
        21,
        97,
        10,
        93,
        87,
        96,
        64,
        81,
        99,
        18,
        46,
        51,
        207,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        135,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        137,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        129,
        243,
        221,
        221,
        230,
        44,
        184,
        213,
        144,
        211,
        145,
        153,
        155,
        193,
        164,
        195,
        98,
        160,
        60,
        247,
        71,
        24,
        251,
        59,
        216,
        25,
        91,
        70,
        252,
        28,
        16,
        9,
        132,
        96,
        64,
        81,
        97,
        10,
        163,
        145,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        164,
        97,
        10,
        188,
        141,
        51,
        140,
        132,
        135,
        96,
        96,
        1,
        81,
        97,
        22,
        6,
        86,
        91,
        80,
        80,
        80,
        80,
        97,
        10,
        202,
        96,
        1,
        96,
        0,
        85,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        51,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        20,
        97,
        11,
        33,
        87,
        96,
        64,
        81,
        99,
        52,
        123,
        12,
        51,
        96,
        225,
        27,
        129,
        82,
        51,
        96,
        4,
        130,
        1,
        82,
        96,
        36,
        1,
        97,
        8,
        152,
        86,
        91,
        96,
        0,
        128,
        128,
        128,
        128,
        97,
        11,
        52,
        96,
        224,
        135,
        1,
        135,
        97,
        32,
        164,
        86,
        91,
        129,
        1,
        144,
        97,
        11,
        65,
        145,
        144,
        97,
        32,
        242,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        129,
        144,
        82,
        96,
        64,
        130,
        32,
        1,
        84,
        149,
        154,
        80,
        147,
        152,
        80,
        145,
        150,
        80,
        148,
        80,
        146,
        80,
        144,
        97,
        11,
        107,
        144,
        135,
        97,
        33,
        68,
        86,
        91,
        144,
        80,
        97,
        11,
        118,
        130,
        97,
        24,
        23,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        136,
        133,
        127,
        242,
        127,
        190,
        109,
        176,
        107,
        184,
        172,
        138,
        43,
        66,
        6,
        238,
        242,
        91,
        231,
        192,
        7,
        217,
        253,
        141,
        83,
        167,
        114,
        197,
        255,
        164,
        215,
        72,
        121,
        82,
        178,
        97,
        11,
        179,
        96,
        64,
        140,
        1,
        96,
        32,
        141,
        1,
        97,
        33,
        87,
        86,
        91,
        97,
        11,
        195,
        96,
        224,
        141,
        1,
        96,
        192,
        142,
        1,
        97,
        33,
        123,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        147,
        22,
        131,
        82,
        144,
        21,
        21,
        96,
        32,
        131,
        1,
        82,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        164,
        97,
        11,
        245,
        96,
        224,
        136,
        1,
        96,
        192,
        137,
        1,
        97,
        33,
        123,
        86,
        91,
        21,
        97,
        12,
        51,
        87,
        97,
        12,
        46,
        97,
        12,
        13,
        96,
        64,
        137,
        1,
        96,
        32,
        138,
        1,
        97,
        33,
        87,
        86,
        91,
        130,
        97,
        12,
        30,
        96,
        128,
        139,
        1,
        96,
        96,
        140,
        1,
        97,
        33,
        87,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        145,
        144,
        97,
        21,
        214,
        86,
        91,
        97,
        12,
        109,
        86,
        91,
        97,
        12,
        109,
        97,
        12,
        70,
        96,
        128,
        137,
        1,
        96,
        96,
        138,
        1,
        97,
        33,
        87,
        86,
        91,
        96,
        0,
        132,
        129,
        82,
        96,
        2,
        96,
        32,
        82,
        96,
        64,
        144,
        32,
        96,
        1,
        1,
        84,
        48,
        144,
        136,
        144,
        133,
        144,
        96,
        1,
        96,
        168,
        27,
        144,
        4,
        96,
        255,
        22,
        97,
        22,
        6,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        12,
        136,
        135,
        135,
        135,
        135,
        135,
        135,
        51,
        97,
        19,
        38,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        129,
        81,
        96,
        192,
        129,
        1,
        131,
        82,
        129,
        84,
        129,
        82,
        96,
        1,
        130,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        148,
        130,
        1,
        148,
        144,
        148,
        82,
        148,
        149,
        80,
        146,
        147,
        146,
        145,
        144,
        131,
        1,
        144,
        96,
        1,
        96,
        160,
        27,
        144,
        4,
        96,
        255,
        22,
        96,
        3,
        129,
        17,
        21,
        97,
        12,
        225,
        87,
        97,
        12,
        225,
        97,
        30,
        28,
        86,
        91,
        96,
        3,
        129,
        17,
        21,
        97,
        12,
        242,
        87,
        97,
        12,
        242,
        97,
        30,
        28,
        86,
        91,
        129,
        82,
        96,
        1,
        130,
        129,
        1,
        84,
        96,
        255,
        96,
        1,
        96,
        168,
        27,
        130,
        4,
        129,
        22,
        21,
        21,
        96,
        32,
        133,
        1,
        82,
        96,
        1,
        96,
        176,
        27,
        144,
        145,
        4,
        22,
        21,
        21,
        96,
        64,
        131,
        1,
        82,
        96,
        2,
        144,
        146,
        1,
        84,
        96,
        96,
        144,
        145,
        1,
        82,
        144,
        145,
        80,
        129,
        96,
        64,
        1,
        81,
        96,
        3,
        129,
        17,
        21,
        97,
        13,
        65,
        87,
        97,
        13,
        65,
        97,
        30,
        28,
        86,
        91,
        20,
        97,
        13,
        98,
        87,
        96,
        64,
        81,
        99,
        6,
        149,
        114,
        169,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        131,
        144,
        82,
        96,
        36,
        1,
        97,
        8,
        152,
        86,
        91,
        97,
        13,
        107,
        130,
        97,
        24,
        23,
        86,
        91,
        96,
        64,
        81,
        51,
        144,
        131,
        144,
        133,
        144,
        127,
        74,
        174,
        169,
        210,
        137,
        252,
        247,
        150,
        238,
        45,
        147,
        171,
        119,
        48,
        201,
        160,
        175,
        167,
        157,
        3,
        222,
        191,
        101,
        40,
        221,
        127,
        19,
        168,
        54,
        19,
        183,
        244,
        144,
        96,
        0,
        144,
        164,
        97,
        12,
        109,
        136,
        48,
        51,
        137,
        133,
        96,
        128,
        1,
        81,
        97,
        22,
        6,
        86,
        91,
        97,
        13,
        181,
        134,
        134,
        97,
        24,
        64,
        86,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        21,
        128,
        21,
        97,
        13,
        247,
        87,
        80,
        96,
        0,
        52,
        17,
        91,
        21,
        97,
        14,
        21,
        87,
        96,
        64,
        81,
        99,
        152,
        165,
        176,
        191,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        128,
        21,
        97,
        14,
        86,
        87,
        80,
        96,
        0,
        52,
        17,
        91,
        128,
        21,
        97,
        14,
        98,
        87,
        80,
        131,
        52,
        20,
        21,
        91,
        21,
        97,
        14,
        128,
        87,
        96,
        64,
        81,
        99,
        29,
        87,
        162,
        57,
        96,
        227,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        131,
        21,
        128,
        97,
        14,
        139,
        87,
        80,
        130,
        21,
        91,
        21,
        97,
        14,
        169,
        87,
        96,
        64,
        81,
        99,
        5,
        220,
        79,
        131,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        97,
        14,
        208,
        87,
        96,
        64,
        81,
        99,
        37,
        245,
        189,
        247,
        96,
        226,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        128,
        128,
        21,
        97,
        15,
        15,
        87,
        80,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        21,
        91,
        21,
        97,
        15,
        45,
        87,
        96,
        64,
        81,
        99,
        152,
        165,
        176,
        191,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        1,
        84,
        96,
        64,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        136,
        129,
        22,
        130,
        82,
        96,
        32,
        130,
        1,
        136,
        144,
        82,
        145,
        129,
        1,
        134,
        144,
        82,
        132,
        130,
        22,
        96,
        96,
        130,
        1,
        82,
        131,
        21,
        21,
        96,
        128,
        130,
        1,
        82,
        52,
        21,
        21,
        96,
        160,
        130,
        1,
        82,
        51,
        146,
        145,
        137,
        22,
        144,
        127,
        111,
        68,
        164,
        190,
        232,
        26,
        149,
        88,
        187,
        30,
        29,
        100,
        95,
        71,
        244,
        218,
        24,
        198,
        19,
        24,
        162,
        203,
        191,
        103,
        201,
        16,
        163,
        98,
        64,
        153,
        93,
        18,
        144,
        96,
        192,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        164,
        96,
        0,
        97,
        15,
        172,
        135,
        135,
        135,
        135,
        135,
        96,
        1,
        84,
        51,
        97,
        19,
        38,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        192,
        129,
        1,
        130,
        82,
        96,
        0,
        128,
        130,
        82,
        96,
        32,
        128,
        131,
        1,
        130,
        129,
        82,
        96,
        1,
        132,
        134,
        1,
        129,
        129,
        82,
        137,
        21,
        21,
        96,
        96,
        135,
        1,
        82,
        52,
        21,
        21,
        96,
        128,
        135,
        1,
        82,
        96,
        160,
        134,
        1,
        133,
        144,
        82,
        135,
        133,
        82,
        96,
        2,
        144,
        147,
        82,
        148,
        144,
        146,
        32,
        131,
        81,
        129,
        85,
        145,
        81,
        147,
        130,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        144,
        149,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        134,
        22,
        129,
        23,
        130,
        85,
        145,
        81,
        149,
        150,
        80,
        146,
        148,
        145,
        147,
        145,
        146,
        145,
        96,
        1,
        96,
        1,
        96,
        168,
        27,
        3,
        25,
        22,
        23,
        96,
        1,
        96,
        160,
        27,
        131,
        96,
        3,
        129,
        17,
        21,
        97,
        16,
        65,
        87,
        97,
        16,
        65,
        97,
        30,
        28,
        86,
        91,
        2,
        23,
        144,
        85,
        80,
        96,
        96,
        130,
        1,
        81,
        96,
        1,
        128,
        131,
        1,
        128,
        84,
        96,
        128,
        134,
        1,
        81,
        21,
        21,
        96,
        1,
        96,
        176,
        27,
        2,
        96,
        255,
        96,
        176,
        27,
        25,
        148,
        21,
        21,
        96,
        1,
        96,
        168,
        27,
        2,
        148,
        144,
        148,
        22,
        97,
        255,
        255,
        96,
        168,
        27,
        25,
        144,
        145,
        22,
        23,
        146,
        144,
        146,
        23,
        144,
        145,
        85,
        96,
        160,
        144,
        146,
        1,
        81,
        96,
        2,
        144,
        145,
        1,
        85,
        128,
        84,
        144,
        96,
        0,
        97,
        16,
        158,
        131,
        97,
        33,
        152,
        86,
        91,
        144,
        145,
        85,
        80,
        80,
        52,
        21,
        97,
        17,
        34,
        87,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        99,
        208,
        227,
        13,
        176,
        134,
        96,
        64,
        81,
        130,
        99,
        255,
        255,
        255,
        255,
        22,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        136,
        128,
        59,
        21,
        128,
        21,
        97,
        17,
        4,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        17,
        24,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        80,
        97,
        17,
        55,
        86,
        91,
        97,
        17,
        55,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        136,
        22,
        51,
        48,
        136,
        97,
        19,
        242,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        17,
        81,
        136,
        136,
        136,
        136,
        136,
        136,
        136,
        97,
        19,
        38,
        86,
        91,
        96,
        0,
        129,
        129,
        82,
        96,
        2,
        96,
        32,
        144,
        129,
        82,
        96,
        64,
        128,
        131,
        32,
        129,
        81,
        96,
        192,
        129,
        1,
        131,
        82,
        129,
        84,
        129,
        82,
        96,
        1,
        130,
        1,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        148,
        130,
        1,
        148,
        144,
        148,
        82,
        148,
        149,
        80,
        146,
        147,
        146,
        145,
        144,
        131,
        1,
        144,
        96,
        1,
        96,
        160,
        27,
        144,
        4,
        96,
        255,
        22,
        96,
        3,
        129,
        17,
        21,
        97,
        17,
        170,
        87,
        97,
        17,
        170,
        97,
        30,
        28,
        86,
        91,
        96,
        3,
        129,
        17,
        21,
        97,
        17,
        187,
        87,
        97,
        17,
        187,
        97,
        30,
        28,
        86,
        91,
        129,
        82,
        96,
        1,
        130,
        1,
        84,
        96,
        255,
        96,
        1,
        96,
        168,
        27,
        130,
        4,
        129,
        22,
        21,
        21,
        96,
        32,
        132,
        1,
        82,
        96,
        1,
        96,
        176,
        27,
        144,
        145,
        4,
        22,
        21,
        21,
        96,
        64,
        130,
        1,
        82,
        96,
        2,
        145,
        130,
        1,
        84,
        96,
        96,
        144,
        145,
        1,
        82,
        129,
        81,
        145,
        146,
        80,
        130,
        96,
        64,
        1,
        81,
        96,
        3,
        129,
        17,
        21,
        97,
        18,
        11,
        87,
        97,
        18,
        11,
        97,
        30,
        28,
        86,
        91,
        20,
        97,
        18,
        44,
        87,
        96,
        64,
        81,
        99,
        15,
        112,
        203,
        227,
        96,
        228,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        132,
        144,
        82,
        96,
        36,
        1,
        97,
        8,
        152,
        86,
        91,
        97,
        18,
        58,
        129,
        131,
        96,
        64,
        1,
        81,
        97,
        19,
        158,
        86,
        91,
        21,
        97,
        18,
        148,
        87,
        96,
        0,
        97,
        18,
        75,
        130,
        67,
        97,
        33,
        68,
        86,
        91,
        97,
        18,
        117,
        144,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        33,
        68,
        86,
        91,
        144,
        80,
        128,
        96,
        64,
        81,
        99,
        123,
        232,
        82,
        47,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        8,
        152,
        145,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        32,
        130,
        1,
        81,
        96,
        160,
        131,
        1,
        81,
        96,
        0,
        144,
        97,
        18,
        171,
        144,
        139,
        97,
        33,
        68,
        86,
        91,
        144,
        80,
        97,
        18,
        182,
        133,
        97,
        24,
        23,
        86,
        91,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        135,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        127,
        222,
        182,
        238,
        27,
        187,
        170,
        172,
        29,
        107,
        120,
        115,
        166,
        121,
        212,
        98,
        17,
        13,
        213,
        77,
        114,
        145,
        84,
        54,
        98,
        44,
        192,
        5,
        37,
        194,
        86,
        28,
        171,
        134,
        96,
        64,
        81,
        97,
        18,
        252,
        145,
        129,
        82,
        96,
        32,
        1,
        144,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        164,
        97,
        19,
        24,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        141,
        22,
        131,
        131,
        97,
        21,
        214,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        107,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        25,
        96,
        96,
        137,
        129,
        27,
        130,
        22,
        96,
        32,
        132,
        1,
        82,
        136,
        129,
        27,
        130,
        22,
        96,
        52,
        132,
        1,
        82,
        96,
        72,
        131,
        1,
        136,
        144,
        82,
        96,
        104,
        131,
        1,
        135,
        144,
        82,
        133,
        129,
        27,
        130,
        22,
        96,
        136,
        132,
        1,
        82,
        96,
        156,
        131,
        1,
        133,
        144,
        82,
        131,
        144,
        27,
        22,
        96,
        188,
        130,
        1,
        82,
        96,
        0,
        144,
        96,
        208,
        1,
        96,
        64,
        81,
        96,
        32,
        129,
        131,
        3,
        3,
        129,
        82,
        144,
        96,
        64,
        82,
        128,
        81,
        144,
        96,
        32,
        1,
        32,
        144,
        80,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        2,
        130,
        96,
        3,
        129,
        17,
        21,
        97,
        19,
        180,
        87,
        97,
        19,
        180,
        97,
        30,
        28,
        86,
        91,
        20,
        128,
        21,
        97,
        19,
        233,
        87,
        80,
        97,
        19,
        230,
        131,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        97,
        31,
        190,
        86,
        91,
        67,
        16,
        91,
        144,
        80,
        91,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        128,
        133,
        22,
        96,
        36,
        131,
        1,
        82,
        131,
        22,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        129,
        1,
        130,
        144,
        82,
        97,
        20,
        93,
        144,
        133,
        144,
        99,
        35,
        184,
        114,
        221,
        96,
        224,
        27,
        144,
        96,
        132,
        1,
        91,
        96,
        64,
        128,
        81,
        96,
        31,
        25,
        129,
        132,
        3,
        1,
        129,
        82,
        145,
        144,
        82,
        96,
        32,
        129,
        1,
        128,
        81,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        22,
        96,
        1,
        96,
        1,
        96,
        224,
        27,
        3,
        25,
        144,
        147,
        22,
        146,
        144,
        146,
        23,
        144,
        145,
        82,
        97,
        25,
        218,
        86,
        91,
        80,
        80,
        80,
        80,
        86,
        91,
        128,
        21,
        128,
        97,
        20,
        221,
        87,
        80,
        96,
        64,
        81,
        99,
        110,
        177,
        118,
        159,
        96,
        225,
        27,
        129,
        82,
        48,
        96,
        4,
        130,
        1,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        36,
        131,
        1,
        82,
        132,
        22,
        144,
        99,
        221,
        98,
        237,
        62,
        144,
        96,
        68,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        20,
        183,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        20,
        219,
        145,
        144,
        97,
        32,
        92,
        86,
        91,
        21,
        91,
        97,
        21,
        72,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        54,
        96,
        36,
        130,
        1,
        82,
        127,
        83,
        97,
        102,
        101,
        69,
        82,
        67,
        50,
        48,
        58,
        32,
        97,
        112,
        112,
        114,
        111,
        118,
        101,
        32,
        102,
        114,
        111,
        109,
        32,
        110,
        111,
        110,
        45,
        122,
        101,
        114,
        111,
        96,
        68,
        130,
        1,
        82,
        117,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        122,
        101,
        114,
        111,
        32,
        97,
        108,
        108,
        111,
        119,
        97,
        110,
        99,
        101,
        96,
        80,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        8,
        152,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        96,
        36,
        130,
        1,
        82,
        96,
        68,
        129,
        1,
        130,
        144,
        82,
        97,
        21,
        120,
        144,
        132,
        144,
        99,
        9,
        94,
        167,
        179,
        96,
        224,
        27,
        144,
        96,
        100,
        1,
        97,
        20,
        38,
        86,
        91,
        80,
        80,
        80,
        86,
        91,
        96,
        2,
        96,
        0,
        84,
        3,
        97,
        21,
        207,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        31,
        96,
        36,
        130,
        1,
        82,
        127,
        82,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        99,
        121,
        71,
        117,
        97,
        114,
        100,
        58,
        32,
        114,
        101,
        101,
        110,
        116,
        114,
        97,
        110,
        116,
        32,
        99,
        97,
        108,
        108,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        8,
        152,
        86,
        91,
        96,
        2,
        96,
        0,
        85,
        86,
        91,
        96,
        64,
        81,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        96,
        36,
        130,
        1,
        82,
        96,
        68,
        129,
        1,
        130,
        144,
        82,
        97,
        21,
        120,
        144,
        132,
        144,
        99,
        169,
        5,
        156,
        187,
        96,
        224,
        27,
        144,
        96,
        100,
        1,
        97,
        20,
        38,
        86,
        91,
        48,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        3,
        97,
        23,
        118,
        87,
        128,
        128,
        21,
        97,
        22,
        84,
        87,
        80,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        91,
        21,
        97,
        23,
        93,
        87,
        96,
        64,
        81,
        99,
        46,
        26,
        125,
        77,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        131,
        144,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        144,
        99,
        46,
        26,
        125,
        77,
        144,
        96,
        36,
        1,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        96,
        0,
        135,
        128,
        59,
        21,
        128,
        21,
        97,
        22,
        156,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        90,
        241,
        21,
        128,
        21,
        97,
        22,
        176,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        0,
        131,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        131,
        96,
        64,
        81,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        23,
        1,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        23,
        6,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        80,
        144,
        80,
        128,
        97,
        23,
        87,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        25,
        96,
        36,
        130,
        1,
        82,
        127,
        66,
        111,
        111,
        107,
        58,
        32,
        69,
        84,
        72,
        32,
        116,
        114,
        97,
        110,
        115,
        102,
        101,
        114,
        32,
        102,
        97,
        105,
        108,
        101,
        100,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        8,
        152,
        86,
        91,
        80,
        97,
        24,
        16,
        86,
        91,
        97,
        23,
        113,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        132,
        132,
        97,
        21,
        214,
        86,
        91,
        97,
        24,
        16,
        86,
        91,
        128,
        128,
        21,
        97,
        23,
        180,
        87,
        80,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        20,
        91,
        21,
        97,
        23,
        251,
        87,
        97,
        23,
        206,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        133,
        48,
        133,
        97,
        19,
        242,
        86,
        91,
        96,
        64,
        81,
        99,
        46,
        26,
        125,
        77,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        129,
        1,
        131,
        144,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        144,
        99,
        46,
        26,
        125,
        77,
        144,
        96,
        36,
        1,
        97,
        22,
        130,
        86,
        91,
        97,
        24,
        16,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        133,
        133,
        133,
        97,
        19,
        242,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        144,
        129,
        82,
        96,
        2,
        96,
        32,
        129,
        144,
        82,
        96,
        64,
        130,
        32,
        130,
        129,
        85,
        96,
        1,
        129,
        1,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        184,
        27,
        3,
        25,
        22,
        144,
        85,
        1,
        85,
        86,
        91,
        128,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        130,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        3,
        97,
        24,
        114,
        87,
        96,
        64,
        81,
        99,
        111,
        143,
        6,
        211,
        96,
        224,
        27,
        129,
        82,
        96,
        4,
        1,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        96,
        64,
        81,
        99,
        181,
        175,
        9,
        15,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        144,
        99,
        181,
        175,
        9,
        15,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        24,
        216,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        24,
        252,
        145,
        144,
        97,
        33,
        177,
        86,
        91,
        97,
        25,
        36,
        87,
        96,
        64,
        81,
        99,
        120,
        171,
        207,
        103,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        22,
        96,
        4,
        130,
        1,
        82,
        96,
        36,
        1,
        97,
        8,
        152,
        86,
        91,
        96,
        64,
        81,
        99,
        181,
        175,
        9,
        15,
        96,
        224,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        129,
        22,
        96,
        4,
        131,
        1,
        82,
        127,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        144,
        99,
        181,
        175,
        9,
        15,
        144,
        96,
        36,
        1,
        96,
        32,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        134,
        90,
        250,
        21,
        128,
        21,
        97,
        25,
        138,
        87,
        61,
        96,
        0,
        128,
        62,
        61,
        96,
        0,
        253,
        91,
        80,
        80,
        80,
        80,
        96,
        64,
        81,
        61,
        96,
        31,
        25,
        96,
        31,
        130,
        1,
        22,
        130,
        1,
        128,
        96,
        64,
        82,
        80,
        129,
        1,
        144,
        97,
        25,
        174,
        145,
        144,
        97,
        33,
        177,
        86,
        91,
        97,
        25,
        214,
        87,
        96,
        64,
        81,
        99,
        120,
        171,
        207,
        103,
        96,
        225,
        27,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        130,
        22,
        96,
        4,
        130,
        1,
        82,
        96,
        36,
        1,
        97,
        8,
        152,
        86,
        91,
        80,
        80,
        86,
        91,
        96,
        0,
        97,
        26,
        47,
        130,
        96,
        64,
        81,
        128,
        96,
        64,
        1,
        96,
        64,
        82,
        128,
        96,
        32,
        129,
        82,
        96,
        32,
        1,
        127,
        83,
        97,
        102,
        101,
        69,
        82,
        67,
        50,
        48,
        58,
        32,
        108,
        111,
        119,
        45,
        108,
        101,
        118,
        101,
        108,
        32,
        99,
        97,
        108,
        108,
        32,
        102,
        97,
        105,
        108,
        101,
        100,
        129,
        82,
        80,
        133,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        97,
        26,
        172,
        144,
        146,
        145,
        144,
        99,
        255,
        255,
        255,
        255,
        22,
        86,
        91,
        128,
        81,
        144,
        145,
        80,
        21,
        97,
        21,
        120,
        87,
        128,
        128,
        96,
        32,
        1,
        144,
        81,
        129,
        1,
        144,
        97,
        26,
        77,
        145,
        144,
        97,
        33,
        177,
        86,
        91,
        97,
        21,
        120,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        42,
        96,
        36,
        130,
        1,
        82,
        127,
        83,
        97,
        102,
        101,
        69,
        82,
        67,
        50,
        48,
        58,
        32,
        69,
        82,
        67,
        50,
        48,
        32,
        111,
        112,
        101,
        114,
        97,
        116,
        105,
        111,
        110,
        32,
        100,
        105,
        100,
        32,
        110,
        96,
        68,
        130,
        1,
        82,
        105,
        27,
        221,
        8,
        28,
        221,
        88,
        216,
        217,
        89,
        89,
        96,
        178,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        8,
        152,
        86,
        91,
        96,
        96,
        97,
        26,
        187,
        132,
        132,
        96,
        0,
        133,
        97,
        26,
        195,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        130,
        71,
        16,
        21,
        97,
        27,
        36,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        38,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        105,
        110,
        115,
        117,
        102,
        102,
        105,
        99,
        105,
        101,
        110,
        116,
        32,
        98,
        97,
        108,
        97,
        110,
        99,
        101,
        32,
        102,
        111,
        96,
        68,
        130,
        1,
        82,
        101,
        28,
        136,
        24,
        216,
        91,
        27,
        96,
        210,
        27,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        97,
        8,
        152,
        86,
        91,
        96,
        0,
        128,
        134,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        22,
        133,
        135,
        96,
        64,
        81,
        97,
        27,
        64,
        145,
        144,
        97,
        33,
        206,
        86,
        91,
        96,
        0,
        96,
        64,
        81,
        128,
        131,
        3,
        129,
        133,
        135,
        90,
        241,
        146,
        80,
        80,
        80,
        61,
        128,
        96,
        0,
        129,
        20,
        97,
        27,
        125,
        87,
        96,
        64,
        81,
        145,
        80,
        96,
        31,
        25,
        96,
        63,
        61,
        1,
        22,
        130,
        1,
        96,
        64,
        82,
        61,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        97,
        27,
        130,
        86,
        91,
        96,
        96,
        145,
        80,
        91,
        80,
        145,
        80,
        145,
        80,
        97,
        27,
        147,
        135,
        131,
        131,
        135,
        97,
        27,
        158,
        86,
        91,
        151,
        150,
        80,
        80,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        96,
        131,
        21,
        97,
        28,
        13,
        87,
        130,
        81,
        96,
        0,
        3,
        97,
        28,
        6,
        87,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        133,
        22,
        59,
        97,
        28,
        6,
        87,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        29,
        96,
        36,
        130,
        1,
        82,
        127,
        65,
        100,
        100,
        114,
        101,
        115,
        115,
        58,
        32,
        99,
        97,
        108,
        108,
        32,
        116,
        111,
        32,
        110,
        111,
        110,
        45,
        99,
        111,
        110,
        116,
        114,
        97,
        99,
        116,
        0,
        0,
        0,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        8,
        152,
        86,
        91,
        80,
        129,
        97,
        26,
        187,
        86,
        91,
        97,
        26,
        187,
        131,
        131,
        129,
        81,
        21,
        97,
        28,
        34,
        87,
        129,
        81,
        128,
        131,
        96,
        32,
        1,
        253,
        91,
        128,
        96,
        64,
        81,
        98,
        70,
        27,
        205,
        96,
        229,
        27,
        129,
        82,
        96,
        4,
        1,
        97,
        8,
        152,
        145,
        144,
        97,
        33,
        234,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        129,
        22,
        129,
        20,
        97,
        28,
        81,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        224,
        136,
        138,
        3,
        18,
        21,
        97,
        28,
        111,
        87,
        96,
        0,
        128,
        253,
        91,
        135,
        53,
        97,
        28,
        122,
        129,
        97,
        28,
        60,
        86,
        91,
        150,
        80,
        96,
        32,
        136,
        1,
        53,
        97,
        28,
        138,
        129,
        97,
        28,
        60,
        86,
        91,
        149,
        80,
        96,
        64,
        136,
        1,
        53,
        148,
        80,
        96,
        96,
        136,
        1,
        53,
        147,
        80,
        96,
        128,
        136,
        1,
        53,
        97,
        28,
        168,
        129,
        97,
        28,
        60,
        86,
        91,
        146,
        80,
        96,
        160,
        136,
        1,
        53,
        145,
        80,
        96,
        192,
        136,
        1,
        53,
        97,
        28,
        191,
        129,
        97,
        28,
        60,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        149,
        152,
        145,
        148,
        151,
        80,
        146,
        149,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        97,
        1,
        32,
        139,
        141,
        3,
        18,
        21,
        97,
        28,
        239,
        87,
        96,
        0,
        128,
        253,
        91,
        138,
        53,
        97,
        28,
        250,
        129,
        97,
        28,
        60,
        86,
        91,
        153,
        80,
        96,
        32,
        139,
        1,
        53,
        97,
        29,
        10,
        129,
        97,
        28,
        60,
        86,
        91,
        152,
        80,
        96,
        64,
        139,
        1,
        53,
        151,
        80,
        96,
        96,
        139,
        1,
        53,
        150,
        80,
        96,
        128,
        139,
        1,
        53,
        97,
        29,
        40,
        129,
        97,
        28,
        60,
        86,
        91,
        149,
        80,
        96,
        160,
        139,
        1,
        53,
        148,
        80,
        96,
        192,
        139,
        1,
        53,
        97,
        29,
        63,
        129,
        97,
        28,
        60,
        86,
        91,
        147,
        80,
        96,
        224,
        139,
        1,
        53,
        146,
        80,
        97,
        1,
        0,
        139,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        29,
        100,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        141,
        1,
        145,
        80,
        141,
        96,
        31,
        131,
        1,
        18,
        97,
        29,
        120,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        129,
        129,
        17,
        21,
        97,
        29,
        135,
        87,
        96,
        0,
        128,
        253,
        91,
        142,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        29,
        153,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        148,
        80,
        128,
        147,
        80,
        80,
        80,
        80,
        146,
        149,
        152,
        155,
        145,
        148,
        151,
        154,
        80,
        146,
        149,
        152,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        64,
        131,
        133,
        3,
        18,
        21,
        97,
        29,
        199,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        145,
        80,
        96,
        32,
        131,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        29,
        229,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        1,
        97,
        1,
        0,
        129,
        134,
        3,
        18,
        21,
        97,
        29,
        248,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        145,
        80,
        80,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        30,
        21,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        53,
        145,
        144,
        80,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        134,
        129,
        82,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        22,
        96,
        32,
        130,
        1,
        82,
        96,
        192,
        129,
        1,
        96,
        4,
        134,
        16,
        97,
        30,
        102,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        33,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        64,
        130,
        1,
        149,
        144,
        149,
        82,
        146,
        21,
        21,
        96,
        96,
        132,
        1,
        82,
        144,
        21,
        21,
        96,
        128,
        131,
        1,
        82,
        96,
        160,
        144,
        145,
        1,
        82,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        192,
        135,
        137,
        3,
        18,
        21,
        97,
        30,
        163,
        87,
        96,
        0,
        128,
        253,
        91,
        134,
        53,
        97,
        30,
        174,
        129,
        97,
        28,
        60,
        86,
        91,
        149,
        80,
        96,
        32,
        135,
        1,
        53,
        97,
        30,
        190,
        129,
        97,
        28,
        60,
        86,
        91,
        148,
        80,
        96,
        64,
        135,
        1,
        53,
        147,
        80,
        96,
        96,
        135,
        1,
        53,
        146,
        80,
        96,
        128,
        135,
        1,
        53,
        97,
        30,
        220,
        129,
        97,
        28,
        60,
        86,
        91,
        128,
        146,
        80,
        80,
        96,
        160,
        135,
        1,
        53,
        144,
        80,
        146,
        149,
        80,
        146,
        149,
        80,
        146,
        149,
        86,
        91,
        128,
        21,
        21,
        129,
        20,
        97,
        28,
        81,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        192,
        135,
        137,
        3,
        18,
        21,
        97,
        31,
        24,
        87,
        96,
        0,
        128,
        253,
        91,
        134,
        53,
        97,
        31,
        35,
        129,
        97,
        28,
        60,
        86,
        91,
        149,
        80,
        96,
        32,
        135,
        1,
        53,
        97,
        31,
        51,
        129,
        97,
        28,
        60,
        86,
        91,
        148,
        80,
        96,
        64,
        135,
        1,
        53,
        147,
        80,
        96,
        96,
        135,
        1,
        53,
        146,
        80,
        96,
        128,
        135,
        1,
        53,
        97,
        31,
        81,
        129,
        97,
        28,
        60,
        86,
        91,
        145,
        80,
        96,
        160,
        135,
        1,
        53,
        97,
        31,
        97,
        129,
        97,
        30,
        241,
        86,
        91,
        128,
        145,
        80,
        80,
        146,
        149,
        80,
        146,
        149,
        80,
        146,
        149,
        86,
        91,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        17,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        128,
        130,
        2,
        129,
        21,
        130,
        130,
        4,
        132,
        20,
        23,
        97,
        19,
        236,
        87,
        97,
        19,
        236,
        97,
        31,
        111,
        86,
        91,
        96,
        0,
        130,
        97,
        31,
        185,
        87,
        99,
        78,
        72,
        123,
        113,
        96,
        224,
        27,
        96,
        0,
        82,
        96,
        18,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        4,
        144,
        86,
        91,
        128,
        130,
        1,
        128,
        130,
        17,
        21,
        97,
        19,
        236,
        87,
        97,
        19,
        236,
        97,
        31,
        111,
        86,
        91,
        96,
        0,
        91,
        131,
        129,
        16,
        21,
        97,
        31,
        236,
        87,
        129,
        129,
        1,
        81,
        131,
        130,
        1,
        82,
        96,
        32,
        1,
        97,
        31,
        212,
        86,
        91,
        80,
        80,
        96,
        0,
        145,
        1,
        82,
        86,
        91,
        96,
        0,
        129,
        81,
        128,
        132,
        82,
        97,
        32,
        13,
        129,
        96,
        32,
        134,
        1,
        96,
        32,
        134,
        1,
        97,
        31,
        209,
        86,
        91,
        96,
        31,
        1,
        96,
        31,
        25,
        22,
        146,
        144,
        146,
        1,
        96,
        32,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        134,
        129,
        22,
        130,
        82,
        133,
        129,
        22,
        96,
        32,
        131,
        1,
        82,
        132,
        22,
        96,
        64,
        130,
        1,
        82,
        96,
        96,
        129,
        1,
        131,
        144,
        82,
        96,
        160,
        96,
        128,
        130,
        1,
        129,
        144,
        82,
        96,
        0,
        144,
        97,
        27,
        147,
        144,
        131,
        1,
        132,
        97,
        31,
        245,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        32,
        110,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        81,
        145,
        144,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        129,
        96,
        32,
        130,
        1,
        82,
        129,
        131,
        96,
        64,
        131,
        1,
        55,
        96,
        0,
        129,
        131,
        1,
        96,
        64,
        144,
        129,
        1,
        145,
        144,
        145,
        82,
        96,
        31,
        144,
        146,
        1,
        96,
        31,
        25,
        22,
        1,
        1,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        53,
        96,
        30,
        25,
        132,
        54,
        3,
        1,
        129,
        18,
        97,
        32,
        187,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        1,
        128,
        53,
        145,
        80,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        21,
        97,
        32,
        214,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        1,
        145,
        80,
        54,
        129,
        144,
        3,
        130,
        19,
        21,
        97,
        32,
        235,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        0,
        96,
        160,
        134,
        136,
        3,
        18,
        21,
        97,
        33,
        10,
        87,
        96,
        0,
        128,
        253,
        91,
        133,
        53,
        148,
        80,
        96,
        32,
        134,
        1,
        53,
        97,
        33,
        28,
        129,
        97,
        28,
        60,
        86,
        91,
        147,
        80,
        96,
        64,
        134,
        1,
        53,
        146,
        80,
        96,
        96,
        134,
        1,
        53,
        97,
        33,
        51,
        129,
        97,
        28,
        60,
        86,
        91,
        148,
        151,
        147,
        150,
        80,
        145,
        148,
        96,
        128,
        1,
        53,
        146,
        145,
        80,
        80,
        86,
        91,
        129,
        129,
        3,
        129,
        129,
        17,
        21,
        97,
        19,
        236,
        87,
        97,
        19,
        236,
        97,
        31,
        111,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        33,
        105,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        33,
        116,
        129,
        97,
        28,
        60,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        33,
        141,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        97,
        33,
        116,
        129,
        97,
        30,
        241,
        86,
        91,
        96,
        0,
        96,
        1,
        130,
        1,
        97,
        33,
        170,
        87,
        97,
        33,
        170,
        97,
        31,
        111,
        86,
        91,
        80,
        96,
        1,
        1,
        144,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        33,
        195,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        81,
        97,
        33,
        116,
        129,
        97,
        30,
        241,
        86,
        91,
        96,
        0,
        130,
        81,
        97,
        33,
        224,
        129,
        132,
        96,
        32,
        135,
        1,
        97,
        31,
        209,
        86,
        91,
        145,
        144,
        145,
        1,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        19,
        233,
        96,
        32,
        131,
        1,
        132,
        97,
        31,
        245,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        116,
        77,
        124,
        114,
        147,
        151,
        212,
        249,
        98,
        220,
        53,
        54,
        145,
        69,
        195,
        123,
        228,
        220,
        241,
        69,
        177,
        139,
        203,
        40,
        142,
        255,
        187,
        237,
        209,
        17,
        183,
        25,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static BOOK_BYTECODE: ::ethers::contract::Lazy<::ethers::core::types::Bytes> = ethers::contract::Lazy::new(||
        {__BYTECODE.to_vec().into()}
    );
    pub struct Book<M>(::ethers::contract::Contract<M>);
    impl<M> Clone for Book<M> {
        fn clone(&self) -> Self {
            Book(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for Book<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for Book<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(Book)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Book<M> {
        /// Creates a new contract instance with the specified `ethers`
        /// client at the given `Address`. The contract derefs to a `ethers::Contract`
        /// object
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    BOOK_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// 1. If there are no constructor arguments, you should pass `()` as the argument.
        /// 1. The default poll duration is 7 seconds.
        /// 1. The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter,"../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                BOOK_ABI.clone(),
                BOOK_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `cancelTrade` (0xaa311ab4) function
        pub fn cancel_trade(
            &self,
            token_in: ::ethers::core::types::Address,
            token_out: ::ethers::core::types::Address,
            amount_in: ::ethers::core::types::U256,
            min_amount_out: ::ethers::core::types::U256,
            recipient: ::ethers::core::types::Address,
            trade_index: ::ethers::core::types::U256,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [170, 49, 26, 180],
                    (
                        token_in,
                        token_out,
                        amount_in,
                        min_amount_out,
                        recipient,
                        trade_index,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `disputeBondPct` (0x391fe4e2) function
        pub fn dispute_bond_pct(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([57, 31, 228, 226], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `disputeTrade` (0x09796dff) function
        pub fn dispute_trade(
            &self,
            token_in: ::ethers::core::types::Address,
            token_out: ::ethers::core::types::Address,
            amount_in: ::ethers::core::types::U256,
            min_amount_out: ::ethers::core::types::U256,
            recipient: ::ethers::core::types::Address,
            trade_index: ::ethers::core::types::U256,
            trader: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [9, 121, 109, 255],
                    (
                        token_in,
                        token_out,
                        amount_in,
                        min_amount_out,
                        recipient,
                        trade_index,
                        trader,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `feePct` (0xa02cf937) function
        pub fn fee_pct(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([160, 44, 249, 55], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `fillTrade` (0x6b16e8e6) function
        pub fn fill_trade(
            &self,
            token_in: ::ethers::core::types::Address,
            token_out: ::ethers::core::types::Address,
            amount_in: ::ethers::core::types::U256,
            min_amount_out: ::ethers::core::types::U256,
            recipient: ::ethers::core::types::Address,
            trade_index: ::ethers::core::types::U256,
            trader: ::ethers::core::types::Address,
            amount_to_send: ::ethers::core::types::U256,
            data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [107, 22, 232, 230],
                    (
                        token_in,
                        token_out,
                        amount_in,
                        min_amount_out,
                        recipient,
                        trade_index,
                        trader,
                        amount_to_send,
                        data,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `numberOfTrades` (0xcd805d5e) function
        pub fn number_of_trades(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([205, 128, 93, 94], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `onPriceSettled` (0x734d1627) function
        pub fn on_price_settled(
            &self,
            id: [u8; 32],
            request: Request,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([115, 77, 22, 39], (id, request))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `oracle` (0x7dc0d1d0) function
        pub fn oracle(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([125, 192, 209, 208], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `registry` (0x7b103999) function
        pub fn registry(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([123, 16, 57, 153], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `relayerRefundPct` (0x53906a59) function
        pub fn relayer_refund_pct(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([83, 144, 106, 89], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `requestTrade` (0xab6552e5) function
        pub fn request_trade(
            &self,
            token_in: ::ethers::core::types::Address,
            token_out: ::ethers::core::types::Address,
            amount_in: ::ethers::core::types::U256,
            min_amount_out: ::ethers::core::types::U256,
            recipient: ::ethers::core::types::Address,
            unwrap_output: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [171, 101, 82, 229],
                    (
                        token_in,
                        token_out,
                        amount_in,
                        min_amount_out,
                        recipient,
                        unwrap_output,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `safeBlockThreshold` (0x0ff0c00e) function
        pub fn safe_block_threshold(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([15, 240, 192, 14], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `settleTrade` (0xe66a34ee) function
        pub fn settle_trade(
            &self,
            token_in: ::ethers::core::types::Address,
            token_out: ::ethers::core::types::Address,
            amount_in: ::ethers::core::types::U256,
            min_amount_out: ::ethers::core::types::U256,
            recipient: ::ethers::core::types::Address,
            trade_index: ::ethers::core::types::U256,
            trader: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash(
                    [230, 106, 52, 238],
                    (
                        token_in,
                        token_out,
                        amount_in,
                        min_amount_out,
                        recipient,
                        trade_index,
                        trader,
                    ),
                )
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `tradeRebatePct` (0xc16402bb) function
        pub fn trade_rebate_pct(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([193, 100, 2, 187], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `tradesData` (0x75ef5c99) function
        pub fn trades_data(
            &self,
            p0: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (
                ::ethers::core::types::U256,
                ::ethers::core::types::Address,
                u8,
                bool,
                bool,
                ::ethers::core::types::U256,
            ),
        > {
            self.0
                .method_hash([117, 239, 92, 153], p0)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `FeePctSet` event
        pub fn fee_pct_set_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, FeePctSetFilter> {
            self.0.event()
        }
        ///Gets the contract's `ParamsCombinationSet` event
        pub fn params_combination_set_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, ParamsCombinationSetFilter> {
            self.0.event()
        }
        ///Gets the contract's `SafeBlockThresholdSet` event
        pub fn safe_block_threshold_set_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, SafeBlockThresholdSetFilter> {
            self.0.event()
        }
        ///Gets the contract's `TradeCancelled` event
        pub fn trade_cancelled_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, TradeCancelledFilter> {
            self.0.event()
        }
        ///Gets the contract's `TradeDisputeSettled` event
        pub fn trade_dispute_settled_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, TradeDisputeSettledFilter> {
            self.0.event()
        }
        ///Gets the contract's `TradeDisputed` event
        pub fn trade_disputed_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, TradeDisputedFilter> {
            self.0.event()
        }
        ///Gets the contract's `TradeFilled` event
        pub fn trade_filled_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, TradeFilledFilter> {
            self.0.event()
        }
        ///Gets the contract's `TradeRequested` event
        pub fn trade_requested_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, TradeRequestedFilter> {
            self.0.event()
        }
        ///Gets the contract's `TradeSettled` event
        pub fn trade_settled_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<M, TradeSettledFilter> {
            self.0.event()
        }
        /// Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract
        pub fn events(&self) -> ::ethers::contract::builders::Event<M, BookEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for Book<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `Book__AmountOutTooLow` with signature `Book__AmountOutTooLow()` and selector `0x91719e78`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(name = "Book__AmountOutTooLow", abi = "Book__AmountOutTooLow()")]
    pub struct Book__AmountOutTooLow;
    ///Custom Error type `Book__DisputePeriodNotOver` with signature `Book__DisputePeriodNotOver(uint256)` and selector `0x7be8522f`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(
        name = "Book__DisputePeriodNotOver",
        abi = "Book__DisputePeriodNotOver(uint256)"
    )]
    pub struct Book__DisputePeriodNotOver {
        pub blocks_left: ::ethers::core::types::U256,
    }
    ///Custom Error type `Book__FeePctTooHigh` with signature `Book__FeePctTooHigh()` and selector `0xb7688801`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(name = "Book__FeePctTooHigh", abi = "Book__FeePctTooHigh()")]
    pub struct Book__FeePctTooHigh;
    ///Custom Error type `Book__InvalidParamsCombination` with signature `Book__InvalidParamsCombination()` and selector `0x9327bc87`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(
        name = "Book__InvalidParamsCombination",
        abi = "Book__InvalidParamsCombination()"
    )]
    pub struct Book__InvalidParamsCombination;
    ///Custom Error type `Book__InvalidToken` with signature `Book__InvalidToken(address)` and selector `0xf1579ece`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(name = "Book__InvalidToken", abi = "Book__InvalidToken(address)")]
    pub struct Book__InvalidToken {
        pub token: ::ethers::core::types::Address,
    }
    ///Custom Error type `Book__InvalidValue` with signature `Book__InvalidValue()` and selector `0xeabd11c8`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(name = "Book__InvalidValue", abi = "Book__InvalidValue()")]
    pub struct Book__InvalidValue;
    ///Custom Error type `Book__MaliciousCaller` with signature `Book__MaliciousCaller(address)` and selector `0x68f61866`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(name = "Book__MaliciousCaller", abi = "Book__MaliciousCaller(address)")]
    pub struct Book__MaliciousCaller {
        pub caller: ::ethers::core::types::Address,
    }
    ///Custom Error type `Book__NotWeth` with signature `Book__NotWeth()` and selector `0x98a5b0bf`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(name = "Book__NotWeth", abi = "Book__NotWeth()")]
    pub struct Book__NotWeth;
    ///Custom Error type `Book__SameToken` with signature `Book__SameToken()` and selector `0x6f8f06d3`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(name = "Book__SameToken", abi = "Book__SameToken()")]
    pub struct Book__SameToken;
    ///Custom Error type `Book__SentToBlackHole` with signature `Book__SentToBlackHole()` and selector `0x97d6f7dc`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(name = "Book__SentToBlackHole", abi = "Book__SentToBlackHole()")]
    pub struct Book__SentToBlackHole;
    ///Custom Error type `Book__TradeNotCancelable` with signature `Book__TradeNotCancelable(bytes32)` and selector `0x1a55caa4`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(
        name = "Book__TradeNotCancelable",
        abi = "Book__TradeNotCancelable(bytes32)"
    )]
    pub struct Book__TradeNotCancelable {
        pub trade_id: [u8; 32],
    }
    ///Custom Error type `Book__TradeNotDisputable` with signature `Book__TradeNotDisputable()` and selector `0xc7022434`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(name = "Book__TradeNotDisputable", abi = "Book__TradeNotDisputable()")]
    pub struct Book__TradeNotDisputable;
    ///Custom Error type `Book__TradeNotFilled` with signature `Book__TradeNotFilled(bytes32)` and selector `0xf70cbe30`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(name = "Book__TradeNotFilled", abi = "Book__TradeNotFilled(bytes32)")]
    pub struct Book__TradeNotFilled {
        pub trade_id: [u8; 32],
    }
    ///Custom Error type `Book__TradeNotInFillableState` with signature `Book__TradeNotInFillableState(bytes32)` and selector `0x6faddd16`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(
        name = "Book__TradeNotInFillableState",
        abi = "Book__TradeNotInFillableState(bytes32)"
    )]
    pub struct Book__TradeNotInFillableState {
        pub trade_id: [u8; 32],
    }
    ///Custom Error type `Book__ZeroAmount` with signature `Book__ZeroAmount()` and selector `0x17713e0c`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(name = "Book__ZeroAmount", abi = "Book__ZeroAmount()")]
    pub struct Book__ZeroAmount;
    ///Custom Error type `Book__ZeroRegistry` with signature `Book__ZeroRegistry()` and selector `0xdacc6959`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(name = "Book__ZeroRegistry", abi = "Book__ZeroRegistry()")]
    pub struct Book__ZeroRegistry;
    ///Custom Error type `Book__ZeroSafeBlockThreshold` with signature `Book__ZeroSafeBlockThreshold()` and selector `0xa95604b1`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
    )]
    #[etherror(
        name = "Book__ZeroSafeBlockThreshold",
        abi = "Book__ZeroSafeBlockThreshold()"
    )]
    pub struct Book__ZeroSafeBlockThreshold;
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum BookErrors {
        Book__AmountOutTooLow(Book__AmountOutTooLow),
        Book__DisputePeriodNotOver(Book__DisputePeriodNotOver),
        Book__FeePctTooHigh(Book__FeePctTooHigh),
        Book__InvalidParamsCombination(Book__InvalidParamsCombination),
        Book__InvalidToken(Book__InvalidToken),
        Book__InvalidValue(Book__InvalidValue),
        Book__MaliciousCaller(Book__MaliciousCaller),
        Book__NotWeth(Book__NotWeth),
        Book__SameToken(Book__SameToken),
        Book__SentToBlackHole(Book__SentToBlackHole),
        Book__TradeNotCancelable(Book__TradeNotCancelable),
        Book__TradeNotDisputable(Book__TradeNotDisputable),
        Book__TradeNotFilled(Book__TradeNotFilled),
        Book__TradeNotInFillableState(Book__TradeNotInFillableState),
        Book__ZeroAmount(Book__ZeroAmount),
        Book__ZeroRegistry(Book__ZeroRegistry),
        Book__ZeroSafeBlockThreshold(Book__ZeroSafeBlockThreshold),
    }
    impl ::ethers::core::abi::AbiDecode for BookErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded)
                = <Book__AmountOutTooLow as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__AmountOutTooLow(decoded));
            }
            if let Ok(decoded)
                = <Book__DisputePeriodNotOver as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__DisputePeriodNotOver(decoded));
            }
            if let Ok(decoded)
                = <Book__FeePctTooHigh as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__FeePctTooHigh(decoded));
            }
            if let Ok(decoded)
                = <Book__InvalidParamsCombination as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__InvalidParamsCombination(decoded));
            }
            if let Ok(decoded)
                = <Book__InvalidToken as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__InvalidToken(decoded));
            }
            if let Ok(decoded)
                = <Book__InvalidValue as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__InvalidValue(decoded));
            }
            if let Ok(decoded)
                = <Book__MaliciousCaller as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__MaliciousCaller(decoded));
            }
            if let Ok(decoded)
                = <Book__NotWeth as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__NotWeth(decoded));
            }
            if let Ok(decoded)
                = <Book__SameToken as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__SameToken(decoded));
            }
            if let Ok(decoded)
                = <Book__SentToBlackHole as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__SentToBlackHole(decoded));
            }
            if let Ok(decoded)
                = <Book__TradeNotCancelable as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__TradeNotCancelable(decoded));
            }
            if let Ok(decoded)
                = <Book__TradeNotDisputable as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__TradeNotDisputable(decoded));
            }
            if let Ok(decoded)
                = <Book__TradeNotFilled as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__TradeNotFilled(decoded));
            }
            if let Ok(decoded)
                = <Book__TradeNotInFillableState as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__TradeNotInFillableState(decoded));
            }
            if let Ok(decoded)
                = <Book__ZeroAmount as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__ZeroAmount(decoded));
            }
            if let Ok(decoded)
                = <Book__ZeroRegistry as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__ZeroRegistry(decoded));
            }
            if let Ok(decoded)
                = <Book__ZeroSafeBlockThreshold as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookErrors::Book__ZeroSafeBlockThreshold(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for BookErrors {
        fn encode(self) -> Vec<u8> {
            match self {
                BookErrors::Book__AmountOutTooLow(element) => element.encode(),
                BookErrors::Book__DisputePeriodNotOver(element) => element.encode(),
                BookErrors::Book__FeePctTooHigh(element) => element.encode(),
                BookErrors::Book__InvalidParamsCombination(element) => element.encode(),
                BookErrors::Book__InvalidToken(element) => element.encode(),
                BookErrors::Book__InvalidValue(element) => element.encode(),
                BookErrors::Book__MaliciousCaller(element) => element.encode(),
                BookErrors::Book__NotWeth(element) => element.encode(),
                BookErrors::Book__SameToken(element) => element.encode(),
                BookErrors::Book__SentToBlackHole(element) => element.encode(),
                BookErrors::Book__TradeNotCancelable(element) => element.encode(),
                BookErrors::Book__TradeNotDisputable(element) => element.encode(),
                BookErrors::Book__TradeNotFilled(element) => element.encode(),
                BookErrors::Book__TradeNotInFillableState(element) => element.encode(),
                BookErrors::Book__ZeroAmount(element) => element.encode(),
                BookErrors::Book__ZeroRegistry(element) => element.encode(),
                BookErrors::Book__ZeroSafeBlockThreshold(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for BookErrors {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                BookErrors::Book__AmountOutTooLow(element) => element.fmt(f),
                BookErrors::Book__DisputePeriodNotOver(element) => element.fmt(f),
                BookErrors::Book__FeePctTooHigh(element) => element.fmt(f),
                BookErrors::Book__InvalidParamsCombination(element) => element.fmt(f),
                BookErrors::Book__InvalidToken(element) => element.fmt(f),
                BookErrors::Book__InvalidValue(element) => element.fmt(f),
                BookErrors::Book__MaliciousCaller(element) => element.fmt(f),
                BookErrors::Book__NotWeth(element) => element.fmt(f),
                BookErrors::Book__SameToken(element) => element.fmt(f),
                BookErrors::Book__SentToBlackHole(element) => element.fmt(f),
                BookErrors::Book__TradeNotCancelable(element) => element.fmt(f),
                BookErrors::Book__TradeNotDisputable(element) => element.fmt(f),
                BookErrors::Book__TradeNotFilled(element) => element.fmt(f),
                BookErrors::Book__TradeNotInFillableState(element) => element.fmt(f),
                BookErrors::Book__ZeroAmount(element) => element.fmt(f),
                BookErrors::Book__ZeroRegistry(element) => element.fmt(f),
                BookErrors::Book__ZeroSafeBlockThreshold(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<Book__AmountOutTooLow> for BookErrors {
        fn from(var: Book__AmountOutTooLow) -> Self {
            BookErrors::Book__AmountOutTooLow(var)
        }
    }
    impl ::std::convert::From<Book__DisputePeriodNotOver> for BookErrors {
        fn from(var: Book__DisputePeriodNotOver) -> Self {
            BookErrors::Book__DisputePeriodNotOver(var)
        }
    }
    impl ::std::convert::From<Book__FeePctTooHigh> for BookErrors {
        fn from(var: Book__FeePctTooHigh) -> Self {
            BookErrors::Book__FeePctTooHigh(var)
        }
    }
    impl ::std::convert::From<Book__InvalidParamsCombination> for BookErrors {
        fn from(var: Book__InvalidParamsCombination) -> Self {
            BookErrors::Book__InvalidParamsCombination(var)
        }
    }
    impl ::std::convert::From<Book__InvalidToken> for BookErrors {
        fn from(var: Book__InvalidToken) -> Self {
            BookErrors::Book__InvalidToken(var)
        }
    }
    impl ::std::convert::From<Book__InvalidValue> for BookErrors {
        fn from(var: Book__InvalidValue) -> Self {
            BookErrors::Book__InvalidValue(var)
        }
    }
    impl ::std::convert::From<Book__MaliciousCaller> for BookErrors {
        fn from(var: Book__MaliciousCaller) -> Self {
            BookErrors::Book__MaliciousCaller(var)
        }
    }
    impl ::std::convert::From<Book__NotWeth> for BookErrors {
        fn from(var: Book__NotWeth) -> Self {
            BookErrors::Book__NotWeth(var)
        }
    }
    impl ::std::convert::From<Book__SameToken> for BookErrors {
        fn from(var: Book__SameToken) -> Self {
            BookErrors::Book__SameToken(var)
        }
    }
    impl ::std::convert::From<Book__SentToBlackHole> for BookErrors {
        fn from(var: Book__SentToBlackHole) -> Self {
            BookErrors::Book__SentToBlackHole(var)
        }
    }
    impl ::std::convert::From<Book__TradeNotCancelable> for BookErrors {
        fn from(var: Book__TradeNotCancelable) -> Self {
            BookErrors::Book__TradeNotCancelable(var)
        }
    }
    impl ::std::convert::From<Book__TradeNotDisputable> for BookErrors {
        fn from(var: Book__TradeNotDisputable) -> Self {
            BookErrors::Book__TradeNotDisputable(var)
        }
    }
    impl ::std::convert::From<Book__TradeNotFilled> for BookErrors {
        fn from(var: Book__TradeNotFilled) -> Self {
            BookErrors::Book__TradeNotFilled(var)
        }
    }
    impl ::std::convert::From<Book__TradeNotInFillableState> for BookErrors {
        fn from(var: Book__TradeNotInFillableState) -> Self {
            BookErrors::Book__TradeNotInFillableState(var)
        }
    }
    impl ::std::convert::From<Book__ZeroAmount> for BookErrors {
        fn from(var: Book__ZeroAmount) -> Self {
            BookErrors::Book__ZeroAmount(var)
        }
    }
    impl ::std::convert::From<Book__ZeroRegistry> for BookErrors {
        fn from(var: Book__ZeroRegistry) -> Self {
            BookErrors::Book__ZeroRegistry(var)
        }
    }
    impl ::std::convert::From<Book__ZeroSafeBlockThreshold> for BookErrors {
        fn from(var: Book__ZeroSafeBlockThreshold) -> Self {
            BookErrors::Book__ZeroSafeBlockThreshold(var)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "FeePctSet", abi = "FeePctSet(uint256)")]
    pub struct FeePctSetFilter {
        pub fee_pct: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "ParamsCombinationSet",
        abi = "ParamsCombinationSet(uint256,uint256,uint256)"
    )]
    pub struct ParamsCombinationSetFilter {
        pub dispute_bond_pct: ::ethers::core::types::U256,
        pub trade_rebate_pct: ::ethers::core::types::U256,
        pub relayer_refund_pct: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "SafeBlockThresholdSet", abi = "SafeBlockThresholdSet(uint256)")]
    pub struct SafeBlockThresholdSetFilter {
        pub new_safe_block_threshold: ::ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(name = "TradeCancelled", abi = "TradeCancelled(uint256,bytes32,address)")]
    pub struct TradeCancelledFilter {
        #[ethevent(indexed)]
        pub trade_index: ::ethers::core::types::U256,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        #[ethevent(indexed)]
        pub trader: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "TradeDisputeSettled",
        abi = "TradeDisputeSettled(address,uint256,bytes32,bool,address)"
    )]
    pub struct TradeDisputeSettledFilter {
        pub relayer: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ::ethers::core::types::U256,
        #[ethevent(indexed)]
        pub dispute_id: [u8; 32],
        pub answer: bool,
        #[ethevent(indexed)]
        pub trader: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "TradeDisputed",
        abi = "TradeDisputed(address,uint256,bytes32,uint256,address)"
    )]
    pub struct TradeDisputedFilter {
        pub relayer: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ::ethers::core::types::U256,
        #[ethevent(indexed)]
        pub dispute_id: [u8; 32],
        pub filled_at_block: ::ethers::core::types::U256,
        #[ethevent(indexed)]
        pub trader: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "TradeFilled",
        abi = "TradeFilled(address,uint256,uint256,address)"
    )]
    pub struct TradeFilledFilter {
        #[ethevent(indexed)]
        pub relayer: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ::ethers::core::types::U256,
        pub amount_out: ::ethers::core::types::U256,
        #[ethevent(indexed)]
        pub trader: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "TradeRequested",
        abi = "TradeRequested(address,address,uint256,uint256,address,uint256,address,bool,bool)"
    )]
    pub struct TradeRequestedFilter {
        #[ethevent(indexed)]
        pub token_in: ::ethers::core::types::Address,
        pub token_out: ::ethers::core::types::Address,
        pub amount_in: ::ethers::core::types::U256,
        pub min_amount_out: ::ethers::core::types::U256,
        pub recipient: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ::ethers::core::types::U256,
        #[ethevent(indexed)]
        pub trader: ::ethers::core::types::Address,
        pub unwrap_output: bool,
        pub wrap_input: bool,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethevent(
        name = "TradeSettled",
        abi = "TradeSettled(address,uint256,uint256,address)"
    )]
    pub struct TradeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ::ethers::core::types::U256,
        pub filled_at_block: ::ethers::core::types::U256,
        #[ethevent(indexed)]
        pub trader: ::ethers::core::types::Address,
    }
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum BookEvents {
        FeePctSetFilter(FeePctSetFilter),
        ParamsCombinationSetFilter(ParamsCombinationSetFilter),
        SafeBlockThresholdSetFilter(SafeBlockThresholdSetFilter),
        TradeCancelledFilter(TradeCancelledFilter),
        TradeDisputeSettledFilter(TradeDisputeSettledFilter),
        TradeDisputedFilter(TradeDisputedFilter),
        TradeFilledFilter(TradeFilledFilter),
        TradeRequestedFilter(TradeRequestedFilter),
        TradeSettledFilter(TradeSettledFilter),
    }
    impl ::ethers::contract::EthLogDecode for BookEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = FeePctSetFilter::decode_log(log) {
                return Ok(BookEvents::FeePctSetFilter(decoded));
            }
            if let Ok(decoded) = ParamsCombinationSetFilter::decode_log(log) {
                return Ok(BookEvents::ParamsCombinationSetFilter(decoded));
            }
            if let Ok(decoded) = SafeBlockThresholdSetFilter::decode_log(log) {
                return Ok(BookEvents::SafeBlockThresholdSetFilter(decoded));
            }
            if let Ok(decoded) = TradeCancelledFilter::decode_log(log) {
                return Ok(BookEvents::TradeCancelledFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputeSettledFilter::decode_log(log) {
                return Ok(BookEvents::TradeDisputeSettledFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputedFilter::decode_log(log) {
                return Ok(BookEvents::TradeDisputedFilter(decoded));
            }
            if let Ok(decoded) = TradeFilledFilter::decode_log(log) {
                return Ok(BookEvents::TradeFilledFilter(decoded));
            }
            if let Ok(decoded) = TradeRequestedFilter::decode_log(log) {
                return Ok(BookEvents::TradeRequestedFilter(decoded));
            }
            if let Ok(decoded) = TradeSettledFilter::decode_log(log) {
                return Ok(BookEvents::TradeSettledFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for BookEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                BookEvents::FeePctSetFilter(element) => element.fmt(f),
                BookEvents::ParamsCombinationSetFilter(element) => element.fmt(f),
                BookEvents::SafeBlockThresholdSetFilter(element) => element.fmt(f),
                BookEvents::TradeCancelledFilter(element) => element.fmt(f),
                BookEvents::TradeDisputeSettledFilter(element) => element.fmt(f),
                BookEvents::TradeDisputedFilter(element) => element.fmt(f),
                BookEvents::TradeFilledFilter(element) => element.fmt(f),
                BookEvents::TradeRequestedFilter(element) => element.fmt(f),
                BookEvents::TradeSettledFilter(element) => element.fmt(f),
            }
        }
    }
    ///Container type for all input parameters for the `cancelTrade` function with signature `cancelTrade(address,address,uint256,uint256,address,uint256)` and selector `0xaa311ab4`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "cancelTrade",
        abi = "cancelTrade(address,address,uint256,uint256,address,uint256)"
    )]
    pub struct CancelTradeCall {
        pub token_in: ::ethers::core::types::Address,
        pub token_out: ::ethers::core::types::Address,
        pub amount_in: ::ethers::core::types::U256,
        pub min_amount_out: ::ethers::core::types::U256,
        pub recipient: ::ethers::core::types::Address,
        pub trade_index: ::ethers::core::types::U256,
    }
    ///Container type for all input parameters for the `disputeBondPct` function with signature `disputeBondPct()` and selector `0x391fe4e2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "disputeBondPct", abi = "disputeBondPct()")]
    pub struct DisputeBondPctCall;
    ///Container type for all input parameters for the `disputeTrade` function with signature `disputeTrade(address,address,uint256,uint256,address,uint256,address)` and selector `0x09796dff`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "disputeTrade",
        abi = "disputeTrade(address,address,uint256,uint256,address,uint256,address)"
    )]
    pub struct DisputeTradeCall {
        pub token_in: ::ethers::core::types::Address,
        pub token_out: ::ethers::core::types::Address,
        pub amount_in: ::ethers::core::types::U256,
        pub min_amount_out: ::ethers::core::types::U256,
        pub recipient: ::ethers::core::types::Address,
        pub trade_index: ::ethers::core::types::U256,
        pub trader: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `feePct` function with signature `feePct()` and selector `0xa02cf937`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "feePct", abi = "feePct()")]
    pub struct FeePctCall;
    ///Container type for all input parameters for the `fillTrade` function with signature `fillTrade(address,address,uint256,uint256,address,uint256,address,uint256,bytes)` and selector `0x6b16e8e6`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "fillTrade",
        abi = "fillTrade(address,address,uint256,uint256,address,uint256,address,uint256,bytes)"
    )]
    pub struct FillTradeCall {
        pub token_in: ::ethers::core::types::Address,
        pub token_out: ::ethers::core::types::Address,
        pub amount_in: ::ethers::core::types::U256,
        pub min_amount_out: ::ethers::core::types::U256,
        pub recipient: ::ethers::core::types::Address,
        pub trade_index: ::ethers::core::types::U256,
        pub trader: ::ethers::core::types::Address,
        pub amount_to_send: ::ethers::core::types::U256,
        pub data: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `numberOfTrades` function with signature `numberOfTrades()` and selector `0xcd805d5e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "numberOfTrades", abi = "numberOfTrades()")]
    pub struct NumberOfTradesCall;
    ///Container type for all input parameters for the `onPriceSettled` function with signature `onPriceSettled(bytes32,(address,address,address,address,uint256,uint8,bool,bytes))` and selector `0x734d1627`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "onPriceSettled",
        abi = "onPriceSettled(bytes32,(address,address,address,address,uint256,uint8,bool,bytes))"
    )]
    pub struct OnPriceSettledCall {
        pub id: [u8; 32],
        pub request: Request,
    }
    ///Container type for all input parameters for the `oracle` function with signature `oracle()` and selector `0x7dc0d1d0`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "oracle", abi = "oracle()")]
    pub struct OracleCall;
    ///Container type for all input parameters for the `registry` function with signature `registry()` and selector `0x7b103999`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "registry", abi = "registry()")]
    pub struct RegistryCall;
    ///Container type for all input parameters for the `relayerRefundPct` function with signature `relayerRefundPct()` and selector `0x53906a59`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "relayerRefundPct", abi = "relayerRefundPct()")]
    pub struct RelayerRefundPctCall;
    ///Container type for all input parameters for the `requestTrade` function with signature `requestTrade(address,address,uint256,uint256,address,bool)` and selector `0xab6552e5`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "requestTrade",
        abi = "requestTrade(address,address,uint256,uint256,address,bool)"
    )]
    pub struct RequestTradeCall {
        pub token_in: ::ethers::core::types::Address,
        pub token_out: ::ethers::core::types::Address,
        pub amount_in: ::ethers::core::types::U256,
        pub min_amount_out: ::ethers::core::types::U256,
        pub recipient: ::ethers::core::types::Address,
        pub unwrap_output: bool,
    }
    ///Container type for all input parameters for the `safeBlockThreshold` function with signature `safeBlockThreshold()` and selector `0x0ff0c00e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "safeBlockThreshold", abi = "safeBlockThreshold()")]
    pub struct SafeBlockThresholdCall;
    ///Container type for all input parameters for the `settleTrade` function with signature `settleTrade(address,address,uint256,uint256,address,uint256,address)` and selector `0xe66a34ee`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(
        name = "settleTrade",
        abi = "settleTrade(address,address,uint256,uint256,address,uint256,address)"
    )]
    pub struct SettleTradeCall {
        pub token_in: ::ethers::core::types::Address,
        pub token_out: ::ethers::core::types::Address,
        pub amount_in: ::ethers::core::types::U256,
        pub min_amount_out: ::ethers::core::types::U256,
        pub recipient: ::ethers::core::types::Address,
        pub trade_index: ::ethers::core::types::U256,
        pub trader: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `tradeRebatePct` function with signature `tradeRebatePct()` and selector `0xc16402bb`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "tradeRebatePct", abi = "tradeRebatePct()")]
    pub struct TradeRebatePctCall;
    ///Container type for all input parameters for the `tradesData` function with signature `tradesData(bytes32)` and selector `0x75ef5c99`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
    )]
    #[derive(Default)]
    #[ethcall(name = "tradesData", abi = "tradesData(bytes32)")]
    pub struct TradesDataCall(pub [u8; 32]);
    #[derive(Debug, Clone, PartialEq, Eq, ::ethers::contract::EthAbiType)]
    pub enum BookCalls {
        CancelTrade(CancelTradeCall),
        DisputeBondPct(DisputeBondPctCall),
        DisputeTrade(DisputeTradeCall),
        FeePct(FeePctCall),
        FillTrade(FillTradeCall),
        NumberOfTrades(NumberOfTradesCall),
        OnPriceSettled(OnPriceSettledCall),
        Oracle(OracleCall),
        Registry(RegistryCall),
        RelayerRefundPct(RelayerRefundPctCall),
        RequestTrade(RequestTradeCall),
        SafeBlockThreshold(SafeBlockThresholdCall),
        SettleTrade(SettleTradeCall),
        TradeRebatePct(TradeRebatePctCall),
        TradesData(TradesDataCall),
    }
    impl ::ethers::core::abi::AbiDecode for BookCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ::ethers::core::abi::AbiError> {
            if let Ok(decoded)
                = <CancelTradeCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookCalls::CancelTrade(decoded));
            }
            if let Ok(decoded)
                = <DisputeBondPctCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookCalls::DisputeBondPct(decoded));
            }
            if let Ok(decoded)
                = <DisputeTradeCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookCalls::DisputeTrade(decoded));
            }
            if let Ok(decoded)
                = <FeePctCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(BookCalls::FeePct(decoded));
            }
            if let Ok(decoded)
                = <FillTradeCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookCalls::FillTrade(decoded));
            }
            if let Ok(decoded)
                = <NumberOfTradesCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookCalls::NumberOfTrades(decoded));
            }
            if let Ok(decoded)
                = <OnPriceSettledCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookCalls::OnPriceSettled(decoded));
            }
            if let Ok(decoded)
                = <OracleCall as ::ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(BookCalls::Oracle(decoded));
            }
            if let Ok(decoded)
                = <RegistryCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookCalls::Registry(decoded));
            }
            if let Ok(decoded)
                = <RelayerRefundPctCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookCalls::RelayerRefundPct(decoded));
            }
            if let Ok(decoded)
                = <RequestTradeCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookCalls::RequestTrade(decoded));
            }
            if let Ok(decoded)
                = <SafeBlockThresholdCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookCalls::SafeBlockThreshold(decoded));
            }
            if let Ok(decoded)
                = <SettleTradeCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookCalls::SettleTrade(decoded));
            }
            if let Ok(decoded)
                = <TradeRebatePctCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookCalls::TradeRebatePct(decoded));
            }
            if let Ok(decoded)
                = <TradesDataCall as ::ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                ) {
                return Ok(BookCalls::TradesData(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for BookCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                BookCalls::CancelTrade(element) => element.encode(),
                BookCalls::DisputeBondPct(element) => element.encode(),
                BookCalls::DisputeTrade(element) => element.encode(),
                BookCalls::FeePct(element) => element.encode(),
                BookCalls::FillTrade(element) => element.encode(),
                BookCalls::NumberOfTrades(element) => element.encode(),
                BookCalls::OnPriceSettled(element) => element.encode(),
                BookCalls::Oracle(element) => element.encode(),
                BookCalls::Registry(element) => element.encode(),
                BookCalls::RelayerRefundPct(element) => element.encode(),
                BookCalls::RequestTrade(element) => element.encode(),
                BookCalls::SafeBlockThreshold(element) => element.encode(),
                BookCalls::SettleTrade(element) => element.encode(),
                BookCalls::TradeRebatePct(element) => element.encode(),
                BookCalls::TradesData(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for BookCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                BookCalls::CancelTrade(element) => element.fmt(f),
                BookCalls::DisputeBondPct(element) => element.fmt(f),
                BookCalls::DisputeTrade(element) => element.fmt(f),
                BookCalls::FeePct(element) => element.fmt(f),
                BookCalls::FillTrade(element) => element.fmt(f),
                BookCalls::NumberOfTrades(element) => element.fmt(f),
                BookCalls::OnPriceSettled(element) => element.fmt(f),
                BookCalls::Oracle(element) => element.fmt(f),
                BookCalls::Registry(element) => element.fmt(f),
                BookCalls::RelayerRefundPct(element) => element.fmt(f),
                BookCalls::RequestTrade(element) => element.fmt(f),
                BookCalls::SafeBlockThreshold(element) => element.fmt(f),
                BookCalls::SettleTrade(element) => element.fmt(f),
                BookCalls::TradeRebatePct(element) => element.fmt(f),
                BookCalls::TradesData(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<CancelTradeCall> for BookCalls {
        fn from(var: CancelTradeCall) -> Self {
            BookCalls::CancelTrade(var)
        }
    }
    impl ::std::convert::From<DisputeBondPctCall> for BookCalls {
        fn from(var: DisputeBondPctCall) -> Self {
            BookCalls::DisputeBondPct(var)
        }
    }
    impl ::std::convert::From<DisputeTradeCall> for BookCalls {
        fn from(var: DisputeTradeCall) -> Self {
            BookCalls::DisputeTrade(var)
        }
    }
    impl ::std::convert::From<FeePctCall> for BookCalls {
        fn from(var: FeePctCall) -> Self {
            BookCalls::FeePct(var)
        }
    }
    impl ::std::convert::From<FillTradeCall> for BookCalls {
        fn from(var: FillTradeCall) -> Self {
            BookCalls::FillTrade(var)
        }
    }
    impl ::std::convert::From<NumberOfTradesCall> for BookCalls {
        fn from(var: NumberOfTradesCall) -> Self {
            BookCalls::NumberOfTrades(var)
        }
    }
    impl ::std::convert::From<OnPriceSettledCall> for BookCalls {
        fn from(var: OnPriceSettledCall) -> Self {
            BookCalls::OnPriceSettled(var)
        }
    }
    impl ::std::convert::From<OracleCall> for BookCalls {
        fn from(var: OracleCall) -> Self {
            BookCalls::Oracle(var)
        }
    }
    impl ::std::convert::From<RegistryCall> for BookCalls {
        fn from(var: RegistryCall) -> Self {
            BookCalls::Registry(var)
        }
    }
    impl ::std::convert::From<RelayerRefundPctCall> for BookCalls {
        fn from(var: RelayerRefundPctCall) -> Self {
            BookCalls::RelayerRefundPct(var)
        }
    }
    impl ::std::convert::From<RequestTradeCall> for BookCalls {
        fn from(var: RequestTradeCall) -> Self {
            BookCalls::RequestTrade(var)
        }
    }
    impl ::std::convert::From<SafeBlockThresholdCall> for BookCalls {
        fn from(var: SafeBlockThresholdCall) -> Self {
            BookCalls::SafeBlockThreshold(var)
        }
    }
    impl ::std::convert::From<SettleTradeCall> for BookCalls {
        fn from(var: SettleTradeCall) -> Self {
            BookCalls::SettleTrade(var)
        }
    }
    impl ::std::convert::From<TradeRebatePctCall> for BookCalls {
        fn from(var: TradeRebatePctCall) -> Self {
            BookCalls::TradeRebatePct(var)
        }
    }
    impl ::std::convert::From<TradesDataCall> for BookCalls {
        fn from(var: TradesDataCall) -> Self {
            BookCalls::TradesData(var)
        }
    }
    ///Container type for all return fields from the `disputeBondPct` function with signature `disputeBondPct()` and selector `0x391fe4e2`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct DisputeBondPctReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `feePct` function with signature `feePct()` and selector `0xa02cf937`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct FeePctReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `numberOfTrades` function with signature `numberOfTrades()` and selector `0xcd805d5e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct NumberOfTradesReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `oracle` function with signature `oracle()` and selector `0x7dc0d1d0`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct OracleReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `registry` function with signature `registry()` and selector `0x7b103999`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct RegistryReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `relayerRefundPct` function with signature `relayerRefundPct()` and selector `0x53906a59`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct RelayerRefundPctReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `safeBlockThreshold` function with signature `safeBlockThreshold()` and selector `0x0ff0c00e`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct SafeBlockThresholdReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `tradeRebatePct` function with signature `tradeRebatePct()` and selector `0xc16402bb`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct TradeRebatePctReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `tradesData` function with signature `tradesData(bytes32)` and selector `0x75ef5c99`
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    #[derive(Default)]
    pub struct TradesDataReturn {
        pub filled_at_block: ::ethers::core::types::U256,
        pub filled_by: ::ethers::core::types::Address,
        pub status: u8,
        pub unwrap_output: bool,
        pub wrap_input: bool,
        pub amount_paid: ::ethers::core::types::U256,
    }
    ///`Request(address,address,address,address,uint256,uint8,bool,bytes)`
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
    )]
    pub struct Request {
        pub requester: ::ethers::core::types::Address,
        pub proposer: ::ethers::core::types::Address,
        pub disputer: ::ethers::core::types::Address,
        pub currency: ::ethers::core::types::Address,
        pub bond: ::ethers::core::types::U256,
        pub state: u8,
        pub answer: bool,
        pub data: ::ethers::core::types::Bytes,
    }
}
