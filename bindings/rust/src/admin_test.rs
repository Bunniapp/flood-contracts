pub use admintest_mod::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod admintest_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "AdminTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static ADMINTEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newMaxFeePct\",\"type\":\"uint128\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MaxFeePctChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSafeBlockThreshold\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"SafeBlockThresholdChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeDisputed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeFilled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeRequested\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"newFeePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"UpdatedFeeForTrade\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"WARNING_Deprecated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"adjust\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rewind\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"skip\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newFee\",\"type\":\"uint128\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testMaxFeePctChange\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testThresholdChange\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testTokenWhitelist\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tip\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static ADMINTEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060408190526000805460ff191660011790556001625e79b760e01b031990527f81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a608452737109709ecfa91a80626ff3989d68f67f5b1dd12d63ffa1864960a46020604051808303816000875af115801562000080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a691906200059c565b600880546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b66004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156200013b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016191906200059c565b600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f9791f723bf26b668c8cac0664b66d058cdb2a424cfb08c05dd9da570be0eff6f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015620001f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021c91906200059c565b600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002bb73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506006604051602001620002a59190620005c7565b60408051601f19818403018152919052620003c5565b600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200038c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506012604051602001620002a591906060808252600d908201526c2bb930b83832b21022ba3432b960991b608082015260a060208201819052600490820152630ae8aa8960e31b60c082015260ff91909116604082015260e00190565b600c80546001600160a01b0319166001600160a01b03929092169190911790556064600f55348015620003be57600080fd5b50620007a4565b60006001600160a01b0384163b8015620003e3578491505062000461565b6000620003f1858562000468565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000432573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200045c9190810190620006e7565b509150505b9392505050565b604051638d1cc92560e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc92590620004a69087906004016200073c565b6000604051808303816000875af1158015620004c6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004f09190810190620006e7565b836040516020016200050492919062000771565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620005955760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b606482015260840160405180910390fd5b5092915050565b600060208284031215620005af57600080fd5b81516001600160a01b03811681146200046157600080fd5b606081526000620005ec6060830160048152635553444360e01b602082015260400190565b8281036020840152620006108160048152635553444360e01b602082015260400190565b91505060ff8316604083015292915050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620006555781810151838201526020016200063b565b8381111562000665576000848401525b50505050565b60006001600160401b038084111562000688576200068862000622565b604051601f8501601f19908116603f01168101908282118183101715620006b357620006b362000622565b81604052809350858152868686011115620006cd57600080fd5b620006dd86602083018762000638565b5050509392505050565b600060208284031215620006fa57600080fd5b81516001600160401b038111156200071157600080fd5b8201601f810184136200072357600080fd5b62000734848251602084016200066b565b949350505050565b60208152600082518060208401526200075d81604085016020870162000638565b601f01601f19169190910160400192915050565b600083516200078581846020880162000638565b8351908301906200079b81836020880162000638565b01949350505050565b616c3480620007b46000396000f3fe60806040523480156200001157600080fd5b5060043610620001755760003560e01c80636bce989b11620000d3578063ba414fa61162000086578063ba414fa61462000339578063c88a5e6d1462000354578063d06d8229146200036b578063d82555f11462000382578063e9a79a7b1462000399578063fa7626d414620003b057600080fd5b80636bce989b14620002af5780636f59707514620002c657806397754ae914620002dd5780639a8325a014620002f4578063af9bbe5f146200030b578063b9c071b4146200032257600080fd5b80632d6c17a3116200012c5780632d6c17a3146200021657806335605851146200022d5780633a76846314620002445780633bf82db1146200025b5780635a6c1eed14620002725780635b657cca146200029857600080fd5b80630a9254e4146200017a578063108554f214620001865780631e388b93146200019d578063233240ee14620001b457806329a9e30014620001cb57806329ce9dde14620001e2575b600080fd5b62000184620003be565b005b620001846200019736600462003cb7565b620004be565b62000184620001ae36600462003cf3565b62000597565b62000184620001c536600462003d2f565b6200092d565b62000184620001dc36600462003d54565b62000a09565b620001f9620001f336600462003e67565b62000abb565b6040516001600160a01b0390911681526020015b60405180910390f35b620001846200022736600462003ee7565b62000beb565b620001846200023e36600462003ee7565b62000c2b565b620001f960008051602062006b9f83398151915281565b620001846200026c36600462003f01565b62000f16565b620002896200028336600462003f42565b62000ff8565b6040519081526020016200020d565b62000184620002a936600462003f6f565b62001131565b62000184620002c036600462003f01565b620014f2565b62000184620002d736600462003d2f565b62001506565b62000184620002ee36600462003f9a565b620015b0565b620001f96200030536600462003ff0565b620017ab565b620001846200031c36600462003f01565b620018ad565b620001846200033336600462003ee7565b6200195b565b620003436200197c565b60405190151581526020016200020d565b620001846200036536600462003cb7565b62001aad565b620001846200037c36600462003d54565b62001ae3565b620001846200039336600462003f01565b62001b95565b62000184620003aa36600462003cb7565b62001c46565b600054620003439060ff1681565b620003c862001cec565b600f54600d546040516001600160a01b0390911690620003e89062003c4e565b9182526001600160a01b03166020820152604001604051809103906000f08015801562000419573d6000803e3d6000fd5b50600e80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b81526004808201939093526024810191909152604481019190915263426f6f6b60e01b606482015260008051602062006b9f8339815191529063c657c718906084015b600060405180830381600087803b158015620004a357600080fd5b505af1158015620004b8573d6000803e3d6000fd5b50505050565b60405163c88a5e6d60e01b815260008051602062006b9f8339815191529063c88a5e6d90620004f4908590859060040162004031565b600060405180830381600087803b1580156200050f57600080fd5b505af115801562000524573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b038516600482015260008051602062006b9f83398151915292506306447d5691506024015b600060405180830381600087803b1580156200057a57600080fd5b505af11580156200058f573d6000803e3d6000fd5b505050505050565b600e546000906200061a9062000614908590620005eb90630daf9c2160e41b90620005ce906001906001600160a01b031662002214565b9060038201805463ffffffff191660e09290921c91909117905590565b90600282018054600181018255600091825260209091206001600160a01b039290921691015590565b62002239565b9050620006278162002261565b604080518082018252600c81526b15539055551213d49256915160a21b6020820152905163f28dceb360e01b815260008051602062006b9f8339815191529163f28dceb3916200067b9190600401620040a7565b600060405180830381600087803b1580156200069657600080fd5b505af1158015620006ab573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062006b9f833981519152925063ca669fa79150602401600060405180830381600087803b1580156200070457600080fd5b505af115801562000719573d6000803e3d6000fd5b5050600e54604051630ffb1d8b60e01b81526001600160a01b03878116600483015286151560248301529091169250630ffb1d8b9150604401600060405180830381600087803b1580156200076d57600080fd5b505af115801562000782573d6000803e3d6000fd5b5050600e546040516381bad6f360e01b815260008051602062006b9f83398151915293506381bad6f39250620007cf91600191600091829184916001600160a01b031690600401620040bc565b600060405180830381600087803b158015620007ea57600080fd5b505af1158015620007ff573d6000803e3d6000fd5b50505050826001600160a01b03167fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d928360405162000841911515815260200190565b60405180910390a2600e54604051630ffb1d8b60e01b81526001600160a01b038581166004830152841515602483015290911690630ffb1d8b90604401600060405180830381600087803b1580156200089957600080fd5b505af1158015620008ae573d6000803e3d6000fd5b5050600e5460009250620008e9915062000614908690620005eb90630daf9c2160e41b90620005ce906001906001600160a01b031662002214565b9050620004b881846040518060400160405280601b81526020017f546f6b656e2073686f756c642062652077686974656c6973746564000000000081525062002270565b60405163c88a5e6d60e01b815260008051602062006b9f8339815191529063c88a5e6d9062000967908490600160801b9060040162004031565b600060405180830381600087803b1580156200098257600080fd5b505af115801562000997573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038416600482015260008051602062006b9f833981519152925063ca669fa791506024015b600060405180830381600087803b158015620009ed57600080fd5b505af115801562000a02573d6000803e3d6000fd5b5050505050565b60405163c88a5e6d60e01b815260008051602062006b9f8339815191529063c88a5e6d9062000a43908590600160801b9060040162004031565b600060405180830381600087803b15801562000a5e57600080fd5b505af115801562000a73573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b0380861660048301528416602482015260008051602062006b9f83398151915292506347e50cce91506044016200055f565b604051638d1cc92560e01b8152600090819060008051602062006b9f83398151915290638d1cc9259062000af4908790600401620040a7565b6000604051808303816000875af115801562000b14573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000b3e9190810190620040ec565b8360405160200162000b529291906200416c565b60405160208183030381529060405290508051602082016000f091506001600160a01b03821662000be45760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b60648201526084015b60405180910390fd5b5092915050565b60008051602062006b9f83398151915263e5d6bf0262000c0c8342620041b5565b6040518263ffffffff1660e01b8152600401620009d291815260200190565b604080518082018252600c81526b15539055551213d49256915160a21b6020820152905163f28dceb360e01b815260008051602062006b9f8339815191529163f28dceb39162000c7f9190600401620040a7565b600060405180830381600087803b15801562000c9a57600080fd5b505af115801562000caf573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062006b9f833981519152925063ca669fa79150602401600060405180830381600087803b15801562000d0857600080fd5b505af115801562000d1d573d6000803e3d6000fd5b5050600e54604051632613f30760e01b8152600481018590526001600160a01b039091169250632613f3079150602401600060405180830381600087803b15801562000d6857600080fd5b505af115801562000d7d573d6000803e3d6000fd5b5050600e546040516381bad6f360e01b815260008051602062006b9f83398151915293506381bad6f3925062000dca91600191600091829184916001600160a01b031690600401620040bc565b600060405180830381600087803b15801562000de557600080fd5b505af115801562000dfa573d6000803e3d6000fd5b505050507fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd76158160405162000e3091815260200190565b60405180910390a1600e54604051632613f30760e01b8152600481018390526001600160a01b0390911690632613f30790602401600060405180830381600087803b15801562000e7f57600080fd5b505af115801562000e94573d6000803e3d6000fd5b5050600e546000925062000ece915062000ec8906307f8600760e11b90620005ce906001906001600160a01b031662002214565b620022b0565b905062000f1281836040518060400160405280601c81526020017f546872656173686f6c642073686f756c64206265207570646174656400000000815250620022d2565b5050565b60405163c88a5e6d60e01b815260008051602062006b9f8339815191529063c88a5e6d9062000f4c908690859060040162004031565b600060405180830381600087803b15801562000f6757600080fd5b505af115801562000f7c573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b0380871660048301528516602482015260008051602062006b9f83398151915292506345b5607891506044015b600060405180830381600087803b15801562000fda57600080fd5b505af115801562000fef573d6000803e3d6000fd5b50505050505050565b600081831115620010725760405162461bcd60e51b815260206004820152603a60248201527f5465737420626f756e642875696e743235362c75696e743235362c75696e743260448201527f3536293a204d6178206973206c657373207468616e206d696e2e000000000000606482015260840162000bdb565b6000620010808484620041b5565b9050806000036200109457839150620010d4565b6000198103620010a757849150620010d4565b620010b281620041cf565b90506000620010c28287620041eb565b9050620010d081866200420e565b9250505b60408051818152600c818301526b109bdd5b990814995cdd5b1d60a21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1509392505050565b604080518082018252600c81526b15539055551213d49256915160a21b6020820152905163f28dceb360e01b815260008051602062006b9f8339815191529163f28dceb391620011859190600401620040a7565b600060405180830381600087803b158015620011a057600080fd5b505af1158015620011b5573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062006b9f833981519152925063ca669fa79150602401600060405180830381600087803b1580156200120e57600080fd5b505af115801562001223573d6000803e3d6000fd5b5050600e54604051636f1335b960e01b81526001600160801b03851660048201526001600160a01b039091169250636f1335b99150602401600060405180830381600087803b1580156200127657600080fd5b505af11580156200128b573d6000803e3d6000fd5b50505050670de0b6b3a7640000816001600160801b0316106200134a57604051630618f58760e51b8152636a143fdd60e11b600482015260008051602062006b9f8339815191529063c31eb0e090602401600060405180830381600087803b158015620012f757600080fd5b505af11580156200130c573d6000803e3d6000fd5b5050600e54604051636f1335b960e01b81526001600160801b03851660048201526001600160a01b039091169250636f1335b99150602401620009d2565b600e546040516381bad6f360e01b815260008051602062006b9f833981519152916381bad6f3916200139391600191600091829184916001600160a01b031690600401620040bc565b600060405180830381600087803b158015620013ae57600080fd5b505af1158015620013c3573d6000803e3d6000fd5b50506040516001600160801b03841681527f248707dbfdce07115740191c2a4ec04702f5d55967ca82b9dc65c55801531f7f9250602001905060405180910390a1600e54604051636f1335b960e01b81526001600160801b03831660048201526001600160a01b0390911690636f1335b990602401600060405180830381600087803b1580156200145357600080fd5b505af115801562001468573d6000803e3d6000fd5b5050600e54600092506200149c915062000ec890637e388e1d60e11b90620005ce906001906001600160a01b031662002214565b905062000f12816001600160801b0316836001600160801b03166040518060400160405280601981526020017f4d6178206665652073686f756c64206265207570646174656400000000000000815250620022d2565b620015018383836000620015b0565b505050565b60405163c88a5e6d60e01b815260008051602062006b9f8339815191529063c88a5e6d9062001540908490600160801b9060040162004031565b600060405180830381600087803b1580156200155b57600080fd5b505af115801562001570573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b038416600482015260008051602062006b9f83398151915292506306447d569150602401620009d2565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b1790529151600092871691620016069162004229565b6000604051808303816000865af19150503d806000811462001645576040519150601f19603f3d011682016040523d82523d6000602084013e6200164a565b606091505b5091505060008180602001905181019062001666919062004247565b905062001692846200168b87620005eb6370a0823160e01b620005ce60018d62002214565b906200230e565b82156200058f5760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290516000916001600160a01b03891691620016dd919062004229565b6000604051808303816000865af19150503d80600081146200171c576040519150601f19603f3d011682016040523d82523d6000602084013e62001721565b606091505b509150506000818060200190518101906200173d919062004247565b9050828610156200176857620017548684620041b5565b620017609082620041b5565b905062001783565b620017748387620041b5565b6200178090826200420e565b90505b620017a1816200168b6318160ddd60e01b620005ce60018d62002214565b5050505050505050565b604051638d1cc92560e01b8152600090819060008051602062006b9f83398151915290638d1cc92590620017e4908690600401620040a7565b6000604051808303816000875af115801562001804573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200182e9190810190620040ec565b90508051602082016000f091506001600160a01b038216620018a75760405162461bcd60e51b815260206004820152602b60248201527f54657374206465706c6f79436f646528737472696e67293a204465706c6f796d60448201526a32b73a103330b4b632b21760a91b606482015260840162000bdb565b50919050565b60405163c88a5e6d60e01b815260008051602062006b9f8339815191529063c88a5e6d90620018e3908690859060040162004031565b600060405180830381600087803b158015620018fe57600080fd5b505af115801562001913573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b0380871660048301528516602482015260008051602062006b9f83398151915292506347e50cce915060440162000fbf565b60008051602062006b9f83398151915263e5d6bf0262000c0c83426200420e565b60008054610100900460ff16156200199d5750600054610100900460ff1690565b600060008051602062006b9f8339815191523b1562001aa85760405160009060008051602062006b9f833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49062001a0a9083906519985a5b195960d21b9060200162004031565b60408051601f198184030181529082905262001a2a929160200162004261565b60408051601f198184030181529082905262001a469162004229565b6000604051808303816000865af19150503d806000811462001a85576040519150601f19603f3d011682016040523d82523d6000602084013e62001a8a565b606091505b509150508080602001905181019062001aa4919062004294565b9150505b919050565b60405163c88a5e6d60e01b815260008051602062006b9f8339815191529063c88a5e6d906200055f908590859060040162004031565b60405163c88a5e6d60e01b815260008051602062006b9f8339815191529063c88a5e6d9062001b1d908590600160801b9060040162004031565b600060405180830381600087803b15801562001b3857600080fd5b505af115801562001b4d573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b0380861660048301528416602482015260008051602062006b9f83398151915292506345b5607891506044016200055f565b7f42b963ace015abb7c727e77dec115c5f418f4f96d9ec897f85c202793274661a60405162001c1b906020808252603b908201527f54686520607469706020737464636865617420686173206265656e206465707260408201527f6563617465642e2055736520606465616c6020696e73746561642e0000000000606082015260800190565b60405180910390a162001501816200168b84620005eb6370a0823160e01b620005ce60018a62002214565b60405163c88a5e6d60e01b815260008051602062006b9f8339815191529063c88a5e6d9062001c7c908590859060040162004031565b600060405180830381600087803b15801562001c9757600080fd5b505af115801562001cac573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038516600482015260008051602062006b9f833981519152925063ca669fa791506024016200055f565b62001cf66200231a565b60405162001d049062003c5c565b604051809103906000f08015801562001d21573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b815260048101929092526024820152601060448201526f416c6c4b6e6f77696e674f7261636c6560801b606482015260008051602062006b9f8339815191529063c657c71890608401600060405180830381600087803b15801562001db157600080fd5b505af115801562001dc6573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062006b9f83398151915292506306447d569150602401600060405180830381600087803b15801562001e1f57600080fd5b505af115801562001e34573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062001e7392909116906000199060040162004031565b6020604051808303816000875af115801562001e93573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001eb9919062004294565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262001ef4929116906000199060040162004031565b6020604051808303816000875af115801562001f14573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f3a919062004294565b50604080516390c5013b60e01b8152905160008051602062006b9f833981519152916390c5013b91600480830192600092919082900301818387803b15801562001f8357600080fd5b505af115801562001f98573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062006b9f83398151915292506306447d569150602401600060405180830381600087803b15801562001ff157600080fd5b505af115801562002006573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200204592909116906000199060040162004031565b6020604051808303816000875af115801562002065573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200208b919062004294565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620020c6929116906000199060040162004031565b6020604051808303816000875af1158015620020e6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200210c919062004294565b50604080516390c5013b60e01b8152905160008051602062006b9f833981519152916390c5013b91600480830192600092919082900301818387803b1580156200215557600080fd5b505af11580156200216a573d6000803e3d6000fd5b5050600d54600b54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b158015620021bf57600080fd5b505af1158015620021d4573d6000803e3d6000fd5b5050600d54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b915060440162000488565b6005820180546001600160a01b0319166001600160a01b039290921691909117905590565b6000620022468262002504565b8060200190518101906200225b919062004294565b92915050565b6200226d8115620025cc565b50565b81151583151514620015015760008051602062006bbf833981519152816040516200229c9190620042b4565b60405180910390a162001501838362002644565b6000620022bd8262002504565b8060200190518101906200225b919062004247565b818314620015015760008051602062006bbf83398151915281604051620022fa9190620042b4565b60405180910390a1620015018383620027ab565b62000f12828262002890565b600854604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526005604482015264416c69636560d81b606482015260008051602062006b9f8339815191529063c657c71890608401600060405180830381600087803b1580156200238a57600080fd5b505af11580156200239f573d6000803e3d6000fd5b5050600954604080516318caf8e360e31b81526001600160a01b039092166004830152602482015260036044820152622137b160e91b606482015260008051602062006b9f833981519152925063c657c7189150608401600060405180830381600087803b1580156200241157600080fd5b505af115801562002426573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526007604482015266436861726c696560c81b606482015260008051602062006b9f833981519152925063c657c7189150608401600060405180830381600087803b1580156200249c57600080fd5b505af1158015620024b1573d6000803e3d6000fd5b5050604080516318caf8e360e31b815230600482015260248101919091526003604482015262596f7560e81b606482015260008051602062006b9f833981519152925063c657c718915060840162000488565b60058101546060906001600160a01b03166000620025228462002c8b565b604051630667f9d760e41b815290915060008051602062006b9f8339815191529063667f9d70906200255b908590859060040162004031565b6020604051808303816000875af11580156200257b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620025a1919062004247565b604051602001620025b491815260200190565b60405160208183030381529060405292505050919050565b806200226d577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620026329060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a16200226d62003a13565b8015158215151462000f12577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620026bb9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a160008051602062006bbf83398151915281620026fd576040518060400160405280600581526020016466616c736560d81b8152506200271b565b604051806040016040528060048152602001637472756560e01b8152505b6040516200272a9190620042e5565b60405180910390a160008051602062006bbf833981519152826200276c576040518060400160405280600581526020016466616c736560d81b8152506200278a565b604051806040016040528060048152602001637472756560e01b8152505b60405162002799919062004324565b60405180910390a162000f1262003a13565b80821462000f12577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516200281e9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516200285791906200434f565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405162002799919062004388565b600582015460038301546004840154600285018054604080516020808402820181019092528281526001600160a01b039096169560e09590951b94600093909290918301828280156200290357602002820191906000526020600020905b815481526020019060010190808311620028ee575b50505050509050600083620029188362003b17565b6040516020016200292b92919062004261565b60408051601f198184030181528282526001600160a01b038816600090815260018b0160209081528382206001600160e01b03198a1683528152928120919450909290916200297f918691889101620043b3565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620029ba57620029b88762002c8b565b505b6001600160a01b0385166000908152602088815260408083206001600160e01b0319881684528252808320905190918391620029fb918791899101620043b3565b6040516020818303038152906040528051906020012081526020019081526020016000205460001b9050600080876001600160a01b03168460405162002a42919062004229565b600060405180830381855afa9150503d806000811462002a7f576040519150601f19603f3d011682016040523d82523d6000602084013e62002a84565b606091505b50915062002aa190508162002a9b886020620043ef565b62003bc4565b604051630667f9d760e41b81529092506000915060008051602062006b9f8339815191529063667f9d709062002ade908b90879060040162004031565b6020604051808303816000875af115801562002afe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b24919062004247565b905080821462002bda5760405162461bcd60e51b815260206004820152606e60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526d39b73a1039bab83837b93a32b21760911b60a482015260c40162000bdb565b6040516370ca10bb60e01b815260008051602062006b9f833981519152906370ca10bb9062002c12908b9087908e9060040162004411565b600060405180830381600087803b15801562002c2d57600080fd5b505af115801562002c42573d6000803e3d6000fd5b50505060058b0180546001600160a01b03191690555060038a01805463ffffffff1916905562002c7760028b01600062003c6a565b896004016000905550505050505050505050565b600581015460038201546004830154600284018054604080516020808402820181019092528281526000966001600160a01b03169560e01b94938793919290919083018282801562002cfd57602002820191906000526020600020905b81548152602001906001019080831162002ce8575b5050506001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a168452825280832090519596509491935062002d4992508591879101620043b3565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff161562002de8576001600160a01b0384166000908152602087815260408083206001600160e01b0319871684528252808320905190929162002db8918591879101620043b3565b60405160208183030381529060405280519060200120815260200190815260200160002054945050505050919050565b60008362002df68362003b17565b60405160200162002e0992919062004261565b604051602081830303815290604052905060008051602062006bdf83398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562002e6857600080fd5b505af115801562002e7d573d6000803e3d6000fd5b50505050600080866001600160a01b03168360405162002e9e919062004229565b600060405180830381855afa9150503d806000811462002edb576040519150601f19603f3d011682016040523d82523d6000602084013e62002ee0565b606091505b50915062002ef790508162002a9b876020620043ef565b6040516365bc948160e01b81526001600160a01b03891660048201529092506000915060008051602062006b9f833981519152906365bc9481906024016000604051808303816000875af115801562002f54573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262002f7e9190810190620044bb565b5090508051600103620032d857600060008051602062006bdf83398151915260001c6001600160a01b031663667f9d70898460008151811062002fc55762002fc56200451c565b60200260200101516040518363ffffffff1660e01b815260040162002fec92919062004031565b6020604051808303816000875af11580156200300c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003032919062004247565b90508062003096577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a588836000815181106200307257620030726200451c565b602002602001015160001c6040516200308d92919062004031565b60405180910390a15b808314620031495760405162461bcd60e51b815260206004820152606d60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526c1cdb9d081cdd5c1c1bdc9d1959609a1b60a482015260c40162000bdb565b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8888878960405160200162003181929190620043b3565b6040516020818303038152906040528051906020012085600081518110620031ad57620031ad6200451c565b602002602001015160001c604051620031ca949392919062004532565b60405180910390a181600081518110620031e857620031e86200451c565b6020908102919091018101516001600160a01b038a1660009081528c835260408082206001600160e01b03198c168352845280822090519293909262003233918a918c9101620043b3565b60408051601f1981840301815291815281516020928301208352828201939093529082016000908120939093556001600160a01b038b16835260018d810182528284206001600160e01b03198c168552825282842092519093916200329d918a918c9101620043b3565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff19169115159190911790555062003896565b600181511115620038255760005b81518110156200381e57600060008051602062006bdf83398151915260001c6001600160a01b031663667f9d708a8585815181106200332957620033296200451c565b60200260200101516040518363ffffffff1660e01b81526004016200335092919062004031565b6020604051808303816000875af115801562003370573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003396919062004247565b905080620033f9577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a589848481518110620033d557620033d56200451c565b602002602001015160001c604051620033f092919062004031565b60405180910390a15b60008051602062006bdf83398151915260001c6001600160a01b03166370ca10bb8a8585815181106200343057620034306200451c565b602002602001015161133760f01b6040518463ffffffff1660e01b81526004016200345e9392919062004411565b600060405180830381600087803b1580156200347957600080fd5b505af11580156200348e573d6000803e3d6000fd5b50505050600060608a6001600160a01b031687604051620034b0919062004229565b600060405180830381855afa9150503d8060008114620034ed576040519150601f19603f3d011682016040523d82523d6000602084013e620034f2565b606091505b5090925090506200350a8162002a9b8b6020620043ef565b95508180156200351e575061133760f01b86145b1562003771577f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c6040516020016200355c929190620043b3565b604051602081830303815290604052805190602001208888815181106200358757620035876200451c565b602002602001015160001c604051620035a4949392919062004532565b60405180910390a1848481518110620035c157620035c16200451c565b6020908102919091018101516001600160a01b038d1660009081528f835260408082206001600160e01b03198f16835284528082209051929390926200360c918d918f9101620043b3565b6040516020818303038152906040528051906020012081526020019081526020016000208190555060018d60010160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160e01b0319166001600160e01b031916815260200190815260200160002060008a8c60405160200162003699929190620043b3565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555060008051602062006bdf83398151915260001c6001600160a01b03166370ca10bb8c8787815181106200370b576200370b6200451c565b6020026020010151866040518463ffffffff1660e01b8152600401620037349392919062004411565b600060405180830381600087803b1580156200374f57600080fd5b505af115801562003764573d6000803e3d6000fd5b505050505050506200381e565b60008051602062006bdf83398151915260001c6001600160a01b03166370ca10bb8c878781518110620037a857620037a86200451c565b6020026020010151866040518463ffffffff1660e01b8152600401620037d19392919062004411565b600060405180830381600087803b158015620037ec57600080fd5b505af115801562003801573d6000803e3d6000fd5b5050505050505080806200381590620041cf565b915050620032e6565b5062003896565b6040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e606482015260840162000bdb565b6001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a16845282528083209051909291620038da9188918a9101620043b3565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620039695760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b606482015260840162000bdb565b6005890180546001600160a01b031916905560038901805463ffffffff191690556200399a60028a01600062003c6a565b600060048a018190556001600160a01b038816815260208a815260408083206001600160e01b03198a16845282528083209051909291620039e09188918a9101620043b3565b60405160208183030381529060405280519060200120815260200190815260200160002054975050505050505050919050565b60008051602062006b9f8339815191523b1562003b065760405160009060008051602062006b9f833981519152907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49062003a819083906519985a5b195960d21b9060019060200162004411565b60408051601f198184030181529082905262003aa1929160200162004261565b60408051601f198184030181529082905262003abd9162004229565b6000604051808303816000865af19150503d806000811462003afc576040519150601f19603f3d011682016040523d82523d6000602084013e62003b01565b606091505b505050505b6000805461ff001916610100179055565b606060008251602062003b2b9190620043ef565b67ffffffffffffffff81111562003b465762003b4662003d8c565b6040519080825280601f01601f19166020018201604052801562003b71576020820181803683370190505b50905060005b835181101562000be457600084828151811062003b985762003b986200451c565b60200260200101519050808260200260200184015250808062003bbb90620041cf565b91505062003b77565b6000806000602085511162003bdb57845162003bde565b60205b905060005b8181101562003c445762003bf9816008620043ef565b8662003c0683886200420e565b8151811062003c195762003c196200451c565b01602001516001600160f81b031916901c92909217918062003c3b81620041cf565b91505062003be3565b5090949350505050565b61194a806200456383390190565b610cf28062005ead83390190565b50805460008255906000526020600020908101906200226d91905b8082111562003c9b576000815560010162003c85565b5090565b80356001600160a01b038116811462001aa857600080fd5b6000806040838503121562003ccb57600080fd5b62003cd68362003c9f565b946020939093013593505050565b80151581146200226d57600080fd5b6000806040838503121562003d0757600080fd5b62003d128362003c9f565b9150602083013562003d248162003ce4565b809150509250929050565b60006020828403121562003d4257600080fd5b62003d4d8262003c9f565b9392505050565b6000806040838503121562003d6857600080fd5b62003d738362003c9f565b915062003d836020840162003c9f565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562003dce5762003dce62003d8c565b604052919050565b600067ffffffffffffffff82111562003df35762003df362003d8c565b50601f01601f191660200190565b600062003e1862003e128462003dd6565b62003da2565b905082815283838301111562003e2d57600080fd5b828260208301376000602084830101529392505050565b600082601f83011262003e5657600080fd5b62003d4d8383356020850162003e01565b6000806040838503121562003e7b57600080fd5b823567ffffffffffffffff8082111562003e9457600080fd5b62003ea28683870162003e44565b9350602085013591508082111562003eb957600080fd5b508301601f8101851362003ecc57600080fd5b62003edd8582356020840162003e01565b9150509250929050565b60006020828403121562003efa57600080fd5b5035919050565b60008060006060848603121562003f1757600080fd5b62003f228462003c9f565b925062003f326020850162003c9f565b9150604084013590509250925092565b60008060006060848603121562003f5857600080fd5b505081359360208301359350604090920135919050565b60006020828403121562003f8257600080fd5b81356001600160801b038116811462003d4d57600080fd5b6000806000806080858703121562003fb157600080fd5b62003fbc8562003c9f565b935062003fcc6020860162003c9f565b925060408501359150606085013562003fe58162003ce4565b939692955090935050565b6000602082840312156200400357600080fd5b813567ffffffffffffffff8111156200401b57600080fd5b620040298482850162003e44565b949350505050565b6001600160a01b03929092168252602082015260400190565b60005b83811015620040675781810151838201526020016200404d565b83811115620004b85750506000910152565b60008151808452620040938160208601602086016200404a565b601f01601f19169290920160200192915050565b60208152600062003d4d602083018462004079565b941515855292151560208501529015156040840152151560608301526001600160a01b0316608082015260a00190565b600060208284031215620040ff57600080fd5b815167ffffffffffffffff8111156200411757600080fd5b8201601f810184136200412957600080fd5b80516200413a62003e128262003dd6565b8181528560208385010111156200415057600080fd5b620041638260208301602086016200404a565b95945050505050565b60008351620041808184602088016200404a565b835190830190620041968183602088016200404a565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b600082821015620041ca57620041ca6200419f565b500390565b600060018201620041e457620041e46200419f565b5060010190565b6000826200420957634e487b7160e01b600052601260045260246000fd5b500690565b600082198211156200422457620042246200419f565b500190565b600082516200423d8184602087016200404a565b9190910192915050565b6000602082840312156200425a57600080fd5b5051919050565b6001600160e01b0319831681528151600090620042868160048501602087016200404a565b919091016004019392505050565b600060208284031215620042a757600080fd5b815162003d4d8162003ce4565b60408152600560408201526422b93937b960d91b606082015260806020820152600062003d4d608083018462004079565b6040815260006200431060408301600a8152690808115e1c1958dd195960b21b602082015260400190565b828103602084015262004029818562004079565b6040815260006200431060408301600a815269080808081058dd1d585b60b21b602082015260400190565b6040815260006200437a60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b6040815260006200437a60408301600a815269080808081058dd1d585b60b21b602082015260400190565b825160009082906020808701845b83811015620043df57815185529382019390820190600101620043c1565b5050948252509092019392505050565b60008160001904831182151516156200440c576200440c6200419f565b500290565b6001600160a01b039390931683526020830191909152604082015260600190565b600082601f8301126200444457600080fd5b8151602067ffffffffffffffff82111562004463576200446362003d8c565b8160051b6200447482820162003da2565b92835284810182019282810190878511156200448f57600080fd5b83870192505b84831015620044b05782518252918301919083019062004495565b979650505050505050565b60008060408385031215620044cf57600080fd5b825167ffffffffffffffff80821115620044e857600080fd5b620044f68683870162004432565b935060208501519150808211156200450d57600080fd5b5062003edd8582860162004432565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039490941684526001600160e01b0319929092166020840152604083015260608201526080019056fe60a0604052600180546001600160801b031916905534801561002057600080fd5b5060405161194a38038061194a83398101604081905261003f9161011c565b600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506001600160a01b03811660805260028290556040518281527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd76159060200160405180910390a1600380546001600160801b0319166703782dace9d900009081179091556040519081527f248707dbfdce07115740191c2a4ec04702f5d55967ca82b9dc65c55801531f7f9060200160405180910390a15050610159565b6000806040838503121561012f57600080fd5b825160208401519092506001600160a01b038116811461014e57600080fd5b809150509250929050565b6080516117c8610182600039600081816101c801528181610b020152610bb801526117c86000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063d70e3dfd11610071578063d70e3dfd14610299578063d8642295146102c2578063daf9c210146102d5578063fbc534ef14610308578063fc711c3a1461031b57600080fd5b80638da5cb5b146102155780639170c05b146102285780639362776f1461023b5780639501325f1461024e578063cd805d5e1461026e57600080fd5b80632613f307116100f45780632613f3071461018a578063436146791461019d5780636f1335b9146101b05780637dc0d1d0146101c357806382b2ec3e1461020257600080fd5b80630b20b7bc146101265780630ff0c00e146101595780630ffb1d8b1461016257806313af403514610177575b600080fd5b61014661013436600461134c565b60076020526000908152604090205481565b6040519081526020015b60405180910390f35b61014660025481565b61017561017036600461138f565b61032e565b005b6101756101853660046113c6565b6103c0565b61017561019836600461134c565b610435565b6101756101ab3660046113ff565b61049b565b6101756101be366004611465565b6105fe565b6101ea7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610150565b610175610210366004611480565b6106b0565b6000546101ea906001600160a01b031681565b6101756102363660046114f1565b610747565b61017561024936600461158a565b610932565b61014661025c36600461134c565b60056020526000908152604090205481565b600154610281906001600160801b031681565b6040516001600160801b039091168152602001610150565b6101ea6102a736600461134c565b6006602052600090815260409020546001600160a01b031681565b6101756102d03660046115f2565b6109e9565b6102f86102e33660046113c6565b60046020526000908152604090205460ff1681565b6040519015158152602001610150565b6101756103163660046113ff565b610a60565b600354610281906001600160801b031681565b6000546001600160a01b031633146103615760405162461bcd60e51b8152600401610358906116b5565b60405180910390fd5b6001600160a01b038216600081815260046020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d92910160405180910390a25050565b6000546001600160a01b031633146103ea5760405162461bcd60e51b8152600401610358906116b5565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b0316331461045f5760405162461bcd60e51b8152600401610358906116b5565b60028190556040518181527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd7615906020015b60405180910390a150565b60006104ab878787878787610ca5565b600081815260056020526040812054919250036104de5760405163cc4f06a160e01b815260048101829052602401610358565b6002546000828152600560205260409020546104fa90436116f1565b10156105455760008181526005602052604081205461051990436116f1565b60025461052691906116f1565b9050806040516325797e0360e11b815260040161035891815260200190565b600081815260076020818152604080842080546006845282862080546005865293872087905580546001600160a01b031916905593909252929055906001600160a01b039081169061059a9089168684610d09565b6105ae6001600160a01b038a168289610d09565b8183826001600160a01b03167ff74daea4b4b80ee368b87f2feb712805f4ef30acd087e35c5d16df8736c2d6f2896040516105eb91815260200190565b60405180910390a4505050505050505050565b6000546001600160a01b031633146106285760405162461bcd60e51b8152600401610358906116b5565b670de0b6b3a7640000816001600160801b03161061065957604051636a143fdd60e11b815260040160405180910390fd5b600380546fffffffffffffffffffffffffffffffff19166001600160801b0383169081179091556040519081527f248707dbfdce07115740191c2a4ec04702f5d55967ca82b9dc65c55801531f7f90602001610490565b60006106c0888888888888610ca5565b600081815260056020526040902054909150156106f3576040516304daa62560e21b815260048101829052602401610358565b6106fe878284610d87565b60408051868152602081018490524391839133917f9e2cd6515276369145ad3c2ee5eb7c8f09ca9c99e8e7d6e68de40895a72f3464910160405180910390a45050505050505050565b6001600160a01b03851660009081526004602052604090205460ff1661078b5760405163f602627d60e01b81526001600160a01b0386166004820152602401610358565b6001600160a01b03841660009081526004602052604090205460ff166107cf5760405163f602627d60e01b81526001600160a01b0385166004820152602401610358565b836001600160a01b0316856001600160a01b03160361080157604051631d2792fb60e31b815260040160405180910390fd5b6003546001600160801b0316821115610830576040516305bf279d60e41b815260048101839052602401610358565b826000036108515760405163abc5ee6f60e01b815260040160405180910390fd5b6001600160a01b03811661087857604051631feef77d60e01b815260040160405180910390fd5b61088d6001600160a01b038616333086610ddb565b60015460408051858152602081018590526001600160a01b038481168284015291516001600160801b0390931692878316928916917f7361c265d28ece9d5df249995186533440e0b7a1310ae54d496fa1783056e3da919081900360600190a4600180546001600160801b031690600061090683611708565b91906101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6003546001600160801b0316831115610961576040516305bf279d60e41b815260048101849052602401610358565b60008481526005602052604090205415610991576040516304daa62560e21b815260048101859052602401610358565b61099e8585858585610e65565b83856001600160a01b03167f2932e14c54a9749927aed2cd6d014eb7cd6a224f5fe6dfb944d9ced9b04c4f47856040516109da91815260200190565b60405180910390a35050505050565b60006109f98c8c8c8c8c8c610ca5565b9050610a088582868686610e65565b610a138b8288610d87565b60408051858152602081018890524391839133917f9e2cd6515276369145ad3c2ee5eb7c8f09ca9c99e8e7d6e68de40895a72f3464910160405180910390a4505050505050505050505050565b6000610a70878787878787610ca5565b600081815260056020526040812054919250819003610aa55760405163cc4f06a160e01b815260048101839052602401610358565b600254610ab282436116f1565b10610ad057604051632c02744560e11b815260040160405180910390fd5b60008281526007602090815260408083205460069092529182902054915163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905291928216918a169063095ea7b3906044016020604051808303816000875af1158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b83919061172e565b50604051632bd6267f60e21b81526001600160a01b0382811660048301523360248301528a81166044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063af5899fc906084016020604051808303816000875af1158015610c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c25919061174b565b5060008481526005602090815260408083208390556006825280832080546001600160a01b031916905560078252808320929092559051888152839186916001600160a01b038516917fbfb0e6d8f5102fdad9ead2713eec1014861fe90e38a91786fb5c610873c38ad8910160405180910390a450505050505050505050565b604080516001600160a01b039788166020808301919091529688168183015260608101959095526080850193909352941660a08301526001600160801b0390931660c0808301919091528351808303909101815260e0909101909252815191012090565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610d815760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610358565b50505050565b60008281526005602090815260408083204390556006825280832080546001600160a01b031916339081179091556007909252909120829055610dd6906001600160a01b038516903084610ddb565b505050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610e5e5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610358565b5050505050565b6003546001600160801b0316831115610e94576040516305bf279d60e41b815260048101849052602401610358565b60008481526005602052604090205415610ec4576040516304daa62560e21b815260048101859052602401610358565b604080517f0efb9dda140a951df4393d44ca40349032d31811466afd20eacd4b4136c3f4986020808301919091528183018790526060808301879052835180840390910181526080830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a084015260bc8084018290528451808503909101815260dc90930190935281519101206000610f9d8286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fdb92505050565b9050876001600160a01b0316816001600160a01b031614610fd1576040516324a0dbd760e21b815260040160405180910390fd5b5050505050505050565b6000806000610fea8585610fff565b91509150610ff78161106d565b509392505050565b60008082516041036110355760208301516040840151606085015160001a61102987828585611226565b94509450505050611066565b825160400361105e5760208301516040840151611053868383611313565b935093505050611066565b506000905060025b9250929050565b600081600481111561108157611081611764565b036110895750565b600181600481111561109d5761109d611764565b036110ea5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610358565b60028160048111156110fe576110fe611764565b0361114b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610358565b600381600481111561115f5761115f611764565b036111b75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610358565b60048160048111156111cb576111cb611764565b036112235760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610358565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561125d575060009050600361130a565b8460ff16601b1415801561127557508460ff16601c14155b15611286575060009050600461130a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156112da573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113035760006001925092505061130a565b9150600090505b94509492505050565b6000806001600160ff1b0383168161133060ff86901c601b61177a565b905061133e87828885611226565b935093505050935093915050565b60006020828403121561135e57600080fd5b5035919050565b80356001600160a01b038116811461137c57600080fd5b919050565b801515811461122357600080fd5b600080604083850312156113a257600080fd5b6113ab83611365565b915060208301356113bb81611381565b809150509250929050565b6000602082840312156113d857600080fd5b6113e182611365565b9392505050565b80356001600160801b038116811461137c57600080fd5b60008060008060008060c0878903121561141857600080fd5b61142187611365565b955061142f60208801611365565b9450604087013593506060870135925061144b60808801611365565b915061145960a088016113e8565b90509295509295509295565b60006020828403121561147757600080fd5b6113e1826113e8565b600080600080600080600060e0888a03121561149b57600080fd5b6114a488611365565b96506114b260208901611365565b955060408801359450606088013593506114ce60808901611365565b92506114dc60a089016113e8565b915060c0880135905092959891949750929550565b600080600080600060a0868803121561150957600080fd5b61151286611365565b945061152060208701611365565b9350604086013592506060860135915061153c60808701611365565b90509295509295909350565b60008083601f84011261155a57600080fd5b50813567ffffffffffffffff81111561157257600080fd5b60208301915083602082850101111561106657600080fd5b6000806000806000608086880312156115a257600080fd5b6115ab86611365565b94506020860135935060408601359250606086013567ffffffffffffffff8111156115d557600080fd5b6115e188828901611548565b969995985093965092949392505050565b60008060008060008060008060008060006101408c8e03121561161457600080fd5b61161d8c611365565b9a5061162b60208d01611365565b995060408c0135985060608c0135975061164760808d01611365565b965061165560a08d016113e8565b955060c08c0135945061166a60e08d01611365565b93506101008c013592506101208c013567ffffffffffffffff81111561168f57600080fd5b61169b8e828f01611548565b915080935050809150509295989b509295989b9093969950565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015611703576117036116db565b500390565b60006001600160801b03808316818103611724576117246116db565b6001019392505050565b60006020828403121561174057600080fd5b81516113e181611381565b60006020828403121561175d57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6000821982111561178d5761178d6116db565b50019056fea2646970667358221220b144609d5e94d9780a67f8606701da17b69128c8d7de725234b2a7005a9c983e64736f6c634300080d0033608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350601960038190556040519081527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a1610c578061009b6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461010d5780639d86698514610138578063af5899fc146101ab578063daf9c210146101be578063fc361c38146101f157600080fd5b806307de99f6146100a35780630ffb1d8b146100c957806313af4035146100de578063391fe4e2146100f15780638945bd28146100fa575b600080fd5b6100b66100b13660046109e4565b610204565b6040519081526020015b60405180910390f35b6100dc6100d7366004610a2a565b610215565b005b6100dc6100ec366004610a61565b610273565b6100b660035481565b6100dc6101083660046109e4565b6102e8565b600054610120906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b6101986101463660046109e4565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b0395861695938416949390921692909160ff8082169161010090041687565b6040516100c09796959493929190610a99565b6100b66101b9366004610aff565b61034d565b6101e16101cc366004610a61565b60026020526000908152604090205460ff1681565b60405190151581526020016100c0565b6100dc6101ff366004610b4a565b6105ee565b600061020f8261093e565b92915050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f90610b6f565b60405180910390fd5b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b6000546001600160a01b0316331461029d5760405162461bcd60e51b815260040161023f90610b6f565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103125760405162461bcd60e51b815260040161023f90610b6f565b60038190556040518181527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a150565b6001600160a01b03821660009081526002602052604081205460ff166103915760405163010d7e6160e11b81526001600160a01b038416600482015260240161023f565b600061039c8361093e565b604080516001600160a01b03808a1660208301528089169282019290925290861660608201526080810185905260a0810182905290915060009060c00160408051601f19818403018152919052805160209091012090506001600082815260016020526040902060050154610100900460ff16600281111561042057610420610a83565b036104415760405163d5e880e960e01b81526004810182905260240161023f565b60006040518060e00160405280896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b03168152602001868152602001848152602001600015158152602001600160028111156104a3576104a3610a83565b9052600083815260016020818152604092839020845181546001600160a01b03199081166001600160a01b03928316178355928601519382018054841694821694909417909355928401516002808501805490931691909316179055606083015160038301556080830151600483015560a083015160058301805460ff198116921515928317825560c0860151959650869593919261ffff1990911661ff0019909116179061010090849081111561055d5761055d610a83565b021790555061057a9150506001600160a01b03871688308661095a565b61058f6001600160a01b03871633308861095a565b604080516001600160a01b03888116825260208201889052918101859052818916918a169084907fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699060600160405180910390a4509695505050505050565b6000546001600160a01b031633146106185760405162461bcd60e51b815260040161023f90610b6f565b6000828152600160208181526040808420815160e08101835281546001600160a01b03908116825294820154851693810193909352600280820154909416918301919091526003810154606083015260048101546080830152600581015460ff808216151560a08501529293919260c085019261010090920416908111156106a2576106a2610a83565b60028111156106b3576106b3610a83565b905250905060028160c0015160028111156106d0576106d0610a83565b036106f15760405163b677167760e01b81526004810184905260240161023f565b81151560010361079c5780604001516001600160a01b031663a9059cbb8260000151836060015184608001516107279190610bab565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107969190610bc3565b50610839565b80604001516001600160a01b031663a9059cbb8260200151836060015184608001516107c89190610bab565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108379190610bc3565b505b600260c0820181815283151560a08401908152600086815260016020818152604092839020875181546001600160a01b039182166001600160a01b0319918216178355928901519382018054948216948416949094179093559287015183870180549190931691161790556060850151600382015560808501516004820155905160058201805491151560ff198316811782559351869593949093919261ff001990911661ffff1990911617906101009084908111156108fb576108fb610a83565b02179055505060405183151581528491507fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a2505050565b60006064600354836109509190610be0565b61020f9190610bff565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806109dd5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161023f565b5050505050565b6000602082840312156109f657600080fd5b5035919050565b80356001600160a01b0381168114610a1457600080fd5b919050565b8015158114610a2757600080fd5b50565b60008060408385031215610a3d57600080fd5b610a46836109fd565b91506020830135610a5681610a19565b809150509250929050565b600060208284031215610a7357600080fd5b610a7c826109fd565b9392505050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905282151560a082015260e0810160038310610aed57634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b60008060008060808587031215610b1557600080fd5b610b1e856109fd565b9350610b2c602086016109fd565b9250610b3a604086016109fd565b9396929550929360600135925050565b60008060408385031215610b5d57600080fd5b823591506020830135610a5681610a19565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610bbe57610bbe610b95565b500190565b600060208284031215610bd557600080fd5b8151610a7c81610a19565b6000816000190483118215151615610bfa57610bfa610b95565b500290565b600082610c1c57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205bdec491885dcc1ed8f1a4dbb49b3f7c52371c21a2e5f51f7e6207c148789ec264736f6c634300080d00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220be4a0b9a2d6522115abdd98fb9c8defe97a5db2f7451e41aea176d2d5626811d64736f6c634300080d0033" . parse () . expect ("invalid bytecode")
        });
    pub struct AdminTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for AdminTest<M> {
        fn clone(&self) -> Self {
            AdminTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for AdminTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for AdminTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(AdminTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> AdminTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), ADMINTEST_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                ADMINTEST_ABI.clone(),
                ADMINTEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bound` (0x5a6c1eed) function"]
        pub fn bound(
            &self,
            x: ethers::core::types::U256,
            min: ethers::core::types::U256,
            max: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([90, 108, 30, 237], (x, min, max))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x6bce989b) function"]
        pub fn deal_with_token(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([107, 206, 152, 155], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x97754ae9) function"]
        pub fn deal_with_token_and_adjust(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
            adjust: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([151, 117, 74, 233], (token, to, give, adjust))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0xc88a5e6d) function"]
        pub fn deal(
            &self,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 138, 94, 109], (to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x29ce9dde) function"]
        pub fn deploy_code_with_args(
            &self,
            what: String,
            args: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 206, 157, 222], (what, args))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x9a8325a0) function"]
        pub fn deploy_code(
            &self,
            what: String,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([154, 131, 37, 160], what)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x233240ee) function"]
        pub fn hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 50, 64, 238], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x29a9e300) function"]
        pub fn hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([41, 169, 227, 0], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xaf9bbe5f) function"]
        pub fn hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([175, 155, 190, 95], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xe9a79a7b) function"]
        pub fn hoax_4(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([233, 167, 154, 123], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewind` (0x2d6c17a3) function"]
        pub fn rewind(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([45, 108, 23, 163], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `skip` (0xb9c071b4) function"]
        pub fn skip(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([185, 192, 113, 180], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x108554f2) function"]
        pub fn start_hoax_1(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([16, 133, 84, 242], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x3bf82db1) function"]
        pub fn start_hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 248, 45, 177], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x6f597075) function"]
        pub fn start_hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([111, 89, 112, 117], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0xd06d8229) function"]
        pub fn start_hoax_4(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 109, 130, 41], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testMaxFeePctChange` (0x5b657cca) function"]
        pub fn test_max_fee_pct_change(
            &self,
            new_fee: u128,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([91, 101, 124, 202], new_fee)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testThresholdChange` (0x35605851) function"]
        pub fn test_threshold_change(
            &self,
            new_threshold: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([53, 96, 88, 81], new_threshold)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testTokenWhitelist` (0x1e388b93) function"]
        pub fn test_token_whitelist(
            &self,
            token: ethers::core::types::Address,
            enabled: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([30, 56, 139, 147], (token, enabled))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tip` (0xd82555f1) function"]
        pub fn tip(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 37, 85, 241], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `MaxFeePctChanged` event"]
        pub fn max_fee_pct_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MaxFeePctChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `SafeBlockThresholdChanged` event"]
        pub fn safe_block_threshold_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, SafeBlockThresholdChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenWhitelisted` event"]
        pub fn token_whitelisted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenWhitelistedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputed` event"]
        pub fn trade_disputed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeFilled` event"]
        pub fn trade_filled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeFilledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeRequested` event"]
        pub fn trade_requested_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeRequestedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeSettled` event"]
        pub fn trade_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `UpdatedFeeForTrade` event"]
        pub fn updated_fee_for_trade_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, UpdatedFeeForTradeFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `WARNING_Deprecated` event"]
        pub fn warning_deprecated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, WarningDeprecatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, AdminTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for AdminTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "MaxFeePctChanged", abi = "MaxFeePctChanged(uint128)")]
    pub struct MaxFeePctChangedFilter {
        pub new_max_fee_pct: u128,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "SafeBlockThresholdChanged",
        abi = "SafeBlockThresholdChanged(uint256)"
    )]
    pub struct SafeBlockThresholdChangedFilter {
        pub new_safe_block_threshold: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokenWhitelisted", abi = "TokenWhitelisted(address,bool)")]
    pub struct TokenWhitelistedFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
        pub whitelisted: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeDisputed",
        abi = "TradeDisputed(address,bytes32,uint256,uint256)"
    )]
    pub struct TradeDisputedFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        #[ethevent(indexed)]
        pub filled_amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeFilled",
        abi = "TradeFilled(address,bytes32,uint256,uint256,uint256)"
    )]
    pub struct TradeFilledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        #[ethevent(indexed)]
        pub filled_at_block: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeRequested",
        abi = "TradeRequested(address,address,uint256,uint256,address,uint256)"
    )]
    pub struct TradeRequestedFilter {
        #[ethevent(indexed)]
        pub token_in: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub token_out: ethers::core::types::Address,
        pub fee_pct: ethers::core::types::U256,
        pub amount: ethers::core::types::U256,
        pub to: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeSettled",
        abi = "TradeSettled(address,bytes32,uint256,uint256)"
    )]
    pub struct TradeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        #[ethevent(indexed)]
        pub filled_amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "UpdatedFeeForTrade",
        abi = "UpdatedFeeForTrade(address,bytes32,uint256)"
    )]
    pub struct UpdatedFeeForTradeFilter {
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        pub new_fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "WARNING_Deprecated", abi = "WARNING_Deprecated(string)")]
    pub struct WarningDeprecatedFilter {
        pub msg: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum AdminTestEvents {
        MaxFeePctChangedFilter(MaxFeePctChangedFilter),
        SafeBlockThresholdChangedFilter(SafeBlockThresholdChangedFilter),
        TokenWhitelistedFilter(TokenWhitelistedFilter),
        TradeDisputedFilter(TradeDisputedFilter),
        TradeFilledFilter(TradeFilledFilter),
        TradeRequestedFilter(TradeRequestedFilter),
        TradeSettledFilter(TradeSettledFilter),
        UpdatedFeeForTradeFilter(UpdatedFeeForTradeFilter),
        WarningDeprecatedFilter(WarningDeprecatedFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for AdminTestEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = MaxFeePctChangedFilter::decode_log(log) {
                return Ok(AdminTestEvents::MaxFeePctChangedFilter(decoded));
            }
            if let Ok(decoded) = SafeBlockThresholdChangedFilter::decode_log(log) {
                return Ok(AdminTestEvents::SafeBlockThresholdChangedFilter(decoded));
            }
            if let Ok(decoded) = TokenWhitelistedFilter::decode_log(log) {
                return Ok(AdminTestEvents::TokenWhitelistedFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputedFilter::decode_log(log) {
                return Ok(AdminTestEvents::TradeDisputedFilter(decoded));
            }
            if let Ok(decoded) = TradeFilledFilter::decode_log(log) {
                return Ok(AdminTestEvents::TradeFilledFilter(decoded));
            }
            if let Ok(decoded) = TradeRequestedFilter::decode_log(log) {
                return Ok(AdminTestEvents::TradeRequestedFilter(decoded));
            }
            if let Ok(decoded) = TradeSettledFilter::decode_log(log) {
                return Ok(AdminTestEvents::TradeSettledFilter(decoded));
            }
            if let Ok(decoded) = UpdatedFeeForTradeFilter::decode_log(log) {
                return Ok(AdminTestEvents::UpdatedFeeForTradeFilter(decoded));
            }
            if let Ok(decoded) = WarningDeprecatedFilter::decode_log(log) {
                return Ok(AdminTestEvents::WarningDeprecatedFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(AdminTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(AdminTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for AdminTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                AdminTestEvents::MaxFeePctChangedFilter(element) => element.fmt(f),
                AdminTestEvents::SafeBlockThresholdChangedFilter(element) => element.fmt(f),
                AdminTestEvents::TokenWhitelistedFilter(element) => element.fmt(f),
                AdminTestEvents::TradeDisputedFilter(element) => element.fmt(f),
                AdminTestEvents::TradeFilledFilter(element) => element.fmt(f),
                AdminTestEvents::TradeRequestedFilter(element) => element.fmt(f),
                AdminTestEvents::TradeSettledFilter(element) => element.fmt(f),
                AdminTestEvents::UpdatedFeeForTradeFilter(element) => element.fmt(f),
                AdminTestEvents::WarningDeprecatedFilter(element) => element.fmt(f),
                AdminTestEvents::LogFilter(element) => element.fmt(f),
                AdminTestEvents::LogAddressFilter(element) => element.fmt(f),
                AdminTestEvents::LogBytesFilter(element) => element.fmt(f),
                AdminTestEvents::LogBytes32Filter(element) => element.fmt(f),
                AdminTestEvents::LogIntFilter(element) => element.fmt(f),
                AdminTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                AdminTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                AdminTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                AdminTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                AdminTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                AdminTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                AdminTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                AdminTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                AdminTestEvents::LogStringFilter(element) => element.fmt(f),
                AdminTestEvents::LogUintFilter(element) => element.fmt(f),
                AdminTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST`function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `bound`function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bound", abi = "bound(uint256,uint256,uint256)")]
    pub struct BoundCall {
        pub x: ethers::core::types::U256,
        pub min: ethers::core::types::U256,
        pub max: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256)` and selector `[107, 206, 152, 155]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256)")]
    pub struct DealWithTokenCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256,bool)` and selector `[151, 117, 74, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256,bool)")]
    pub struct DealWithTokenAndAdjustCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
        pub adjust: bool,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,uint256)` and selector `[200, 138, 94, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,uint256)")]
    pub struct DealCall {
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string,bytes)")]
    pub struct DeployCodeWithArgsCall {
        pub what: String,
        pub args: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string)")]
    pub struct DeployCodeCall {
        pub what: String,
    }
    #[doc = "Container type for all input parameters for the `failed`function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address)` and selector `[35, 50, 64, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address)")]
    pub struct Hoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address)` and selector `[41, 169, 227, 0]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address)")]
    pub struct Hoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address,uint256)` and selector `[175, 155, 190, 95]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address,uint256)")]
    pub struct Hoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,uint256)` and selector `[233, 167, 154, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,uint256)")]
    pub struct Hoax4Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `rewind`function with signature `rewind(uint256)` and selector `[45, 108, 23, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewind", abi = "rewind(uint256)")]
    pub struct RewindCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setUp`function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `skip`function with signature `skip(uint256)` and selector `[185, 192, 113, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "skip", abi = "skip(uint256)")]
    pub struct SkipCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,uint256)` and selector `[16, 133, 84, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,uint256)")]
    pub struct StartHoax1Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address,uint256)` and selector `[59, 248, 45, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address,uint256)")]
    pub struct StartHoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address)` and selector `[111, 89, 112, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address)")]
    pub struct StartHoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address)` and selector `[208, 109, 130, 41]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address)")]
    pub struct StartHoax4Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `testMaxFeePctChange`function with signature `testMaxFeePctChange(uint128)` and selector `[91, 101, 124, 202]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testMaxFeePctChange", abi = "testMaxFeePctChange(uint128)")]
    pub struct TestMaxFeePctChangeCall {
        pub new_fee: u128,
    }
    #[doc = "Container type for all input parameters for the `testThresholdChange`function with signature `testThresholdChange(uint256)` and selector `[53, 96, 88, 81]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testThresholdChange", abi = "testThresholdChange(uint256)")]
    pub struct TestThresholdChangeCall {
        pub new_threshold: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testTokenWhitelist`function with signature `testTokenWhitelist(address,bool)` and selector `[30, 56, 139, 147]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testTokenWhitelist", abi = "testTokenWhitelist(address,bool)")]
    pub struct TestTokenWhitelistCall {
        pub token: ethers::core::types::Address,
        pub enabled: bool,
    }
    #[doc = "Container type for all input parameters for the `tip`function with signature `tip(address,address,uint256)` and selector `[216, 37, 85, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tip", abi = "tip(address,address,uint256)")]
    pub struct TipCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `vm`function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum AdminTestCalls {
        IsTest(IsTestCall),
        Bound(BoundCall),
        DealWithToken(DealWithTokenCall),
        DealWithTokenAndAdjust(DealWithTokenAndAdjustCall),
        Deal(DealCall),
        DeployCodeWithArgs(DeployCodeWithArgsCall),
        DeployCode(DeployCodeCall),
        Failed(FailedCall),
        Hoax0(Hoax0Call),
        Hoax2(Hoax2Call),
        Hoax3(Hoax3Call),
        Hoax4(Hoax4Call),
        Rewind(RewindCall),
        SetUp(SetUpCall),
        Skip(SkipCall),
        StartHoax1(StartHoax1Call),
        StartHoax2(StartHoax2Call),
        StartHoax0(StartHoax0Call),
        StartHoax4(StartHoax4Call),
        TestMaxFeePctChange(TestMaxFeePctChangeCall),
        TestThresholdChange(TestThresholdChangeCall),
        TestTokenWhitelist(TestTokenWhitelistCall),
        Tip(TipCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for AdminTestCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <BoundCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::Bound(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::DealWithToken(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenAndAdjustCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::DealWithTokenAndAdjust(decoded));
            }
            if let Ok(decoded) = <DealCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AdminTestCalls::Deal(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeWithArgsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::DeployCodeWithArgs(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::DeployCode(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <Hoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::Hoax0(decoded));
            }
            if let Ok(decoded) = <Hoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::Hoax2(decoded));
            }
            if let Ok(decoded) = <Hoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::Hoax3(decoded));
            }
            if let Ok(decoded) = <Hoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::Hoax4(decoded));
            }
            if let Ok(decoded) = <RewindCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::Rewind(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) = <SkipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AdminTestCalls::Skip(decoded));
            }
            if let Ok(decoded) =
                <StartHoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::StartHoax1(decoded));
            }
            if let Ok(decoded) =
                <StartHoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::StartHoax2(decoded));
            }
            if let Ok(decoded) =
                <StartHoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::StartHoax0(decoded));
            }
            if let Ok(decoded) =
                <StartHoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::StartHoax4(decoded));
            }
            if let Ok(decoded) =
                <TestMaxFeePctChangeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::TestMaxFeePctChange(decoded));
            }
            if let Ok(decoded) =
                <TestThresholdChangeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::TestThresholdChange(decoded));
            }
            if let Ok(decoded) =
                <TestTokenWhitelistCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(AdminTestCalls::TestTokenWhitelist(decoded));
            }
            if let Ok(decoded) = <TipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AdminTestCalls::Tip(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(AdminTestCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for AdminTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                AdminTestCalls::IsTest(element) => element.encode(),
                AdminTestCalls::Bound(element) => element.encode(),
                AdminTestCalls::DealWithToken(element) => element.encode(),
                AdminTestCalls::DealWithTokenAndAdjust(element) => element.encode(),
                AdminTestCalls::Deal(element) => element.encode(),
                AdminTestCalls::DeployCodeWithArgs(element) => element.encode(),
                AdminTestCalls::DeployCode(element) => element.encode(),
                AdminTestCalls::Failed(element) => element.encode(),
                AdminTestCalls::Hoax0(element) => element.encode(),
                AdminTestCalls::Hoax2(element) => element.encode(),
                AdminTestCalls::Hoax3(element) => element.encode(),
                AdminTestCalls::Hoax4(element) => element.encode(),
                AdminTestCalls::Rewind(element) => element.encode(),
                AdminTestCalls::SetUp(element) => element.encode(),
                AdminTestCalls::Skip(element) => element.encode(),
                AdminTestCalls::StartHoax1(element) => element.encode(),
                AdminTestCalls::StartHoax2(element) => element.encode(),
                AdminTestCalls::StartHoax0(element) => element.encode(),
                AdminTestCalls::StartHoax4(element) => element.encode(),
                AdminTestCalls::TestMaxFeePctChange(element) => element.encode(),
                AdminTestCalls::TestThresholdChange(element) => element.encode(),
                AdminTestCalls::TestTokenWhitelist(element) => element.encode(),
                AdminTestCalls::Tip(element) => element.encode(),
                AdminTestCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for AdminTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                AdminTestCalls::IsTest(element) => element.fmt(f),
                AdminTestCalls::Bound(element) => element.fmt(f),
                AdminTestCalls::DealWithToken(element) => element.fmt(f),
                AdminTestCalls::DealWithTokenAndAdjust(element) => element.fmt(f),
                AdminTestCalls::Deal(element) => element.fmt(f),
                AdminTestCalls::DeployCodeWithArgs(element) => element.fmt(f),
                AdminTestCalls::DeployCode(element) => element.fmt(f),
                AdminTestCalls::Failed(element) => element.fmt(f),
                AdminTestCalls::Hoax0(element) => element.fmt(f),
                AdminTestCalls::Hoax2(element) => element.fmt(f),
                AdminTestCalls::Hoax3(element) => element.fmt(f),
                AdminTestCalls::Hoax4(element) => element.fmt(f),
                AdminTestCalls::Rewind(element) => element.fmt(f),
                AdminTestCalls::SetUp(element) => element.fmt(f),
                AdminTestCalls::Skip(element) => element.fmt(f),
                AdminTestCalls::StartHoax1(element) => element.fmt(f),
                AdminTestCalls::StartHoax2(element) => element.fmt(f),
                AdminTestCalls::StartHoax0(element) => element.fmt(f),
                AdminTestCalls::StartHoax4(element) => element.fmt(f),
                AdminTestCalls::TestMaxFeePctChange(element) => element.fmt(f),
                AdminTestCalls::TestThresholdChange(element) => element.fmt(f),
                AdminTestCalls::TestTokenWhitelist(element) => element.fmt(f),
                AdminTestCalls::Tip(element) => element.fmt(f),
                AdminTestCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for AdminTestCalls {
        fn from(var: IsTestCall) -> Self {
            AdminTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<BoundCall> for AdminTestCalls {
        fn from(var: BoundCall) -> Self {
            AdminTestCalls::Bound(var)
        }
    }
    impl ::std::convert::From<DealWithTokenCall> for AdminTestCalls {
        fn from(var: DealWithTokenCall) -> Self {
            AdminTestCalls::DealWithToken(var)
        }
    }
    impl ::std::convert::From<DealWithTokenAndAdjustCall> for AdminTestCalls {
        fn from(var: DealWithTokenAndAdjustCall) -> Self {
            AdminTestCalls::DealWithTokenAndAdjust(var)
        }
    }
    impl ::std::convert::From<DealCall> for AdminTestCalls {
        fn from(var: DealCall) -> Self {
            AdminTestCalls::Deal(var)
        }
    }
    impl ::std::convert::From<DeployCodeWithArgsCall> for AdminTestCalls {
        fn from(var: DeployCodeWithArgsCall) -> Self {
            AdminTestCalls::DeployCodeWithArgs(var)
        }
    }
    impl ::std::convert::From<DeployCodeCall> for AdminTestCalls {
        fn from(var: DeployCodeCall) -> Self {
            AdminTestCalls::DeployCode(var)
        }
    }
    impl ::std::convert::From<FailedCall> for AdminTestCalls {
        fn from(var: FailedCall) -> Self {
            AdminTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<Hoax0Call> for AdminTestCalls {
        fn from(var: Hoax0Call) -> Self {
            AdminTestCalls::Hoax0(var)
        }
    }
    impl ::std::convert::From<Hoax2Call> for AdminTestCalls {
        fn from(var: Hoax2Call) -> Self {
            AdminTestCalls::Hoax2(var)
        }
    }
    impl ::std::convert::From<Hoax3Call> for AdminTestCalls {
        fn from(var: Hoax3Call) -> Self {
            AdminTestCalls::Hoax3(var)
        }
    }
    impl ::std::convert::From<Hoax4Call> for AdminTestCalls {
        fn from(var: Hoax4Call) -> Self {
            AdminTestCalls::Hoax4(var)
        }
    }
    impl ::std::convert::From<RewindCall> for AdminTestCalls {
        fn from(var: RewindCall) -> Self {
            AdminTestCalls::Rewind(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for AdminTestCalls {
        fn from(var: SetUpCall) -> Self {
            AdminTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<SkipCall> for AdminTestCalls {
        fn from(var: SkipCall) -> Self {
            AdminTestCalls::Skip(var)
        }
    }
    impl ::std::convert::From<StartHoax1Call> for AdminTestCalls {
        fn from(var: StartHoax1Call) -> Self {
            AdminTestCalls::StartHoax1(var)
        }
    }
    impl ::std::convert::From<StartHoax2Call> for AdminTestCalls {
        fn from(var: StartHoax2Call) -> Self {
            AdminTestCalls::StartHoax2(var)
        }
    }
    impl ::std::convert::From<StartHoax0Call> for AdminTestCalls {
        fn from(var: StartHoax0Call) -> Self {
            AdminTestCalls::StartHoax0(var)
        }
    }
    impl ::std::convert::From<StartHoax4Call> for AdminTestCalls {
        fn from(var: StartHoax4Call) -> Self {
            AdminTestCalls::StartHoax4(var)
        }
    }
    impl ::std::convert::From<TestMaxFeePctChangeCall> for AdminTestCalls {
        fn from(var: TestMaxFeePctChangeCall) -> Self {
            AdminTestCalls::TestMaxFeePctChange(var)
        }
    }
    impl ::std::convert::From<TestThresholdChangeCall> for AdminTestCalls {
        fn from(var: TestThresholdChangeCall) -> Self {
            AdminTestCalls::TestThresholdChange(var)
        }
    }
    impl ::std::convert::From<TestTokenWhitelistCall> for AdminTestCalls {
        fn from(var: TestTokenWhitelistCall) -> Self {
            AdminTestCalls::TestTokenWhitelist(var)
        }
    }
    impl ::std::convert::From<TipCall> for AdminTestCalls {
        fn from(var: TipCall) -> Self {
            AdminTestCalls::Tip(var)
        }
    }
    impl ::std::convert::From<VmCall> for AdminTestCalls {
        fn from(var: VmCall) -> Self {
            AdminTestCalls::Vm(var)
        }
    }
}
