pub use base_book_fixture::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod base_book_fixture {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "BaseBookFixture was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    # [rustfmt :: skip] const __ABI : & str = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"FeePctSet\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeBondPct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeRebatePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"relayerRefundPct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ParamsCombinationSet\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSafeBlockThreshold\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"SafeBlockThresholdSet\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeCancelled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"disputeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"answer\",\"type\":\"bool\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeDisputeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"disputeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeDisputed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeFilled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeRequested\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]" ;
    #[doc = r" The parsed JSON-ABI of the contract."]
    pub static BASEBOOKFIXTURE_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers::core::utils::__serde_json::from_str(__ABI).expect("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static BASEBOOKFIXTURE_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060408190526000805462ff00ff1916620100011790556001625e79b760e01b031990527f81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a608452737109709ecfa91a80626ff3989d68f67f5b1dd12d63ffa1864960a46020604051808303816000875af115801562000084573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000aa919062000402565b600880546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b66004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156200013f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000165919062000402565b600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f9791f723bf26b668c8cac0664b66d058cdb2a424cfb08c05dd9da570be0eff6f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015620001fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000220919062000402565b600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002a773a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48604051806040016040528060048152602001635553444360e01b815250604051806040016040528060048152602001635553444360e01b81525060066200038a60201b60201c565b600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200033773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518060400160405280600d81526020016c2bb930b83832b21022ba3432b960991b815250604051806040016040528060048152602001630ae8aa8960e31b81525060126200038a60201b60201c565b600c60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606460105560146011556014601255603c60135560646014553480156200038357600080fd5b50620004b9565b60006001600160a01b0385163b8015620003a85785915050620003ec565b6000858585604051620003bb90620003f4565b620003c9939291906200047c565b604051809103906000f080158015620003e6573d6000803e3d6000fd5b50925050505b949350505050565b610b818062004c7283390190565b6000602082840312156200041557600080fd5b81516001600160a01b03811681146200042d57600080fd5b9392505050565b6000815180845260005b818110156200045c576020818501810151868301820152016200043e565b506000602082860101526020601f19601f83011685010191505092915050565b60608152600062000491606083018662000434565b8281036020840152620004a5818662000434565b91505060ff83166040830152949350505050565b6147a980620004c96000396000f3fe60806040523480156200001157600080fd5b50600436106200005e5760003560e01c80630a9254e414620000635780633a768463146200006f578063ba414fa614620000a3578063f8ccbf4714620000be578063fa7626d414620000d2575b600080fd5b6200006d620000e0565b005b620000866000805160206200475483398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b620000ad62000207565b60405190151581526020016200009a565b600054620000ad9062010000900460ff1681565b600054620000ad9060ff1681565b620000ea62000332565b600d546010546011546012546013546014546040516001600160a01b0390961695620001169062000d52565b6001600160a01b039096168652602086019490945260408501929092526060840152608083015260a082015260c001604051809103906000f08015801562000162573d6000803e3d6000fd5b50600f80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b81526004808201939093526024810191909152604481019190915263426f6f6b60e01b6064820152600080516020620047548339815191529063c657c718906084015b600060405180830381600087803b158015620001ec57600080fd5b505af115801562000201573d6000803e3d6000fd5b50505050565b60008054610100900460ff1615620002285750600054610100900460ff1690565b6000600080516020620047548339815191523b156200032d576040805160008051602062004754833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091620002af917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800162000dae565b60408051601f1981840301815290829052620002cb9162000dd4565b6000604051808303816000865af19150503d80600081146200030a576040519150601f19603f3d011682016040523d82523d6000602084013e6200030f565b606091505b509150508080602001905181019062000329919062000de9565b9150505b919050565b6200033c62000b68565b6040516200034a9062000d60565b604051809103906000f08015801562000367573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b03929092169182179055604051620003959062000d6e565b6001600160a01b039091168152602001604051809103906000f080158015620003c2573d6000803e3d6000fd5b50600e80546001600160a01b0319166001600160a01b03928316908117909155600d54604051637adbf97360e01b8152600481019290925290911690637adbf97390602401600060405180830381600087803b1580156200042257600080fd5b505af115801562000437573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116925063095ea7b391506044016020604051808303816000875af115801562000492573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004b8919062000de9565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af115801562000510573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000536919062000de9565b50600e54604080516318caf8e360e31b81526001600160a01b0390921660048301526024820152601060448201526f416c6c4b6e6f77696e674f7261636c6560801b6064820152600080516020620047548339815191529063c657c71890608401600060405180830381600087803b158015620005b257600080fd5b505af1158015620005c7573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206200475483398151915292506306447d569150602401600060405180830381600087803b1580156200062057600080fd5b505af115801562000635573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116925063095ea7b391506044016020604051808303816000875af115801562000690573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006b6919062000de9565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af11580156200070e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000734919062000de9565b50604080516390c5013b60e01b8152905160008051602062004754833981519152916390c5013b91600480830192600092919082900301818387803b1580156200077d57600080fd5b505af115801562000792573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206200475483398151915292506306447d569150602401600060405180830381600087803b158015620007eb57600080fd5b505af115801562000800573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116925063095ea7b391506044016020604051808303816000875af11580156200085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000881919062000de9565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015620008d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008ff919062000de9565b50604080516390c5013b60e01b8152905160008051602062004754833981519152916390c5013b91600480830192600092919082900301818387803b1580156200094857600080fd5b505af11580156200095d573d6000803e3d6000fd5b5050600a546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206200475483398151915292506306447d569150602401600060405180830381600087803b158015620009b657600080fd5b505af1158015620009cb573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116925063095ea7b391506044016020604051808303816000875af115801562000a26573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a4c919062000de9565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af115801562000aa4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000aca919062000de9565b50604080516390c5013b60e01b8152905160008051602062004754833981519152916390c5013b91600480830192600092919082900301818387803b15801562000b1357600080fd5b505af115801562000b28573d6000803e3d6000fd5b5050600e54600a5460405163194f29df60e11b81526001600160a01b039182166004820152600160248201529116925063329e53be9150604401620001d1565b600854604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526005604482015264416c69636560d81b6064820152600080516020620047548339815191529063c657c71890608401600060405180830381600087803b15801562000bd857600080fd5b505af115801562000bed573d6000803e3d6000fd5b5050600954604080516318caf8e360e31b81526001600160a01b039092166004830152602482015260036044820152622137b160e91b606482015260008051602062004754833981519152925063c657c7189150608401600060405180830381600087803b15801562000c5f57600080fd5b505af115801562000c74573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526007604482015266436861726c696560c81b606482015260008051602062004754833981519152925063c657c7189150608401600060405180830381600087803b15801562000cea57600080fd5b505af115801562000cff573d6000803e3d6000fd5b5050604080516318caf8e360e31b815230600482015260248101919091526003604482015262596f7560e81b606482015260008051602062004754833981519152925063c657c7189150608401620001d1565b611b4c8062000e0e83390190565b610a43806200295a83390190565b6113b7806200339d83390190565b6000815160005b8181101562000d9f576020818501810151868301520162000d83565b50600093019283525090919050565b6001600160e01b031983168152600062000dcc600483018462000d7c565b949350505050565b600062000de2828462000d7c565b9392505050565b60006020828403121562000dfc57600080fd5b8151801515811462000de257600080fdfe610160604052600080553480156200001657600080fd5b5060405162001b4c38038062001b4c83398101604081905262000039916200020e565b6001600160a01b03861661012081905260408051630175727b60e51b81529051632eae4f60916004808201926020929091908290030181865afa15801562000085573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ab919062000264565b6001600160a01b03166101405260808590526040518581527f882885d0e4612a71677644a9d70e58ca05fc5a1ea1b0875f6e46c315241bfe149060200160405180910390a1620000fd848484620001b6565b60a084905260c083905260e082905260408051858152602081018590529081018390527f8be1eb1cba497386c77933500158ebaaef9e51125fa5ebdfaa92139d320d43299060600160405180910390a16109c4811115620001715760405163b768880160e01b815260040160405180910390fd5b6101008190526040518181527f9e67c173f0d1bf66a955764a6b072d74e095af185e539f9f6570fb91d788fca59060200160405180910390a1505050505050620002b3565b80620001c383856200028b565b620001cf91906200028b565b606414620001f057604051639327bc8760e01b815260040160405180910390fd5b505050565b6001600160a01b03811681146200020b57600080fd5b50565b60008060008060008060c087890312156200022857600080fd5b86516200023581620001f5565b6020880151604089015160608a015160808b015160a0909b0151939c929b509099909850965090945092505050565b6000602082840312156200027757600080fd5b81516200028481620001f5565b9392505050565b80820180821115620002ad57634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a05160c05160e0516101005161012051610140516117e36200036960003960008181610247015281816104270152818161049d015281816105e3015261078b01526000818161020801528181610f7a015261102c015260006102b40152600081816101ce0152818161072f0152610bde0152600081816102db01526107f8015260008181610177015281816103d3015261044a01526000818161012a01528181610b710152610d0801526117e36000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80637dc0d1d0116100a2578063a02cf93711610071578063a02cf937146102af578063c16402bb146102d6578063cd805d5e146102fd578063d70e3dfd14610306578063e66a34ee1461032f57600080fd5b80637dc0d1d0146102425780638b2cdb9d146102695780639170c05b1461027c5780639501325f1461028f57600080fd5b806352ad0d5e116100de57806352ad0d5e1461019957806353906a59146101c9578063734d1627146101f05780637b1039991461020357600080fd5b806309796dff146101105780630ff0c00e146101255780632d7e8e1c1461015f578063391fe4e214610172575b600080fd5b61012361011e36600461133d565b610342565b005b61014c7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61012361016d3660046113b8565b610617565b61014c7f000000000000000000000000000000000000000000000000000000000000000081565b6101bc6101a736600461143d565b60036020526000908152604090205460ff1681565b604051610156919061146c565b61014c7f000000000000000000000000000000000000000000000000000000000000000081565b6101236101fe366004611494565b610780565b61022a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610156565b61022a7f000000000000000000000000000000000000000000000000000000000000000081565b61012361027736600461133d565b610909565b61012361028a3660046114e3565b6109ea565b61014c61029d36600461143d565b60016020526000908152604090205481565b61014c7f000000000000000000000000000000000000000000000000000000000000000081565b61014c7f000000000000000000000000000000000000000000000000000000000000000081565b61014c60005481565b61022a61031436600461143d565b6002602052600090815260409020546001600160a01b031681565b61012361033d36600461133d565b610afe565b600061035388888888888888610c88565b60008181526001602052604081205491925081900361038d57604051630f70cbe360e41b8152600481018390526024015b60405180910390fd5b61039681610d00565b6103b357604051632fe1403160e21b815260040160405180910390fd5b6000828152600260205260408120546001600160a01b03169060646103f87f00000000000000000000000000000000000000000000000000000000000000008b611558565b6104029190611575565b905061040d84610d34565b6104226001600160a01b038c16333084610d6e565b6104997f000000000000000000000000000000000000000000000000000000000000000060647f00000000000000000000000000000000000000000000000000000000000000006104748d6002611558565b61047e9190611558565b6104889190611575565b6001600160a01b038e169190610ddf565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f7d3b58b84338f868f8e8e8e60405160200161050794939291909384526001600160a01b039283166020850152604084019190915216606082015260800190565b6040516020818303038152906040526040518663ffffffff1660e01b81526004016105369594939291906115e7565b6020604051808303816000875af1158015610555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105799190611622565b9050856001600160a01b031681887f611d2790eebc2dfbd3329eb8ce89302d94d2b42c489cfd3ba8dae42977a3f94286886040516105cc9291906001600160a01b03929092168252602082015260400190565b60405180910390a46106096001600160a01b038d167f00000000000000000000000000000000000000000000000000000000000000006000610ddf565b505050505050505050505050565b600061062889898989898989610c88565b9050600160008281526003602052604090205460ff16600281111561064f5761064f611456565b14610670576040516337d6ee8b60e11b815260048101829052602401610384565b858210156106915760405163122e33cf60e31b815260040160405180910390fd5b6000818152600160209081526040808320439055600280835281842080546001600160a01b031916339081179091556003845293829020805460ff19169091179055518481526001600160a01b03861692879290917f81f3dddde62cb8d590d391999bc1a4c362a03cf74718fb3bd8195b46fc1c1009910160405180910390a46107266001600160a01b038916338785610d6e565b600060646107547f00000000000000000000000000000000000000000000000000000000000000008a611558565b61075e9190611575565b90506107746001600160a01b038b163383610ef9565b50505050505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107cb5760405163347b0c3360e11b8152336004820152602401610384565b60008080806107dd60e086018661163b565b8101906107ea9190611689565b9350935093509350600060647f0000000000000000000000000000000000000000000000000000000000000000866108229190611558565b61082c9190611575565b90506001600160a01b03821687847ff27fbe6db06bb8ac8a2b4206eef25be7c007d9fd8d53a772c5ffa4d7487952b261086b60408b0160208c016116d3565b61087b60e08c0160c08d01611705565b604080516001600160a01b03909316835290151560208301520160405180910390a46108ad60e0870160c08801611705565b156108eb576108e66108c560408801602089016116d3565b826108d660808a0160608b016116d3565b6001600160a01b03169190610ef9565b610900565b61090084826108d660808a0160608b016116d3565b50505050505050565b336001600160a01b0382161461093257604051630e020a8960e31b815260040160405180910390fd5b600061094388888888888888610c88565b9050600160008281526003602052604090205460ff16600281111561096a5761096a611456565b1461098b5760405163069572a960e21b815260048101829052602401610384565b61099481610d34565b816001600160a01b031681847f4aaea9d289fcf796ee2d93ab7730c9a0afa79d03debf6528dd7f13a83613b7f460405160405180910390a46109e06001600160a01b0389168388610ef9565b5050505050505050565b6109f48585610f29565b8215806109ff575081155b15610a1d576040516305dc4f8360e21b815260040160405180910390fd5b6001600160a01b038116610a44576040516325f5bdf760e21b815260040160405180910390fd5b600054604080516001600160a01b0387811682526020820187905291810185905283821660608201523392918816907f8a923a6574cd5d908fa4e840c47fb64b874b2116a88d073e5fdbd834033932769060800160405180910390a46000610ab3868686868660005433610c88565b6000818152600360205260408120805460ff19166001179055805491925080610adb83611722565b90915550610af690506001600160a01b038716333087610d6e565b505050505050565b6000610b0f88888888888888610c88565b600081815260016020526040812054919250819003610b4457604051630f70cbe360e41b815260048101839052602401610384565b610b4d81610d00565b15610bb457600082815260016020526040812054610b6b904361173b565b610b95907f000000000000000000000000000000000000000000000000000000000000000061173b565b905080604051637be8522f60e01b815260040161038491815260200190565b6000828152600260205260409020546001600160a01b0316610bd583610d34565b60006064610c037f00000000000000000000000000000000000000000000000000000000000000008261173b565b610c0d908b611558565b610c179190611575565b9050846001600160a01b031686836001600160a01b03167fdeb6ee1bbbaaac1d6b7873a679d462110dd54d72915436622cc00525c2561cab86604051610c5f91815260200190565b60405180910390a4610c7b6001600160a01b038c168383610ef9565b5050505050505050505050565b6040516bffffffffffffffffffffffff19606089811b8216602084015288811b82166034840152604883018890526068830187905285811b82166088840152609c830185905283901b1660bc82015260009060d001604051602081830303815290604052805190602001209050979650505050505050565b6000610d2c827f000000000000000000000000000000000000000000000000000000000000000061174e565b431092915050565b60009081526001602090815260408083208390556002825280832080546001600160a01b031916905560039091529020805460ff19169055565b6040516001600160a01b0380851660248301528316604482015260648101829052610dd99085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526110c3565b50505050565b801580610e595750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e579190611622565b155b610ec45760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610384565b6040516001600160a01b038316602482015260448101829052610ef490849063095ea7b360e01b90606401610da2565b505050565b6040516001600160a01b038316602482015260448101829052610ef490849063a9059cbb60e01b90606401610da2565b806001600160a01b0316826001600160a01b031603610f5b57604051636f8f06d360e01b815260040160405180910390fd5b60405163b5af090f60e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063b5af090f90602401602060405180830381865afa158015610fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe59190611761565b61100d576040516378abcf6760e11b81526001600160a01b0383166004820152602401610384565b60405163b5af090f60e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063b5af090f90602401602060405180830381865afa158015611073573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110979190611761565b6110bf576040516378abcf6760e11b81526001600160a01b0382166004820152602401610384565b5050565b6000611118826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166111959092919063ffffffff16565b805190915015610ef457808060200190518101906111369190611761565b610ef45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610384565b60606111a484846000856111ac565b949350505050565b60608247101561120d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610384565b600080866001600160a01b03168587604051611229919061177e565b60006040518083038185875af1925050503d8060008114611266576040519150601f19603f3d011682016040523d82523d6000602084013e61126b565b606091505b509150915061127c87838387611287565b979650505050505050565b606083156112f65782516000036112ef576001600160a01b0385163b6112ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610384565b50816111a4565b6111a4838381511561130b5781518083602001fd5b8060405162461bcd60e51b8152600401610384919061179a565b6001600160a01b038116811461133a57600080fd5b50565b600080600080600080600060e0888a03121561135857600080fd5b873561136381611325565b9650602088013561137381611325565b95506040880135945060608801359350608088013561139181611325565b925060a0880135915060c08801356113a881611325565b8091505092959891949750929550565b600080600080600080600080610100898b0312156113d557600080fd5b88356113e081611325565b975060208901356113f081611325565b96506040890135955060608901359450608089013561140e81611325565b935060a0890135925060c089013561142581611325565b8092505060e089013590509295985092959890939650565b60006020828403121561144f57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016003831061148e57634e487b7160e01b600052602160045260246000fd5b91905290565b600080604083850312156114a757600080fd5b82359150602083013567ffffffffffffffff8111156114c557600080fd5b830161010081860312156114d857600080fd5b809150509250929050565b600080600080600060a086880312156114fb57600080fd5b853561150681611325565b9450602086013561151681611325565b93506040860135925060608601359150608086013561153481611325565b809150509295509295909350565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761156f5761156f611542565b92915050565b60008261159257634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156115b257818101518382015260200161159a565b50506000910152565b600081518084526115d3816020860160208601611597565b601f01601f19169290920160200192915050565b6001600160a01b0386811682528581166020830152841660408201526060810183905260a06080820181905260009061127c908301846115bb565b60006020828403121561163457600080fd5b5051919050565b6000808335601e1984360301811261165257600080fd5b83018035915067ffffffffffffffff82111561166d57600080fd5b60200191503681900382131561168257600080fd5b9250929050565b6000806000806080858703121561169f57600080fd5b8435935060208501356116b181611325565b92506040850135915060608501356116c881611325565b939692955090935050565b6000602082840312156116e557600080fd5b81356116f081611325565b9392505050565b801515811461133a57600080fd5b60006020828403121561171757600080fd5b81356116f0816116f7565b60006001820161173457611734611542565b5060010190565b8181038181111561156f5761156f611542565b8082018082111561156f5761156f611542565b60006020828403121561177357600080fd5b81516116f0816116f7565b60008251611790818460208701611597565b9190910192915050565b6020815260006116f060208301846115bb56fea264697066735822122049b963fbdaa0e416cf20094ae74e607c663af49a12df7bddb5ca3f39533846ca64736f6c63430008110033608060405234801561001057600080fd5b5061001a3361001f565b610096565b600180546001600160a01b031916905561004381610046602090811b61040417901c565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61099e806100a56000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80637adbf973116100715780637adbf973146101365780638da5cb5b14610149578063b5af090f1461015a578063dfdc49621461017d578063e30c397814610193578063f2fde38b146101a457600080fd5b80630ffb1d8b146100b95780632eae4f60146100ce57806339063c63146100fe5780635e1762a014610111578063715018a61461012657806379ba50971461012e575b600080fd5b6100cc6100c7366004610788565b6101b7565b005b6004546100e1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cc61010c366004610809565b6101cd565b61011961026f565b6040516100f59190610875565b6100cc610280565b6100cc610294565b6100cc6101443660046108c2565b610313565b6000546001600160a01b03166100e1565b61016d6101683660046108c2565b610365565b60405190151581526020016100f5565b610185610387565b6040519081526020016100f5565b6001546001600160a01b03166100e1565b6100cc6101b23660046108c2565b610393565b6101bf610454565b6101c982826104ae565b5050565b6101d5610454565b8281146101f55760405163046a41b360e31b815260040160405180910390fd5b60005b8381101561026857610256858583818110610215576102156108df565b905060200201602081019061022a91906108c2565b84848481811061023c5761023c6108df565b905060200201602081019061025191906108f5565b6104ae565b8061026081610926565b9150506101f8565b5050505050565b606061027b600261055f565b905090565b610288610454565b6102926000610573565b565b60015433906001600160a01b031681146103075760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b61031081610573565b50565b61031b610454565b600480546001600160a01b0319166001600160a01b0383169081179091556040517f0e05ae75e8b926552cf6fcd744d19f422561e3ced1e426868730852702dbe41890600090a250565b6001600160a01b03811660009081526003602052604081205415155b92915050565b600061027b600261058c565b61039b610454565b600180546001600160a01b0383166001600160a01b031990911681179091556103cc6000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146102925760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102fe565b80156104e75760006104c1600284610596565b9050806104e15760405163f6d9d35960e01b815260040160405180910390fd5b50610516565b60006104f46002846105ab565b90508061051457604051630ecc952760e01b815260040160405180910390fd5b505b816001600160a01b03167fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d9282604051610553911515815260200190565b60405180910390a25050565b6060600061056c836105c0565b9392505050565b600180546001600160a01b031916905561031081610404565b6000610381825490565b600061056c836001600160a01b03841661061c565b600061056c836001600160a01b03841661066b565b60608160000180548060200260200160405190810160405280929190818152602001828054801561061057602002820191906000526020600020905b8154815260200190600101908083116105fc575b50505050509050919050565b600081815260018301602052604081205461066357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610381565b506000610381565b6000818152600183016020526040812054801561075457600061068f60018361093f565b85549091506000906106a39060019061093f565b90508181146107085760008660000182815481106106c3576106c36108df565b90600052602060002001549050808760000184815481106106e6576106e66108df565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061071957610719610952565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610381565b6000915050610381565b6001600160a01b038116811461031057600080fd5b8035801515811461078357600080fd5b919050565b6000806040838503121561079b57600080fd5b82356107a68161075e565b91506107b460208401610773565b90509250929050565b60008083601f8401126107cf57600080fd5b50813567ffffffffffffffff8111156107e757600080fd5b6020830191508360208260051b850101111561080257600080fd5b9250929050565b6000806000806040858703121561081f57600080fd5b843567ffffffffffffffff8082111561083757600080fd5b610843888389016107bd565b9096509450602087013591508082111561085c57600080fd5b50610869878288016107bd565b95989497509550505050565b6020808252825182820181905260009190848201906040850190845b818110156108b65783516001600160a01b031683529284019291840191600101610891565b50909695505050505050565b6000602082840312156108d457600080fd5b813561056c8161075e565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561090757600080fd5b61056c82610773565b634e487b7160e01b600052601160045260246000fd5b60006001820161093857610938610910565b5060010190565b8181038181111561038157610381610910565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220f33fce1fbb013bb3338152c4a9620b66780a7b32aed51582ec0c450a77e7340364736f6c6343000811003360a060405234801561001057600080fd5b506040516113b73803806113b783398101604081905261002f916100da565b61003833610063565b336000908152600360205260409020805460ff191660011790556001600160a01b031660805261010a565b600180546001600160a01b03191690556100878161008a602090811b61086d17901c565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100ec57600080fd5b81516001600160a01b038116811461010357600080fd5b9392505050565b608051611293610124600039600060e301526112936000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063c70a900f11610071578063c70a900f1461015a578063e30c39781461018d578063e6717ce71461019e578063f2fde38b146101bf578063f7d3b58b146101d2578063fc361c38146101e557600080fd5b8063329e53be146100b9578063715018a6146100ce57806379ba5097146100d65780637b103999146100de5780638da5cb5b146101225780639d86698514610133575b600080fd5b6100cc6100c7366004610cc4565b6101f8565b005b6100cc61025f565b6100cc610273565b6101057f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546001600160a01b0316610105565b610146610141366004610cfb565b6102f2565b604051610119989796959493929190610d9c565b61017d610168366004610e02565b60036020526000908152604090205460ff1681565b6040519015158152602001610119565b6001546001600160a01b0316610105565b6101b16101ac366004610e24565b6103d8565b604051908152602001610119565b6100cc6101cd366004610e02565b6103f1565b6101b16101e0366004610e80565b610462565b6100cc6101f3366004610f2d565b6106c0565b6102006108bd565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f8cc72bec7e2cf5979aefd933f40a28eb590098d522a5c458e497e71c5e6fa90f910160405180910390a25050565b6102676108bd565b6102716000610917565b565b60015433906001600160a01b031681146102e65760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b6102ef81610917565b50565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006860180546001600160a01b03968716988716979587169690941694929360ff808416946101009094041692919061035590610f52565b80601f016020809104026020016040519081016040528092919081815260200182805461038190610f52565b80156103ce5780601f106103a3576101008083540402835291602001916103ce565b820191906000526020600020905b8154815290600101906020018083116103b157829003601f168201915b5050505050905088565b60006103e78686868686610930565b9695505050505050565b6103f96108bd565b600180546001600160a01b0383166001600160a01b0319909116811790915561042a6000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60006104713388888888610930565b90506000808281526002602081905260409091206005015460ff169081111561049c5761049c610d14565b146104bd5760405163d5e880e960e01b8152600481018290526024016102dd565b6000604051806101000160405280336001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b031681526020018681526020016001600281111561052057610520610d14565b815260200160001515815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505084815260026020818152604092839020855181546001600160a01b03199081166001600160a01b039283161783559287015160018084018054861692841692909217909155948701518285018054851691831691909117905560608701516003830180549094169116179091556080850151600482015560a085015160058201805496975087969295509093909260ff1990921691849081111561060c5761060c610d14565b021790555060c08201516005820180549115156101000261ff001990921691909117905560e082015160068201906106449082610ff0565b5050604080516001600160a01b03898116825260208201899052808b1693508b169185917f2609e116ca576195fecb47831f147fd6fee721377e4d88fff48807f3e9442a42910160405180910390a46106b533306106a38860026110b0565b6001600160a01b038a16929190610998565b509695505050505050565b3360009081526003602052604090205460ff166106f0576040516314e9dd3960e31b815260040160405180910390fd5b600082815260026020819052604090912090600582015460ff16600281111561071b5761071b610d14565b0361073c5760405163b677167760e01b8152600481018490526024016102dd565b60008160040154600261074f91906110b0565b60058301805461ffff19166101008615159081029190911760021790915560405190815290915084907fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a282156107d157600182015460038301546107cc916001600160a01b03918216911683610a03565b6107f2565b600282015460038301546107f2916001600160a01b03918216911683610a03565b81546001600160a01b03163b1561086757815460405163734d162760e01b81526001600160a01b039091169063734d1627906108349087908690600401611158565b600060405180830381600087803b15801561084e57600080fd5b505af1158015610862573d6000803e3d6000fd5b505050505b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146102715760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102dd565b600180546001600160a01b03191690556102ef8161086d565b6040516bffffffffffffffffffffffff19606087811b8216602084015286811b8216603484015285811b8216604884015284901b16605c8201526070810182905260009060900160405160208183030381529060405280519060200120905095945050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526108679085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610a38565b6040516001600160a01b038316602482015260448101829052610a3390849063a9059cbb60e01b906064016109cc565b505050565b6000610a8d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b0a9092919063ffffffff16565b805190915015610a335780806020019051810190610aab9190611211565b610a335760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102dd565b6060610b198484600085610b21565b949350505050565b606082471015610b825760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102dd565b600080866001600160a01b03168587604051610b9e919061122e565b60006040518083038185875af1925050503d8060008114610bdb576040519150601f19603f3d011682016040523d82523d6000602084013e610be0565b606091505b5091509150610bf187838387610bfc565b979650505050505050565b60608315610c6b578251600003610c64576001600160a01b0385163b610c645760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102dd565b5081610b19565b610b198383815115610c805781518083602001fd5b8060405162461bcd60e51b81526004016102dd919061124a565b80356001600160a01b0381168114610cb157600080fd5b919050565b80151581146102ef57600080fd5b60008060408385031215610cd757600080fd5b610ce083610c9a565b91506020830135610cf081610cb6565b809150509250929050565b600060208284031215610d0d57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60038110610d4857634e487b7160e01b600052602160045260246000fd5b9052565b60005b83811015610d67578181015183820152602001610d4f565b50506000910152565b60008151808452610d88816020860160208601610d4c565b601f01601f19169290920160200192915050565b6001600160a01b0389811682528881166020830152878116604083015286166060820152608081018590526000610100610dd960a0840187610d2a565b84151560c08401528060e0840152610df381840185610d70565b9b9a5050505050505050505050565b600060208284031215610e1457600080fd5b610e1d82610c9a565b9392505050565b600080600080600060a08688031215610e3c57600080fd5b610e4586610c9a565b9450610e5360208701610c9a565b9350610e6160408701610c9a565b9250610e6f60608701610c9a565b949793965091946080013592915050565b60008060008060008060a08789031215610e9957600080fd5b610ea287610c9a565b9550610eb060208801610c9a565b9450610ebe60408801610c9a565b935060608701359250608087013567ffffffffffffffff80821115610ee257600080fd5b818901915089601f830112610ef657600080fd5b813581811115610f0557600080fd5b8a6020828501011115610f1757600080fd5b6020830194508093505050509295509295509295565b60008060408385031215610f4057600080fd5b823591506020830135610cf081610cb6565b600181811c90821680610f6657607f821691505b602082108103610f8657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f821115610a3357600081815260208120601f850160051c81016020861015610fc95750805b601f850160051c820191505b81811015610fe857828155600101610fd5565b505050505050565b815167ffffffffffffffff81111561100a5761100a610f8c565b61101e816110188454610f52565b84610fa2565b602080601f831160018114611053576000841561103b5750858301515b600019600386901b1c1916600185901b178555610fe8565b600085815260208120601f198616915b8281101561108257888601518255948401946001909101908401611063565b50858210156110a05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820281158282048414176110d557634e487b7160e01b600052601160045260246000fd5b92915050565b600081546110e881610f52565b808552602060018381168015611105576001811461111f5761114d565b60ff1985168884015283151560051b88018301955061114d565b866000528260002060005b858110156111455781548a820186015290830190840161112a565b890184019650505b505050505092915050565b828152604060208201526111876040820161117a84546001600160a01b031690565b6001600160a01b03169052565b600061119d60018401546001600160a01b031690565b6001600160a01b03908116606084015260028401548116608084015260038401541660a0830152600483015460c083015260058301546111e360e0840160ff8316610d2a565b6101006111f981850160ff8460081c1615159052565b61012084015250610b196101408301600685016110db565b60006020828403121561122357600080fd5b8151610e1d81610cb6565b60008251611240818460208701610d4c565b9190910192915050565b602081526000610e1d6020830184610d7056fea2646970667358221220de6cdf94fa620eb9254400f444d9701ad6c7acd3b7b709b96fc7782b978df81264736f6c634300081100330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220862bc5c18270d1eba8cd59f973b3b7621594df697dd77043f997d149bd62f09c64736f6c6343000811003360806040523480156200001157600080fd5b5060405162000b8138038062000b81833981016040819052620000349162000139565b828260036200004483826200024d565b5060046200005382826200024d565b50506005805460ff191660ff93909316929092179091555062000319915050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200009c57600080fd5b81516001600160401b0380821115620000b957620000b962000074565b604051601f8301601f19908116603f01168101908282118183101715620000e457620000e462000074565b816040528381526020925086838588010111156200010157600080fd5b600091505b8382101562000125578582018301518183018401529082019062000106565b600093810190920192909252949350505050565b6000806000606084860312156200014f57600080fd5b83516001600160401b03808211156200016757600080fd5b62000175878388016200008a565b945060208601519150808211156200018c57600080fd5b506200019b868287016200008a565b925050604084015160ff81168114620001b357600080fd5b809150509250925092565b600181811c90821680620001d357607f821691505b602082108103620001f457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200024857600081815260208120601f850160051c81016020861015620002235750805b601f850160051c820191505b8181101562000244578281556001016200022f565b5050505b505050565b81516001600160401b0381111562000269576200026962000074565b62000281816200027a8454620001be565b84620001fa565b602080601f831160018114620002b95760008415620002a05750858301515b600019600386901b1c1916600185901b17855562000244565b600085815260208120601f198616915b82811015620002ea57888601518255948401946001909101908401620002c9565b5085821015620003095787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61085880620003296000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b4114610165578063a457c2d71461016d578063a9059cbb14610180578063dd62ed3e1461019357600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a6565b6040516100c391906106a2565b60405180910390f35b6100df6100da36600461070c565b610238565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610736565b610252565b60055460405160ff90911681526020016100c3565b6100df61013736600461070c565b610276565b6100f361014a366004610772565b6001600160a01b031660009081526020819052604090205490565b6100b6610298565b6100df61017b36600461070c565b6102a7565b6100df61018e36600461070c565b610327565b6100f36101a1366004610794565b610335565b6060600380546101b5906107c7565b80601f01602080910402602001604051908101604052809291908181526020018280546101e1906107c7565b801561022e5780601f106102035761010080835404028352916020019161022e565b820191906000526020600020905b81548152906001019060200180831161021157829003601f168201915b5050505050905090565b600033610246818585610360565b60019150505b92915050565b600033610260858285610484565b61026b8585856104fe565b506001949350505050565b6000336102468185856102898383610335565b6102939190610801565b610360565b6060600480546101b5906107c7565b600033816102b58286610335565b90508381101561031a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b61026b8286868403610360565b6000336102468185856104fe565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103c25760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610311565b6001600160a01b0382166104235760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610311565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006104908484610335565b905060001981146104f857818110156104eb5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610311565b6104f88484848403610360565b50505050565b6001600160a01b0383166105625760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610311565b6001600160a01b0382166105c45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610311565b6001600160a01b0383166000908152602081905260409020548181101561063c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610311565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36104f8565b600060208083528351808285015260005b818110156106cf578581018301518582016040015282016106b3565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461070757600080fd5b919050565b6000806040838503121561071f57600080fd5b610728836106f0565b946020939093013593505050565b60008060006060848603121561074b57600080fd5b610754846106f0565b9250610762602085016106f0565b9150604084013590509250925092565b60006020828403121561078457600080fd5b61078d826106f0565b9392505050565b600080604083850312156107a757600080fd5b6107b0836106f0565b91506107be602084016106f0565b90509250929050565b600181811c908216806107db57607f821691505b6020821081036107fb57634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561024c57634e487b7160e01b600052601160045260246000fdfea26469706673582212207f7e0c4487d1286b597b6591ebbe851f7c71c097323147ebff2391a65f1c373f64736f6c63430008110033" . parse () . expect ("invalid bytecode")
        });
    pub struct BaseBookFixture<M>(ethers::contract::Contract<M>);
    impl<M> Clone for BaseBookFixture<M> {
        fn clone(&self) -> Self {
            BaseBookFixture(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for BaseBookFixture<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for BaseBookFixture<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(BaseBookFixture))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> BaseBookFixture<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), BASEBOOKFIXTURE_ABI.clone(), client)
                .into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                BASEBOOKFIXTURE_ABI.clone(),
                BASEBOOKFIXTURE_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_SCRIPT` (0xf8ccbf47) function"]
        pub fn is_script(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([248, 204, 191, 71], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `FeePctSet` event"]
        pub fn fee_pct_set_filter(&self) -> ethers::contract::builders::Event<M, FeePctSetFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `ParamsCombinationSet` event"]
        pub fn params_combination_set_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, ParamsCombinationSetFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `SafeBlockThresholdSet` event"]
        pub fn safe_block_threshold_set_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, SafeBlockThresholdSetFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeCancelled` event"]
        pub fn trade_cancelled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeCancelledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputeSettled` event"]
        pub fn trade_dispute_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputed` event"]
        pub fn trade_disputed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeFilled` event"]
        pub fn trade_filled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeFilledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeRequested` event"]
        pub fn trade_requested_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeRequestedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeSettled` event"]
        pub fn trade_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_1_filter(&self) -> ethers::contract::builders::Event<M, LogArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_2_filter(&self) -> ethers::contract::builders::Event<M, LogArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_3_filter(&self) -> ethers::contract::builders::Event<M, LogArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_1_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_2_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_3_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, BaseBookFixtureEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for BaseBookFixture<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "FeePctSet", abi = "FeePctSet(uint256)")]
    pub struct FeePctSetFilter {
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "ParamsCombinationSet",
        abi = "ParamsCombinationSet(uint256,uint256,uint256)"
    )]
    pub struct ParamsCombinationSetFilter {
        pub dispute_bond_pct: ethers::core::types::U256,
        pub trade_rebate_pct: ethers::core::types::U256,
        pub relayer_refund_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "SafeBlockThresholdSet", abi = "SafeBlockThresholdSet(uint256)")]
    pub struct SafeBlockThresholdSetFilter {
        pub new_safe_block_threshold: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "TradeCancelled",
        abi = "TradeCancelled(uint256,bytes32,address)"
    )]
    pub struct TradeCancelledFilter {
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "TradeDisputeSettled",
        abi = "TradeDisputeSettled(address,uint256,bytes32,bool,address)"
    )]
    pub struct TradeDisputeSettledFilter {
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub dispute_id: [u8; 32],
        pub answer: bool,
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "TradeDisputed",
        abi = "TradeDisputed(address,uint256,bytes32,uint256,address)"
    )]
    pub struct TradeDisputedFilter {
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub dispute_id: [u8; 32],
        pub filled_at_block: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "TradeFilled",
        abi = "TradeFilled(address,uint256,uint256,address)"
    )]
    pub struct TradeFilledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "TradeRequested",
        abi = "TradeRequested(address,address,uint256,uint256,address,uint256,address)"
    )]
    pub struct TradeRequestedFilter {
        #[ethevent(indexed)]
        pub token_in: ethers::core::types::Address,
        pub token_out: ethers::core::types::Address,
        pub amount_in: ethers::core::types::U256,
        pub min_amount_out: ethers::core::types::U256,
        pub recipient: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "TradeSettled",
        abi = "TradeSettled(address,uint256,uint256,address)"
    )]
    pub struct TradeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        pub filled_at_block: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(uint256[])")]
    pub struct LogArray1Filter {
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(int256[])")]
    pub struct LogArray2Filter {
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(address[])")]
    pub struct LogArray3Filter {
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,uint256[])")]
    pub struct LogNamedArray1Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,int256[])")]
    pub struct LogNamedArray2Filter {
        pub key: String,
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,address[])")]
    pub struct LogNamedArray3Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum BaseBookFixtureEvents {
        FeePctSetFilter(FeePctSetFilter),
        ParamsCombinationSetFilter(ParamsCombinationSetFilter),
        SafeBlockThresholdSetFilter(SafeBlockThresholdSetFilter),
        TradeCancelledFilter(TradeCancelledFilter),
        TradeDisputeSettledFilter(TradeDisputeSettledFilter),
        TradeDisputedFilter(TradeDisputedFilter),
        TradeFilledFilter(TradeFilledFilter),
        TradeRequestedFilter(TradeRequestedFilter),
        TradeSettledFilter(TradeSettledFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogArray1Filter(LogArray1Filter),
        LogArray2Filter(LogArray2Filter),
        LogArray3Filter(LogArray3Filter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedArray1Filter(LogNamedArray1Filter),
        LogNamedArray2Filter(LogNamedArray2Filter),
        LogNamedArray3Filter(LogNamedArray3Filter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for BaseBookFixtureEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = FeePctSetFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::FeePctSetFilter(decoded));
            }
            if let Ok(decoded) = ParamsCombinationSetFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::ParamsCombinationSetFilter(decoded));
            }
            if let Ok(decoded) = SafeBlockThresholdSetFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::SafeBlockThresholdSetFilter(decoded));
            }
            if let Ok(decoded) = TradeCancelledFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::TradeCancelledFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputeSettledFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::TradeDisputeSettledFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputedFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::TradeDisputedFilter(decoded));
            }
            if let Ok(decoded) = TradeFilledFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::TradeFilledFilter(decoded));
            }
            if let Ok(decoded) = TradeRequestedFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::TradeRequestedFilter(decoded));
            }
            if let Ok(decoded) = TradeSettledFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::TradeSettledFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogArray1Filter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogArray1Filter(decoded));
            }
            if let Ok(decoded) = LogArray2Filter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogArray2Filter(decoded));
            }
            if let Ok(decoded) = LogArray3Filter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogArray3Filter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedArray1Filter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogNamedArray1Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray2Filter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogNamedArray2Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray3Filter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogNamedArray3Filter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(BaseBookFixtureEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for BaseBookFixtureEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                BaseBookFixtureEvents::FeePctSetFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::ParamsCombinationSetFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::SafeBlockThresholdSetFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::TradeCancelledFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::TradeDisputeSettledFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::TradeDisputedFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::TradeFilledFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::TradeRequestedFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::TradeSettledFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogAddressFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogArray1Filter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogArray2Filter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogArray3Filter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogBytesFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogBytes32Filter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogIntFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogNamedAddressFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogNamedArray1Filter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogNamedArray2Filter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogNamedArray3Filter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogNamedBytesFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogNamedIntFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogNamedStringFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogNamedUintFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogStringFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogUintFilter(element) => element.fmt(f),
                BaseBookFixtureEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "IS_SCRIPT", abi = "IS_SCRIPT()")]
    pub struct IsScriptCall;
    #[doc = "Container type for all input parameters for the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `setUp` function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum BaseBookFixtureCalls {
        IsScript(IsScriptCall),
        IsTest(IsTestCall),
        Failed(FailedCall),
        SetUp(SetUpCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for BaseBookFixtureCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <IsScriptCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(BaseBookFixtureCalls::IsScript(decoded));
            }
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(BaseBookFixtureCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(BaseBookFixtureCalls::Failed(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(BaseBookFixtureCalls::SetUp(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(BaseBookFixtureCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for BaseBookFixtureCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                BaseBookFixtureCalls::IsScript(element) => element.encode(),
                BaseBookFixtureCalls::IsTest(element) => element.encode(),
                BaseBookFixtureCalls::Failed(element) => element.encode(),
                BaseBookFixtureCalls::SetUp(element) => element.encode(),
                BaseBookFixtureCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for BaseBookFixtureCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                BaseBookFixtureCalls::IsScript(element) => element.fmt(f),
                BaseBookFixtureCalls::IsTest(element) => element.fmt(f),
                BaseBookFixtureCalls::Failed(element) => element.fmt(f),
                BaseBookFixtureCalls::SetUp(element) => element.fmt(f),
                BaseBookFixtureCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsScriptCall> for BaseBookFixtureCalls {
        fn from(var: IsScriptCall) -> Self {
            BaseBookFixtureCalls::IsScript(var)
        }
    }
    impl ::std::convert::From<IsTestCall> for BaseBookFixtureCalls {
        fn from(var: IsTestCall) -> Self {
            BaseBookFixtureCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<FailedCall> for BaseBookFixtureCalls {
        fn from(var: FailedCall) -> Self {
            BaseBookFixtureCalls::Failed(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for BaseBookFixtureCalls {
        fn from(var: SetUpCall) -> Self {
            BaseBookFixtureCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<VmCall> for BaseBookFixtureCalls {
        fn from(var: VmCall) -> Self {
            BaseBookFixtureCalls::Vm(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct IsScriptReturn(pub bool);
    #[doc = "Container type for all return fields from the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct IsTestReturn(pub bool);
    #[doc = "Container type for all return fields from the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct FailedReturn(pub bool);
    #[doc = "Container type for all return fields from the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct VmReturn(pub ethers::core::types::Address);
}
