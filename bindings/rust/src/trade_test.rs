pub use trade_test::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod trade_test {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "TradeTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static TRADETEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers :: core :: utils :: __serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeBondPct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeRebatePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"relayerRefundPct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"FeeCombinationSet\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSafeBlockThreshold\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"SafeBlockThresholdSet\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"disputeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"answer\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeDisputeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"disputeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeDisputed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeFilled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeRequested\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"newFeePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"UpdatedFeeForTrade\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_SCRIPT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotFillIfAlreadyFilled\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotFillIfAmountOutIsLessThanMin\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotFillIfDisputed\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotFillIfNoTokens\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotFillTradeWithUpdateFeeWithInvalidSignature\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotFillWithUpdateFeeForDisputedTrade\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotFillWithUpdateFeeForFilledTrade\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotFillWithUpdateFeePastMax\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotTradeAboveMaxFee\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotTradeIfNoBalance\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotTradeNonWhitelistedToken\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotTradeSameToken\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotTradeToBlackHole\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotTradeZeroAmount\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotUpdateFeeForFilledTrade\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotUpdateFeePastMax\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotUpdateFeeWithInvalidSignature\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testFillTrade\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testFillTradeWithUpdatedFee\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testRequestTrade\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeePct\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testUpdateFee\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static TRADETEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060408190526000805462ff00ff1916620100011790556001625e79b760e01b031990527f81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a608452737109709ecfa91a80626ff3989d68f67f5b1dd12d63ffa1864960a46020604051808303816000875af115801562000084573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000aa9190620005fc565b600880546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b66004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156200013f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001659190620005fc565b600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f9791f723bf26b668c8cac0664b66d058cdb2a424cfb08c05dd9da570be0eff6f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015620001fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002209190620005fc565b600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002bf73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506006604051602001620002a9919062000627565b60408051601f1981840301815291905262000425565b600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200039073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506012604051602001620002a991906060808252600d908201526c2bb930b83832b21022ba3432b960991b608082015260a060208201819052600490820152630ae8aa8960e31b60c082015260ff91909116604082015260e00190565b600c80546001600160a01b039283166001600160a01b031991821681179092556064600f55601460108190556011819055603c601255601380548316909317909255600b548254821690841617909155662386f26fc10000601555670de0b6b3a76400006016556335a4e9006017556008546018805490921692169190911790553480156200041e57600080fd5b5062000804565b60006001600160a01b0384163b8015620004435784915050620004c1565b6000620004518585620004c8565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000492573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004bc919081019062000747565b509150505b9392505050565b604051638d1cc92560e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc92590620005069087906004016200079c565b6000604051808303816000875af115801562000526573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000550919081019062000747565b8360405160200162000564929190620007d1565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620005f55760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b606482015260840160405180910390fd5b5092915050565b6000602082840312156200060f57600080fd5b81516001600160a01b0381168114620004c157600080fd5b6060815260006200064c6060830160048152635553444360e01b602082015260400190565b8281036020840152620006708160048152635553444360e01b602082015260400190565b91505060ff8316604083015292915050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620006b55781810151838201526020016200069b565b83811115620006c5576000848401525b50505050565b60006001600160401b0380841115620006e857620006e862000682565b604051601f8501601f19908116603f0116810190828211818310171562000713576200071362000682565b816040528093508581528686860111156200072d57600080fd5b6200073d86602083018762000698565b5050509392505050565b6000602082840312156200075a57600080fd5b81516001600160401b038111156200077157600080fd5b8201601f810184136200078357600080fd5b6200079484825160208401620006cb565b949350505050565b6020815260008251806020840152620007bd81604085016020870162000698565b601f01601f19169190910160400192915050565b60008351620007e581846020880162000698565b835190830190620007fb81836020880162000698565b01949350505050565b619e9680620008146000396000f3fe60806040523480156200001157600080fd5b5060043610620001af5760003560e01c8063c4d27e6711620000f0578063d872818811620000a3578063e5d3b33a116200007a578063e5d3b33a146200031b578063e839de1d1462000325578063f8ccbf47146200033c578063fa7626d4146200035057600080fd5b8063d872818814620002e3578063df06599914620002fa578063e54483fa146200031157600080fd5b8063c4d27e67146200029a578063c8f1054414620002a4578063d172b76114620002ae578063d48030c214620002c5578063d6d4ac4c14620002cf578063d787f41014620002d957600080fd5b80633a768463116200016657806384b18093116200013d57806384b180931462000261578063a8604cef146200026b578063ba414fa61462000275578063bb4c3657146200029057600080fd5b80633a768463146200020c5780634a0c03a91462000240578063580ed5c1146200025757600080fd5b80630a9254e414620001b45780630f1e85ae14620001c05780631321db5814620001ca5780631468d1e514620001d4578063248439ab14620001eb5780632e3b219c14620001f5575b600080fd5b620001be6200035e565b005b620001be6200036a565b620001be62000459565b620001be620001e536600462006481565b62000591565b620001be62000e39565b620001be62000206366004620064a4565b62001039565b6200022360008051602062009d8983398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b620001be6200025136600462006481565b62001422565b620001be62001b23565b620001be62001d62565b620001be62001eae565b6200027f62001f69565b604051901515815260200162000237565b620001be6200209a565b620001be620022ce565b620001be62002434565b620001be620002bf366004620064d1565b6200256d565b620001be620027e0565b620001be62002937565b620001be62002a8e565b620001be620002f436600462006501565b62002bb6565b620001be6200030b366004620064d1565b62002ea6565b620001be62003059565b620001be62003206565b620001be62000336366004620064d1565b62003335565b6000546200027f9062010000900460ff1681565b6000546200027f9060ff1681565b62000368620034db565b565b604051630618f58760e51b815260008051602062009d898339815191529063c31eb0e090620003a590631d2792fb60e31b9060040162006528565b600060405180830381600087803b158015620003c057600080fd5b505af1158015620003d5573d6000803e3d6000fd5b5050600e54600b5460165460175460155460185460405163ad3e762560e01b81526001600160a01b03968716985063ad3e76259750620004239695861695869594939216906004016200653d565b600060405180830381600087803b1580156200043e57600080fd5b505af115801562000453573d6000803e3d6000fd5b50505050565b6000620004706703782dace9d9000060016200658b565b60408051602480820184905282518083039091018152604490910182526020810180516001600160e01b03166305bf279d60e41b179052905163f28dceb360e01b815291925060008051602062009d898339815191529163f28dceb391620004db9160040162006603565b600060405180830381600087803b158015620004f657600080fd5b505af11580156200050b573d6000803e3d6000fd5b5050600e5460135460145460165460175460185460405163ad3e762560e01b81526001600160a01b03968716985063ad3e762597506200055a9695861695948516948a9216906004016200653d565b600060405180830381600087803b1580156200057557600080fd5b505af11580156200058a573d6000803e3d6000fd5b5050505050565b604051632631f2b160e11b8152821515600482015260008051602062009d8983398151915290634c63e56290602401600060405180830381600087803b158015620005db57600080fd5b505af1158015620005f0573d6000803e3d6000fd5b505060125460008051602062009d898339815191529250634c63e56291506001906200061f9060001962006618565b6200062b91906200663b565b6040516001600160e01b031960e084901b1681529085106004820152602401600060405180830381600087803b1580156200066557600080fd5b505af11580156200067a573d6000803e3d6000fd5b5050601754604051632631f2b160e11b8152908411600482015260008051602062009d898339815191529250634c63e5629150602401600060405180830381600087803b158015620006cb57600080fd5b505af1158015620006e0573d6000803e3d6000fd5b50506013546008546200070393506001600160a01b039182169250168462003c37565b60135460145460175460155460185460085460009586956200073e956001600160a01b0392831695918316948b949193908116911662003c4b565b9150915060006200077360008051602062009da983398151915260001c8360155460016200076d91906200658b565b62003dcd565b60145460095491925062000795916001600160a01b0391821691168662003c37565b6014546009546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa158015620007e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200080d919062006655565b6013546009546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa15801562000860573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000886919062006655565b6014546018546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa158015620008d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008ff919062006655565b60095460405163ca669fa760e01b81526001600160a01b03909116600482015290915060008051602062009d898339815191529063ca669fa790602401600060405180830381600087803b1580156200095757600080fd5b505af11580156200096c573d6000803e3d6000fd5b5050600e546040516381bad6f360e01b815260008051602062009d8983398151915293506381bad6f39250620009b8916001918291829182916001600160a01b0316906004016200666f565b600060405180830381600087803b158015620009d357600080fd5b505af1158015620009e8573d6000803e3d6000fd5b50506009546015548993506001600160a01b0390911691507f942417ccf4f356e8d909c054f8a8147622647605cbeafd9c63b4fc3cc1dd2a539062000a2f9060016200658b565b60408051918252602082018c90520160405180910390a3600e60009054906101000a90046001600160a01b03166001600160a01b031663ee35a4f9601360009054906101000a90046001600160a01b0316601460009054906101000a90046001600160a01b03168b601754601554601860009054906101000a90046001600160a01b03168d8f600860009054906101000a90046001600160a01b0316601554600162000adc91906200658b565b8f6040518c63ffffffff1660e01b815260040162000b059b9a999897969594939291906200669f565b600060405180830381600087803b15801562000b2057600080fd5b505af115801562000b35573d6000803e3d6000fd5b50506014546009546040516370a0823160e01b81526001600160a01b03918216600482015262000be194508b93509116906370a08231906024015b602060405180830381865afa15801562000b8e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bb4919062006655565b62000bc091906200658b565b8460405180606001604052806025815260200162009e1c6025913962003e96565b600060646012548a62000bf5919062006716565b62000c01919062006618565b6013546009546040516370a0823160e01b81526001600160a01b03918216600482015292935062000ca9929116906370a08231906024015b602060405180830381865afa15801562000c57573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c7d919062006655565b62000c8983866200658b565b60405180606001604052806024815260200162009df86024913962003e96565b6014546018546040516370a0823160e01b81526001600160a01b03918216600482015262000d4f9291909116906370a0823190602401602060405180830381865afa15801562000cfd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d23919062006655565b62000d2f8a856200658b565b6040518060600160405280602f815260200162009dc9602f913962003e96565b600e5460009062000dc59062000dbf90899062000da390639501325f60e01b9062000d86906001906001600160a01b031662003ee3565b9060038201805463ffffffff191660e09290921c91909117905590565b9060028201805460018101825560009182526020909120015590565b62003f08565b905062000dd3814362003f30565b600e5460009062000e109062000e0a908a9062000da39063d70e3dfd60e01b9062000d86906001906001600160a01b031662003ee3565b6200402b565b60095490915062000e2c9082906001600160a01b03166200404d565b5050505050505050505050565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa15801562000e84573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eaa919062006655565b62000eb79060016200658b565b60135460145460165460175460155460185495965060009562000eee956001600160a01b0390811695811694939291168862004147565b90506000601554600162000f0391906200658b565b9050600062000f347f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b6848462003dcd565b604051630618f58760e51b815290915060008051602062009d898339815191529063c31eb0e09062000f72906324a0dbd760e21b9060040162006528565b600060405180830381600087803b15801562000f8d57600080fd5b505af115801562000fa2573d6000803e3d6000fd5b5050600e5460135460145460165460175460155460185460085460405163c3f6f43160e01b81526001600160a01b039889169a5063c3f6f431995062000fff989788169796871696928316928f9216908d908d9060040162006738565b600060405180830381600087803b1580156200101a57600080fd5b505af11580156200102f573d6000803e3d6000fd5b5050505050505050565b604051632631f2b160e11b8152831515600482015260008051602062009d8983398151915290634c63e56290602401600060405180830381600087803b1580156200108357600080fd5b505af115801562001098573d6000803e3d6000fd5b5050604051632631f2b160e11b8152841515600482015260008051602062009d898339815191529250634c63e5629150602401600060405180830381600087803b158015620010e657600080fd5b505af1158015620010fb573d6000803e3d6000fd5b5050604051632631f2b160e11b81526703782dace9d90000841115600482015260008051602062009d898339815191529250634c63e5629150602401600060405180830381600087803b1580156200115257600080fd5b505af115801562001167573d6000803e3d6000fd5b505050506000600e60009054906101000a90046001600160a01b03166001600160a01b031663cd805d5e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620011c1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011e7919062006655565b60135460085491925062001209916001600160a01b0391821691168662003c37565b6013546008546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa1580156200125b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001281919062006655565b600e546040516381bad6f360e01b815291925060008051602062009d89833981519152916381bad6f391620012ce916001918291829182916001600160a01b03909116906004016200666f565b600060405180830381600087803b158015620012e957600080fd5b505af1158015620012fe573d6000803e3d6000fd5b5050601454601354601854604080518b8152602081018b90529081018990526001600160a01b039182166060820152879550928116935016907ff4650f30e27746417929b97bf256a6022b15957ffef5971ddbe48867d9e01d459060800160405180910390a460135460145460185460085462001394936001600160a01b03908116938116928a928a928a928116911662003c4b565b50506013546008546040516370a0823160e01b81526001600160a01b0391821660048201526200058a9291909116906370a0823190602401602060405180830381865afa158015620013ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001410919062006655565b6200141c87846200663b565b62003f30565b604051632631f2b160e11b8152821515600482015260008051602062009d8983398151915290634c63e56290602401600060405180830381600087803b1580156200146c57600080fd5b505af115801562001481573d6000803e3d6000fd5b5050601754604051632631f2b160e11b8152908411600482015260008051602062009d898339815191529250634c63e5629150602401600060405180830381600087803b158015620014d257600080fd5b505af1158015620014e7573d6000803e3d6000fd5b505060125460008051602062009d898339815191529250634c63e5629150600190620015169060001962006618565b6200152291906200663b565b6040516001600160e01b031960e084901b1681529085106004820152602401600060405180830381600087803b1580156200155c57600080fd5b505af115801562001571573d6000803e3d6000fd5b50506013546008546200159493506001600160a01b039182169250168462003c37565b6013546014546017546015546018546008546000958695620015cf956001600160a01b0392831695918316948b949193908116911662003c4b565b601454600954929450909250620015f4916001600160a01b0391821691168562003c37565b6014546009546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa15801562001646573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200166c919062006655565b6013546009546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa158015620016bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016e5919062006655565b6014546018546040516370a0823160e01b81526001600160a01b0391821660048201529293506000929116906370a0823190602401602060405180830381865afa15801562001738573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200175e919062006655565b60095460405163ca669fa760e01b81526001600160a01b03909116600482015290915060008051602062009d898339815191529063ca669fa790602401600060405180830381600087803b158015620017b657600080fd5b505af1158015620017cb573d6000803e3d6000fd5b5050600e546040516381bad6f360e01b815260008051602062009d8983398151915293506381bad6f3925062001817916001918291829182916001600160a01b0316906004016200666f565b600060405180830381600087803b1580156200183257600080fd5b505af115801562001847573d6000803e3d6000fd5b505060095460155460408051918252602082018b90528994506001600160a01b0390921692507f942417ccf4f356e8d909c054f8a8147622647605cbeafd9c63b4fc3cc1dd2a53910160405180910390a3600e60009054906101000a90046001600160a01b03166001600160a01b0316631655b323601360009054906101000a90046001600160a01b0316601460009054906101000a90046001600160a01b03168a601754601554601860009054906101000a90046001600160a01b03168c8e6040518963ffffffff1660e01b81526004016200192c989796959493929190620067a7565b600060405180830381600087803b1580156200194757600080fd5b505af11580156200195c573d6000803e3d6000fd5b50506014546009546040516370a0823160e01b81526001600160a01b0391821660048201526200199c94508a93509116906370a082319060240162000b70565b6000606460125489620019b0919062006716565b620019bc919062006618565b6013546009546040516370a0823160e01b81526001600160a01b039182166004820152929350620019f9929116906370a082319060240162000c39565b6014546018546040516370a0823160e01b81526001600160a01b03918216600482015262001a7f9291909116906370a0823190602401602060405180830381865afa15801562001a4d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a73919062006655565b62000d2f89856200658b565b600e5460009062001ab69062000dbf90889062000da390639501325f60e01b9062000d86906001906001600160a01b031662003ee3565b905062001ac4814362003f30565b600e5460009062001afb9062000e0a90899062000da39063d70e3dfd60e01b9062000d86906001906001600160a01b031662003ee3565b60095490915062001b179082906001600160a01b03166200404d565b50505050505050505050565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa15801562001b6e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b94919062006655565b62001ba19060016200658b565b60135460145460165460175460155460185495965060009562001bd8956001600160a01b0390811695811694939291168862004147565b600e5490915062001c1890439062001c1190849062000da390639501325f60e01b9062000d86906001906001600160a01b031662003ee3565b90620041b5565b6040516024810182905260008051602062009d898339815191529063f28dceb3906304daa62560e21b906044015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b909216825262001c8d9160040162006603565b600060405180830381600087803b15801562001ca857600080fd5b505af115801562001cbd573d6000803e3d6000fd5b5050600e546013546014546016546017546015546018546001600160a01b039687169850631655b32397509486169593841694929391929091168962001d058460016200658b565b6040518963ffffffff1660e01b815260040162001d2a989796959493929190620067a7565b600060405180830381600087803b15801562001d4557600080fd5b505af115801562001d5a573d6000803e3d6000fd5b505050505050565b60408051808201825260148152731514905394d1915497d19493d357d1905253115160621b6020820152905163f28dceb360e01b815260008051602062009d898339815191529163f28dceb39162001dbe919060040162006603565b600060405180830381600087803b15801562001dd957600080fd5b505af115801562001dee573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062009d89833981519152925063ca669fa79150602401600060405180830381600087803b15801562001e4757600080fd5b505af115801562001e5c573d6000803e3d6000fd5b5050600e5460135460145460165460175460155460185460405163ad3e762560e01b81526001600160a01b03978816995063ad3e7625985062000423979687169695861695909116906004016200653d565b604051630618f58760e51b815260009060008051602062009d898339815191529063c31eb0e09062001eec90631feef77d60e01b9060040162006528565b600060405180830381600087803b15801562001f0757600080fd5b505af115801562001f1c573d6000803e3d6000fd5b5050600e5460135460145460165460175460155460405163ad3e762560e01b81526001600160a01b03968716985063ad3e762597506200055a96958616959094169389906004016200653d565b60008054610100900460ff161562001f8a5750600054610100900460ff1690565b600060008051602062009d898339815191523b15620020955760405160009060008051602062009d89833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49062001ff79083906519985a5b195960d21b90602001620067f3565b60408051601f19818403018152908290526200201792916020016200680c565b60408051601f198184030181529082905262002033916200683f565b6000604051808303816000865af19150503d806000811462002072576040519150601f19603f3d011682016040523d82523d6000602084013e62002077565b606091505b50915050808060200190518101906200209191906200685d565b9150505b919050565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa158015620020e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200210b919062006655565b620021189060016200658b565b601354601454601654601754601554601854604080516001600160a01b039788166020820152958716908601526060850193909352608084019190915260a08301529190911660c082015260e081018290529091506000906101000160405160208183030381529060405280519060200120905060006703782dace9d900006001620021a591906200658b565b90506000620021c560008051602062009da9833981519152848462003dcd565b6040516024810184905290915060008051602062009d898339815191529063f28dceb3906305bf279d60e41b906044015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b90921682526200223d9160040162006603565b600060405180830381600087803b1580156200225857600080fd5b505af11580156200226d573d6000803e3d6000fd5b5050600e5460135460145460165460175460155460185460085460405163ee35a4f960e01b81526001600160a01b039889169a5063ee35a4f9995062000fff989788169796871696928316928f926001929116908e908e906004016200669f565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa15801562002319573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200233f919062006655565b6200234c9060016200658b565b60135460145460165460175460155460185495965060009562002383956001600160a01b0390811695811694939291168862004147565b905060006200239c6703782dace9d9000060016200658b565b90506000620023bc60008051602062009da9833981519152848462003dcd565b6040516024810184905290915060008051602062009d898339815191529063f28dceb3906305bf279d60e41b906044015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b909216825262000f729160040162006603565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa1580156200247f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620024a5919062006655565b620024b29060016200658b565b601354601454601654601754601554601854959650600095620024e9956001600160a01b0390811695811694939291168862004147565b905060006015546001620024fe91906200658b565b905060006200252f7f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b6848462003dcd565b604051630618f58760e51b815290915060008051602062009d898339815191529063c31eb0e0906200223d906324a0dbd760e21b9060040162006528565b604051632631f2b160e11b81526703782dace9d90000821115600482015260008051602062009d8983398151915290634c63e56290602401600060405180830381600087803b158015620025c057600080fd5b505af1158015620025d5573d6000803e3d6000fd5b505050506000600e60009054906101000a90046001600160a01b03166001600160a01b031663cd805d5e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200262f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002655919062006655565b620026629060016200658b565b60135460145460165460175460155460185495965060009562002699956001600160a01b0390811695811694939291168862004147565b90506000620026b960008051602062009da9833981519152838662003dcd565b600e546040516381bad6f360e01b815291925060008051602062009d89833981519152916381bad6f3916200270791600191829160009183916001600160a01b03909116906004016200666f565b600060405180830381600087803b1580156200272257600080fd5b505af115801562002737573d6000803e3d6000fd5b50506008546040518781528693506001600160a01b0390911691507f6ab91dbc42f726b630639350395426be048c50255f12e82d28e2dffac41745939060200160405180910390a3600e5460135460145460165460175460155460185460085460405163c3f6f43160e01b81526001600160a01b039889169863c3f6f4319862000fff989082169790821696909590949093908216928e92909116908f908d9060040162006738565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa1580156200282b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002851919062006655565b6200285e9060016200658b565b60135460145460165460175460155460185495965060009562002895956001600160a01b0390811695811694939291168862004147565b600e54909150620028ce90439062001c1190849062000da390639501325f60e01b9062000d86906001906001600160a01b031662003ee3565b60006015546001620028e191906200658b565b905060006200290160008051602062009da9833981519152848462003dcd565b6040516024810185905290915060008051602062009d898339815191529063f28dceb3906304daa62560e21b90604401620021f6565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa15801562002982573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620029a8919062006655565b620029b59060016200658b565b601354601454601654601754601554601854959650600095620029ec956001600160a01b0390811695811694939291168862004147565b600e5490915062002a2590439062001c1190849062000da390639501325f60e01b9062000d86906001906001600160a01b031662003ee3565b6000601554600162002a3891906200658b565b9050600062002a5860008051602062009da9833981519152848462003dcd565b6040516024810185905290915060008051602062009d898339815191529063f28dceb3906304daa62560e21b90604401620023ed565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa15801562002ad9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002aff919062006655565b62002b0c9060016200658b565b60135460145460165460175460155460185495965060009562002b43956001600160a01b0390811695811694939291168862004147565b905062002b8362002b544362006881565b600e5462001c1190849062000da390639501325f60e01b9062000d86906001906001600160a01b031662003ee3565b6040516024810182905260008051602062009d898339815191529063f28dceb390635c8aa24760e11b9060440162001c46565b600e54604051630daf9c2160e41b81526001600160a01b03838116600483015260008051602062009d8983398151915292634c63e5629291169063daf9c21090602401602060405180830381865afa15801562002c17573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002c3d91906200685d565b6040516001600160e01b031960e084901b16815290156004820152602401600060405180830381600087803b15801562002c7657600080fd5b505af115801562002c8b573d6000803e3d6000fd5b5050604080516001600160a01b03851660248083019190915282518083039091018152604490910182526020810180516001600160e01b031663f602627d60e01b179052905163f28dceb360e01b815260008051602062009d89833981519152935063f28dceb3925062002d03919060040162006603565b600060405180830381600087803b15801562002d1e57600080fd5b505af115801562002d33573d6000803e3d6000fd5b5050600e5460145460155460165460175460185460405163ad3e762560e01b81526001600160a01b03968716985063ad3e7625975062002d80968a9681169594939216906004016200653d565b600060405180830381600087803b15801562002d9b57600080fd5b505af115801562002db0573d6000803e3d6000fd5b5050604080516001600160a01b03851660248083019190915282518083039091018152604490910182526020810180516001600160e01b031663f602627d60e01b179052905163f28dceb360e01b815260008051602062009d89833981519152935063f28dceb3925062002e28919060040162006603565b600060405180830381600087803b15801562002e4357600080fd5b505af115801562002e58573d6000803e3d6000fd5b5050600e5460135460155460165460175460185460405163ad3e762560e01b81526001600160a01b03968716985063ad3e762597506200055a96958616958a9594939216906004016200653d565b604051632631f2b160e11b8152811515600482015260008051602062009d8983398151915290634c63e56290602401600060405180830381600087803b15801562002ef057600080fd5b505af115801562002f05573d6000803e3d6000fd5b505060095460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062009d89833981519152925063ca669fa79150602401600060405180830381600087803b15801562002f5e57600080fd5b505af115801562002f73573d6000803e3d6000fd5b505060408051808201825260148152731514905394d1915497d19493d357d1905253115160621b6020820152905163f28dceb360e01b815260008051602062009d89833981519152935063f28dceb3925062002fd3919060040162006603565b600060405180830381600087803b15801562002fee57600080fd5b505af115801562003003573d6000803e3d6000fd5b5050600e54601354601454601654601554601854604051631655b32360e01b81526001600160a01b039687169850631655b32397506200055a9695861695948516946000939216906001908b90600401620067a7565b604051630618f58760e51b815260008051602062009d898339815191529063c31eb0e090620030949063abc5ee6f60e01b9060040162006528565b600060405180830381600087803b158015620030af57600080fd5b505af1158015620030c4573d6000803e3d6000fd5b5050600e5460135460145460175460155460185460405163ad3e762560e01b81526001600160a01b03968716985063ad3e7625975062003116969586169594851694600094939216906004016200653d565b600060405180830381600087803b1580156200313157600080fd5b505af115801562003146573d6000803e3d6000fd5b5050604051630618f58760e51b815260008051602062009d89833981519152925063c31eb0e09150620031859063abc5ee6f60e01b9060040162006528565b600060405180830381600087803b158015620031a057600080fd5b505af1158015620031b5573d6000803e3d6000fd5b5050600e5460135460145460165460155460185460405163ad3e762560e01b81526001600160a01b03968716985063ad3e76259750620004239695861695948516946000939216906004016200653d565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa15801562003251573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003277919062006655565b620032849060016200658b565b601354601454601654601754601554601854959650600095620032bb956001600160a01b0390811695811694939291168862004147565b9050620032cc62002b544362006881565b60006015546001620032df91906200658b565b90506000620032ff60008051602062009da9833981519152848462003dcd565b6040516024810185905290915060008051602062009d898339815191529063f28dceb390635c8aa24760e11b90604401620021f6565b604051632631f2b160e11b815260018211600482015260008051602062009d8983398151915290634c63e56290602401600060405180830381600087803b1580156200338057600080fd5b505af115801562003395573d6000803e3d6000fd5b505050506000600182620033aa91906200663b565b60095460405163ca669fa760e01b81526001600160a01b03909116600482015290915060008051602062009d898339815191529063ca669fa790602401600060405180830381600087803b1580156200340257600080fd5b505af115801562003417573d6000803e3d6000fd5b5050604051630618f58760e51b815260008051602062009d89833981519152925063c31eb0e09150620034569063a53754a760e01b9060040162006528565b600060405180830381600087803b1580156200347157600080fd5b505af115801562003486573d6000803e3d6000fd5b5050600e54601354601454601654601554601854604051631655b32360e01b81526001600160a01b039687169850631655b323975062001d2a9695861695948516948b939216906001908b90600401620067a7565b620034e5620041c1565b600e54600b54604051630ffb1d8b60e01b81526001600160a01b0392831692630ffb1d8b926200351e92911690600190600401620068a0565b600060405180830381600087803b1580156200353957600080fd5b505af11580156200354e573d6000803e3d6000fd5b5050600e54600c54604051630ffb1d8b60e01b81526001600160a01b039283169450630ffb1d8b93506200358c9290911690600190600401620068a0565b600060405180830381600087803b158015620035a757600080fd5b505af1158015620035bc573d6000803e3d6000fd5b5050600b54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152635553444360e01b606482015260008051602062009d89833981519152925063c657c7189150608401600060405180830381600087803b1580156200363457600080fd5b505af115801562003649573d6000803e3d6000fd5b5050600c54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152630ae8aa8960e31b606482015260008051602062009d89833981519152925063c657c7189150608401600060405180830381600087803b158015620036c157600080fd5b505af1158015620036d6573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062009d8983398151915292506306447d569150602401600060405180830381600087803b1580156200372f57600080fd5b505af115801562003744573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062003783929091169060001990600401620067f3565b6020604051808303816000875af1158015620037a3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620037c991906200685d565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620038049291169060001990600401620067f3565b6020604051808303816000875af115801562003824573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200384a91906200685d565b50604080516390c5013b60e01b8152905160008051602062009d89833981519152916390c5013b91600480830192600092919082900301818387803b1580156200389357600080fd5b505af1158015620038a8573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062009d8983398151915292506306447d569150602401600060405180830381600087803b1580156200390157600080fd5b505af115801562003916573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062003955929091169060001990600401620067f3565b6020604051808303816000875af115801562003975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200399b91906200685d565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620039d69291169060001990600401620067f3565b6020604051808303816000875af1158015620039f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003a1c91906200685d565b50604080516390c5013b60e01b8152905160008051602062009d89833981519152916390c5013b91600480830192600092919082900301818387803b15801562003a6557600080fd5b505af115801562003a7a573d6000803e3d6000fd5b5050600a546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062009d8983398151915292506306447d569150602401600060405180830381600087803b15801562003ad357600080fd5b505af115801562003ae8573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062003b27929091169060001990600401620067f3565b6020604051808303816000875af115801562003b47573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003b6d91906200685d565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262003ba89291169060001990600401620067f3565b6020604051808303816000875af115801562003bc8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003bee91906200685d565b50604080516390c5013b60e01b8152905160008051602062009d89833981519152916390c5013b91600480830192600092919082900301818387803b1580156200043e57600080fd5b62003c468383836000620042af565b505050565b6000806000600e60009054906101000a90046001600160a01b03166001600160a01b031663cd805d5e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562003ca4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003cca919062006655565b9050600062003cdf8b8b8b8b8b8b8862004147565b60405163ca669fa760e01b81526001600160a01b038716600482015290915060008051602062009d898339815191529063ca669fa790602401600060405180830381600087803b15801562003d3357600080fd5b505af115801562003d48573d6000803e3d6000fd5b5050600e5460405163ad3e762560e01b81526001600160a01b03909116925063ad3e7625915062003d88908e908e908e908e908e908e906004016200653d565b600060405180830381600087803b15801562003da357600080fd5b505af115801562003db8573d6000803e3d6000fd5b50939d929c50919a5050505050505050505050565b604080517f582b2ba4cf2b931b2e1a054db15a958a1d2222e9e884ffc3c15f79da7d0177ba6020820152908101839052606081810183905290600090608001604051602081830303815290604052805190602001209050600062003e7e826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b905062003e8c8682620044c2565b9695505050505050565b81831462003c46577f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838160405162003ecf9190620068bb565b60405180910390a162003c46838362003f30565b6005820180546001600160a01b0319166001600160a01b039290921691909117905590565b600062003f15826200458b565b80602001905181019062003f2a919062006655565b92915050565b80821462004027577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405162003fa39060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88160405162003fdc9190620068ec565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405162004015919062006925565b60405180910390a16200402762004653565b5050565b600062004038826200458b565b80602001905181019062003f2a919062006950565b806001600160a01b0316826001600160a01b03161462004027577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620040d59060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f816040516200410e919062006970565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f82604051620040159190620069b5565b604080516bffffffffffffffffffffffff196060998a1b8116602080840191909152988a1b81166034830152604882019790975260688101959095526088850193909352951b90921660a882015260bc808201949094528151808203909401845260dc019052815191012090565b62004027828262004757565b620041cb62004ac9565b600d54600f546010546011546012546040516001600160a01b0390951694620041f49062006427565b6001600160a01b039095168552602085019390935260408401919091526060830152608082015260a001604051809103906000f0801580156200423b573d6000803e3d6000fd5b50600e80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b81526004808201939093526024810191909152604481019190915263426f6f6b60e01b606482015260008051602062009d898339815191529063c657c7189060840162000423565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009287169162004305916200683f565b6000604051808303816000865af19150503d806000811462004344576040519150601f19603f3d011682016040523d82523d6000602084013e62004349565b606091505b5091505060008180602001905181019062004365919062006655565b9050620043b38462001c11876200438a6370a0823160e01b62000d8660018d62003ee3565b90600282018054600181018255600091825260209091206001600160a01b039290921691015590565b821562001d5a5760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290516000916001600160a01b03891691620043fe91906200683f565b6000604051808303816000865af19150503d80600081146200443d576040519150601f19603f3d011682016040523d82523d6000602084013e62004442565b606091505b509150506000818060200190518101906200445e919062006655565b90508286101562004489576200447586846200663b565b6200448190826200663b565b9050620044a4565b6200449583876200663b565b620044a190826200658b565b90505b6200102f8162001c116318160ddd60e01b62000d8660018d62003ee3565b6040516338d07aa960e21b815260048101839052602481018290526060906000908190819060008051602062009d898339815191529063e341eaa4906044016060604051808303816000875af115801562004521573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620045479190620069e0565b6040805160208101939093528281019190915260f89290921b6001600160f81b03191660608201528151604181830301815260619091019091529695505050505050565b60058101546060906001600160a01b03166000620045a98462005408565b604051630667f9d760e41b815290915060008051602062009d898339815191529063667f9d7090620045e29085908590600401620067f3565b6020604051808303816000875af115801562004602573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004628919062006655565b6040516020016200463b91815260200190565b60405160208183030381529060405292505050919050565b60008051602062009d898339815191523b15620047465760405160009060008051602062009d89833981519152907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc490620046c19083906519985a5b195960d21b9060019060200162006a1f565b60408051601f1981840301815290829052620046e192916020016200680c565b60408051601f1981840301815290829052620046fd916200683f565b6000604051808303816000865af19150503d80600081146200473c576040519150601f19603f3d011682016040523d82523d6000602084013e62004741565b606091505b505050505b6000805461ff001916610100179055565b600582015460038301546004840154600285018054604080516020808402820181019092528281526001600160a01b039096169560e09590951b9460009390929091830182828015620047ca57602002820191906000526020600020905b815481526020019060010190808311620047b5575b50505050509050600083620047df83620060ff565b604051602001620047f29291906200680c565b60408051601f198184030181528282526001600160a01b038816600090815260018b0160209081528382206001600160e01b03198a1683528152928120919450909290916200484691869188910162006a40565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff1662004881576200487f8762005408565b505b6001600160a01b0385166000908152602088815260408083206001600160e01b0319881684528252808320905190918391620048c291879189910162006a40565b6040516020818303038152906040528051906020012081526020019081526020016000205460001b9050600080876001600160a01b0316846040516200490991906200683f565b600060405180830381855afa9150503d806000811462004946576040519150601f19603f3d011682016040523d82523d6000602084013e6200494b565b606091505b509150620049689050816200496288602062006716565b620061b3565b604051630667f9d760e41b81529092506000915060008051602062009d898339815191529063667f9d7090620049a5908b908790600401620067f3565b6020604051808303816000875af1158015620049c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620049eb919062006655565b905080821462004a185760405162461bcd60e51b815260040162004a0f9062006a7c565b60405180910390fd5b6040516370ca10bb60e01b815260008051602062009d89833981519152906370ca10bb9062004a50908b9087908e9060040162006a1f565b600060405180830381600087803b15801562004a6b57600080fd5b505af115801562004a80573d6000803e3d6000fd5b50505060058b0180546001600160a01b03191690555060038a01805463ffffffff1916905562004ab560028b01600062006435565b896004016000905550505050505050505050565b62004ad36200623d565b60405162004ae19062006458565b604051809103906000f08015801562004afe573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b03928316908117909155600b5460405163095ea7b360e01b815292169163095ea7b39162004b499160001990600401620067f3565b6020604051808303816000875af115801562004b69573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004b8f91906200685d565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262004bca9291169060001990600401620067f3565b6020604051808303816000875af115801562004bea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004c1091906200685d565b50600d54604080516318caf8e360e31b81526001600160a01b0390921660048301526024820152601060448201526f416c6c4b6e6f77696e674f7261636c6560801b606482015260008051602062009d898339815191529063c657c71890608401600060405180830381600087803b15801562004c8c57600080fd5b505af115801562004ca1573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062009d8983398151915292506306447d569150602401600060405180830381600087803b15801562004cfa57600080fd5b505af115801562004d0f573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062004d4e929091169060001990600401620067f3565b6020604051808303816000875af115801562004d6e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004d9491906200685d565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262004dcf9291169060001990600401620067f3565b6020604051808303816000875af115801562004def573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004e1591906200685d565b50604080516390c5013b60e01b8152905160008051602062009d89833981519152916390c5013b91600480830192600092919082900301818387803b15801562004e5e57600080fd5b505af115801562004e73573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062009d8983398151915292506306447d569150602401600060405180830381600087803b15801562004ecc57600080fd5b505af115801562004ee1573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062004f20929091169060001990600401620067f3565b6020604051808303816000875af115801562004f40573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004f6691906200685d565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262004fa19291169060001990600401620067f3565b6020604051808303816000875af115801562004fc1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004fe791906200685d565b50604080516390c5013b60e01b8152905160008051602062009d89833981519152916390c5013b91600480830192600092919082900301818387803b1580156200503057600080fd5b505af115801562005045573d6000803e3d6000fd5b5050600a546040516303223eab60e11b81526001600160a01b03909116600482015260008051602062009d8983398151915292506306447d569150602401600060405180830381600087803b1580156200509e57600080fd5b505af1158015620050b3573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620050f2929091169060001990600401620067f3565b6020604051808303816000875af115801562005112573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200513891906200685d565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620051739291169060001990600401620067f3565b6020604051808303816000875af115801562005193573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620051b991906200685d565b50604080516390c5013b60e01b8152905160008051602062009d89833981519152916390c5013b91600480830192600092919082900301818387803b1580156200520257600080fd5b505af115801562005217573d6000803e3d6000fd5b5050600d54600b54604051630ffb1d8b60e01b81526001600160a01b039283169450630ffb1d8b9350620052559290911690600190600401620068a0565b600060405180830381600087803b1580156200527057600080fd5b505af115801562005285573d6000803e3d6000fd5b5050600d54600c54604051630ffb1d8b60e01b81526001600160a01b039283169450630ffb1d8b9350620052c39290911690600190600401620068a0565b600060405180830381600087803b158015620052de57600080fd5b505af1158015620052f3573d6000803e3d6000fd5b5050600d54600a5460405163194f29df60e11b81526001600160a01b03928316945063329e53be9350620053319290911690600190600401620068a0565b600060405180830381600087803b1580156200534c57600080fd5b505af115801562005361573d6000803e3d6000fd5b5050600d54600a5460405163889590f160e01b81526001600160a01b03928316945063889590f193506200539f9290911690600190600401620068a0565b600060405180830381600087803b158015620053ba57600080fd5b505af1158015620053cf573d6000803e3d6000fd5b5050600d5460405163889590f160e01b81526001600160a01b03909116925063889590f1915062000423903090600190600401620068a0565b600581015460038201546004830154600284018054604080516020808402820181019092528281526000966001600160a01b03169560e01b9493879391929091908301828280156200547a57602002820191906000526020600020905b81548152602001906001019080831162005465575b5050506001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a1684528252808320905195965094919350620054c69250859187910162006a40565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff161562005565576001600160a01b0384166000908152602087815260408083206001600160e01b031987168452825280832090519092916200553591859187910162006a40565b60405160208183030381529060405280519060200120815260200190815260200160002054945050505050919050565b6000836200557383620060ff565b604051602001620055869291906200680c565b604051602081830303815290604052905060008051602062009e4183398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620055e557600080fd5b505af1158015620055fa573d6000803e3d6000fd5b50505050600080866001600160a01b0316836040516200561b91906200683f565b600060405180830381855afa9150503d806000811462005658576040519150601f19603f3d011682016040523d82523d6000602084013e6200565d565b606091505b509150620056749050816200496287602062006716565b6040516365bc948160e01b81526001600160a01b03891660048201529092506000915060008051602062009d89833981519152906365bc9481906024016000604051808303816000875af1158015620056d1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620056fb919081019062006bd2565b5090508051600103620059c457600060008051602062009e4183398151915260001c6001600160a01b031663667f9d70898460008151811062005742576200574262006c3d565b60200260200101516040518363ffffffff1660e01b815260040162005769929190620067f3565b6020604051808303816000875af115801562005789573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620057af919062006655565b90508062005813577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a58883600081518110620057ef57620057ef62006c3d565b602002602001015160001c6040516200580a929190620067f3565b60405180910390a15b808314620058355760405162461bcd60e51b815260040162004a0f9062006a7c565b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed888887896040516020016200586d92919062006a40565b604051602081830303815290604052805190602001208560008151811062005899576200589962006c3d565b602002602001015160001c604051620058b6949392919062006c53565b60405180910390a181600081518110620058d457620058d462006c3d565b6020908102919091018101516001600160a01b038a1660009081528c835260408082206001600160e01b03198c16835284528082209051929390926200591f918a918c910162006a40565b60408051601f1981840301815291815281516020928301208352828201939093529082016000908120939093556001600160a01b038b16835260018d810182528284206001600160e01b03198c1685528252828420925190939162005989918a918c910162006a40565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff19169115159190911790555062005f82565b60018151111562005f115760005b815181101562005f0a57600060008051602062009e4183398151915260001c6001600160a01b031663667f9d708a85858151811062005a155762005a1562006c3d565b60200260200101516040518363ffffffff1660e01b815260040162005a3c929190620067f3565b6020604051808303816000875af115801562005a5c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005a82919062006655565b90508062005ae5577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a58984848151811062005ac15762005ac162006c3d565b602002602001015160001c60405162005adc929190620067f3565b60405180910390a15b60008051602062009e4183398151915260001c6001600160a01b03166370ca10bb8a85858151811062005b1c5762005b1c62006c3d565b602002602001015161133760f01b6040518463ffffffff1660e01b815260040162005b4a9392919062006a1f565b600060405180830381600087803b15801562005b6557600080fd5b505af115801562005b7a573d6000803e3d6000fd5b50505050600060608a6001600160a01b03168760405162005b9c91906200683f565b600060405180830381855afa9150503d806000811462005bd9576040519150601f19603f3d011682016040523d82523d6000602084013e62005bde565b606091505b50909250905062005bf681620049628b602062006716565b955081801562005c0a575061133760f01b86145b1562005e5d577f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c60405160200162005c4892919062006a40565b6040516020818303038152906040528051906020012088888151811062005c735762005c7362006c3d565b602002602001015160001c60405162005c90949392919062006c53565b60405180910390a184848151811062005cad5762005cad62006c3d565b6020908102919091018101516001600160a01b038d1660009081528f835260408082206001600160e01b03198f168352845280822090519293909262005cf8918d918f910162006a40565b6040516020818303038152906040528051906020012081526020019081526020016000208190555060018d60010160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160e01b0319166001600160e01b031916815260200190815260200160002060008a8c60405160200162005d8592919062006a40565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555060008051602062009e4183398151915260001c6001600160a01b03166370ca10bb8c87878151811062005df75762005df762006c3d565b6020026020010151866040518463ffffffff1660e01b815260040162005e209392919062006a1f565b600060405180830381600087803b15801562005e3b57600080fd5b505af115801562005e50573d6000803e3d6000fd5b5050505050505062005f0a565b60008051602062009e4183398151915260001c6001600160a01b03166370ca10bb8c87878151811062005e945762005e9462006c3d565b6020026020010151866040518463ffffffff1660e01b815260040162005ebd9392919062006a1f565b600060405180830381600087803b15801562005ed857600080fd5b505af115801562005eed573d6000803e3d6000fd5b50505050505050808062005f019062006c83565b915050620059d2565b5062005f82565b6040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e606482015260840162004a0f565b6001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a1684528252808320905190929162005fc69188918a910162006a40565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620060555760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b606482015260840162004a0f565b6005890180546001600160a01b031916905560038901805463ffffffff191690556200608660028a01600062006435565b600060048a018190556001600160a01b038816815260208a815260408083206001600160e01b03198a16845282528083209051909291620060cc9188918a910162006a40565b60405160208183030381529060405280519060200120815260200190815260200160002054975050505050505050919050565b606060008251602062006113919062006716565b67ffffffffffffffff8111156200612e576200612e62006b17565b6040519080825280601f01601f19166020018201604052801562006159576020820181803683370190505b50905060005b8351811015620061ac57600084828151811062006180576200618062006c3d565b602002602001015190508082602002602001840152508080620061a39062006c83565b9150506200615f565b5092915050565b60008060006020855111620061ca578451620061cd565b60205b905060005b818110156200623357620061e881600862006716565b86620061f583886200658b565b8151811062006208576200620862006c3d565b01602001516001600160f81b031916901c9290921791806200622a8162006c83565b915050620061d2565b5090949350505050565b600854604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526005604482015264416c69636560d81b606482015260008051602062009d898339815191529063c657c71890608401600060405180830381600087803b158015620062ad57600080fd5b505af1158015620062c2573d6000803e3d6000fd5b5050600954604080516318caf8e360e31b81526001600160a01b039092166004830152602482015260036044820152622137b160e91b606482015260008051602062009d89833981519152925063c657c7189150608401600060405180830381600087803b1580156200633457600080fd5b505af115801562006349573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526007604482015266436861726c696560c81b606482015260008051602062009d89833981519152925063c657c7189150608401600060405180830381600087803b158015620063bf57600080fd5b505af1158015620063d4573d6000803e3d6000fd5b5050604080516318caf8e360e31b815230600482015260248101919091526003604482015262596f7560e81b606482015260008051602062009d89833981519152925063c657c718915060840162000423565b611f898062006ca083390190565b508054600082559060005260206000209081019062006455919062006466565b50565b6111608062008c2983390190565b5b808211156200647d576000815560010162006467565b5090565b600080604083850312156200649557600080fd5b50508035926020909101359150565b600080600060608486031215620064ba57600080fd5b505081359360208301359350604090920135919050565b600060208284031215620064e457600080fd5b5035919050565b6001600160a01b03811681146200645557600080fd5b6000602082840312156200651457600080fd5b81356200652181620064eb565b9392505050565b6001600160e01b031991909116815260200190565b6001600160a01b039687168152948616602086015260408501939093526060840191909152608083015290911660a082015260c00190565b634e487b7160e01b600052601160045260246000fd5b60008219821115620065a157620065a162006575565b500190565b60005b83811015620065c3578181015183820152602001620065a9565b83811115620004535750506000910152565b60008151808452620065ef816020860160208601620065a6565b601f01601f19169290920160200192915050565b602081526000620065216020830184620065d5565b6000826200663657634e487b7160e01b600052601260045260246000fd5b500490565b60008282101562006650576200665062006575565b500390565b6000602082840312156200666857600080fd5b5051919050565b941515855292151560208501529015156040840152151560608301526001600160a01b0316608082015260a00190565b600061016060018060a01b03808f168452808e1660208501528c60408501528b60608501528a6080850152808a1660a08501528860c08501528760e08501528087166101008501525084610120840152806101408401526200670481840185620065d5565b9e9d5050505050505050505050505050565b600081600019048311821515161562006733576200673362006575565b500290565b600061014060018060a01b03808e168452808d1660208501528b60408501528a606085015289608085015280891660a08501528760c085015280871660e08501525084610100840152806101208401526200679681840185620065d5565b9d9c50505050505050505050505050565b6001600160a01b039889168152968816602088015260408701959095526060860193909352608085019190915290931660a083015260c082019290925260e08101919091526101000190565b6001600160a01b03929092168252602082015260400190565b6001600160e01b031983168152815160009062006831816004850160208701620065a6565b919091016004019392505050565b6000825162006853818460208701620065a6565b9190910192915050565b6000602082840312156200687057600080fd5b815180151581146200652157600080fd5b6000600160ff1b820162006899576200689962006575565b5060000390565b6001600160a01b039290921682521515602082015260400190565b60408152600560408201526422b93937b960d91b6060820152608060208201526000620065216080830184620065d5565b6040815260006200691760408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b6040815260006200691760408301600a815269080808081058dd1d585b60b21b602082015260400190565b6000602082840312156200696357600080fd5b81516200652181620064eb565b6040815260006200699b60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b6040815260006200699b60408301600a815269080808081058dd1d585b60b21b602082015260400190565b600080600060608486031215620069f657600080fd5b835160ff8116811462006a0857600080fd5b602085015160409095015190969495509392505050565b6001600160a01b039390931683526020830191909152604082015260600190565b825160009082906020808701845b8381101562006a6c5781518552938201939082019060010162006a4e565b5050948252509092019392505050565b6020808252606f908201527f73746453746f726167652066696e642853746453746f72616765293a2050616360408201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560608201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960808201526e39b713ba1039bab83837b93a32b21760891b60a082015260c00190565b634e487b7160e01b600052604160045260246000fd5b600082601f83011262006b3f57600080fd5b8151602067ffffffffffffffff8083111562006b5f5762006b5f62006b17565b8260051b604051601f19603f8301168101818110848211171562006b875762006b8762006b17565b60405293845285810183019383810192508785111562006ba657600080fd5b83870191505b8482101562006bc75781518352918301919083019062006bac565b979650505050505050565b6000806040838503121562006be657600080fd5b825167ffffffffffffffff8082111562006bff57600080fd5b62006c0d8683870162006b2d565b9350602085015191508082111562006c2457600080fd5b5062006c338582860162006b2d565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039490941684526001600160e01b03199290921660208401526040830152606082015260800190565b60006001820162006c985762006c9862006575565b506001019056fe61012060405260006001553480156200001757600080fd5b5060405162001f8938038062001f898339810160408190526200003a9162000156565b600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506001600160a01b0385166101005260808490526040518481527f882885d0e4612a71677644a9d70e58ca05fc5a1ea1b0875f6e46c315241bfe149060200160405180910390a180620000ce8385620001ad565b620000da9190620001ad565b606414620000fb5760405163bcf1e5b360e01b815260040160405180910390fd5b60a083905260c082905260e081905260408051848152602081018490529081018290527ff33486d12ebec978385318eaf8163e096679d7eab14d4def8f26b7a5fda0f5829060600160405180910390a15050505050620001d4565b600080600080600060a086880312156200016f57600080fd5b85516001600160a01b03811681146200018757600080fd5b602087015160408801516060890151608090990151929a91995097965090945092505050565b60008219821115620001cf57634e487b7160e01b600052601160045260246000fd5b500190565b60805160a05160c05160e05161010051611d1c6200026d60003960008181610214015281816103ce0152818161068c015281816106b501528181610798015261081c0152600081816101c701528181610d630152610fc5015260008181610299015261088a0152600081816101a0015261064c01526000818161012b015281816105ce01528181610c910152610cdf0152611d1c6000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063cb7b1ec811610071578063cb7b1ec8146102ce578063cd805d5e146102e1578063d70e3dfd146102ea578063daf9c21014610313578063ee35a4f91461034657600080fd5b80638da5cb5b1461024e5780639501325f14610261578063ad3e762514610281578063c16402bb14610294578063c3f6f431146102bb57600080fd5b8063391fe4e2116100f4578063391fe4e21461019b57806353906a59146101c257806369cf50c1146101e9578063734d1627146101fc5780637dc0d1d01461020f57600080fd5b80630ff0c00e146101265780630ffb1d8b1461016057806313af4035146101755780631655b32314610188575b600080fd5b61014d7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b61017361016e3660046116df565b610359565b005b610173610183366004611718565b6104c3565b61017361019636600461173c565b610557565b61014d7f000000000000000000000000000000000000000000000000000000000000000081565b61014d7f000000000000000000000000000000000000000000000000000000000000000081565b6101736101f73660046117b6565b610587565b61017361020a366004611828565b610811565b6102367f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610157565b600054610236906001600160a01b031681565b61014d61026f36600461186c565b60036020526000908152604090205481565b61017361028f366004611885565b610985565b61014d7f000000000000000000000000000000000000000000000000000000000000000081565b6101736102c936600461192e565b610b4a565b6101736102dc3660046117b6565b610c4a565b61014d60015481565b6102366102f836600461186c565b6004602052600090815260409020546001600160a01b031681565b610336610321366004611718565b60026020526000908152604090205460ff1681565b6040519015158152602001610157565b6101736103543660046119f2565b610e03565b6000546001600160a01b031633146103a75760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064015b60405180910390fd5b80801561043b5750604051630daf9c2160e41b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063daf9c21090602401602060405180830381865afa158015610415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104399190611ac2565b155b15610464576040516313c42eef60e21b81526001600160a01b038316600482015260240161039e565b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d92910160405180910390a25050565b6000546001600160a01b0316331461050c5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b604482015260640161039e565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b600061056889898989898989610e44565b905061057c89898989898989888a33610eb2565b505050505050505050565b600061059888888888888888610e44565b60008181526003602052604081205491925081136105cc57604051635c8aa24760e11b81526004810183905260240161039e565b7f00000000000000000000000000000000000000000000000000000000000000006105f78243611af5565b1061061557604051632c02744560e11b815260040160405180910390fd5b61061e81611b0c565b60008381526003602090815260408083209390935560049052908120546001600160a01b03169060646106717f00000000000000000000000000000000000000000000000000000000000000008b611b28565b61067b9190611b47565b90506106b16001600160a01b038c167f000000000000000000000000000000000000000000000000000000000000000083611017565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f7d3b58b84338f868f8d8d604051602001610715939291909283526001600160a01b03919091166020830152604082015260600190565b6040516020818303038152906040526040518663ffffffff1660e01b8152600401610744959493929190611b69565b6020604051808303816000875af1158015610763573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107879190611bea565b90506107be6001600160a01b038d167f00000000000000000000000000000000000000000000000000000000000000006000611017565b8086846001600160a01b03167f3ce24c6eab720bcebe9baf9d21eee3175218126f896eb40e25675b054f19a40f876040516107fb91815260200190565b60405180910390a4505050505050505050505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461085c5760405163179a2eb160e01b815233600482015260240161039e565b6000808061086d60e0850185611c03565b81019061087a9190611c4a565b91945092509050600060646108af7f000000000000000000000000000000000000000000000000000000000000000086611b28565b6108b99190611b47565b90506108cb60e0860160c08701611c82565b15610909576109046108e36040870160208801611718565b826108f46080890160608a01611718565b6001600160a01b03169190611094565b61091e565b61091e83826108f46080890160608a01611718565b85826109306040880160208901611718565b6001600160a01b03167f5346d9dd24f7f5e01b23ca4dada136d909acecf7ff9e4ed41474140d5d1319f661096a60e08a0160c08b01611c82565b604051901515815260200160405180910390a4505050505050565b6001600160a01b03861660009081526002602052604090205460ff166109c95760405163f602627d60e01b81526001600160a01b038716600482015260240161039e565b6001600160a01b03851660009081526002602052604090205460ff16610a0d5760405163f602627d60e01b81526001600160a01b038616600482015260240161039e565b846001600160a01b0316866001600160a01b031603610a3f57604051631d2792fb60e31b815260040160405180910390fd5b6703782dace9d90000821115610a6b576040516305bf279d60e41b81526004810183905260240161039e565b831580610a76575082155b15610a945760405163abc5ee6f60e01b815260040160405180910390fd5b6001600160a01b038116610abb57604051631feef77d60e01b815260040160405180910390fd5b60015460408051868152602081018690529081018490526001600160a01b03838116606083015280881691908916907ff4650f30e27746417929b97bf256a6022b15957ffef5971ddbe48867d9e01d459060800160405180910390a460018054906000610b2783611c9f565b90915550610b4290506001600160a01b03871633308761110c565b505050505050565b6000610b5b8c8c8c8c8c8c8c610e44565b90506703782dace9d90000841115610b89576040516305bf279d60e41b81526004810185905260240161039e565b6000818152600360205260408120541215610bba57604051635c8aa24760e11b81526004810182905260240161039e565b6000818152600360205260408120541315610beb576040516304daa62560e21b81526004810182905260240161039e565b610bf88582868686611196565b85856001600160a01b03167f6ab91dbc42f726b630639350395426be048c50255f12e82d28e2dffac417459386604051610c3491815260200190565b60405180910390a3505050505050505050505050565b6000610c5b88888888888888610e44565b6000818152600360205260408120549192508113610c8f57604051635c8aa24760e11b81526004810183905260240161039e565b7f0000000000000000000000000000000000000000000000000000000000000000610cba8243611af5565b1015610d2257600082815260036020526040812054610cd99043611af5565b610d03907f0000000000000000000000000000000000000000000000000000000000000000611af5565b9050806040516325797e0360e11b815260040161039e91815260200190565b60008281526004602081815260408084208054600384529185208590559290915281546001600160a01b0319169091556001600160a01b0316906064610d887f000000000000000000000000000000000000000000000000000000000000000082611af5565b610d92908b611b28565b610d9c9190611b47565b9050610db26001600160a01b038c168383611094565b84826001600160a01b03167f32b1eeadbe2d36ad64238ef29d8064aedff6d8150cf1f0c4d6617bae1c00d92685604051610dee91815260200190565b60405180910390a35050505050505050505050565b6000610e148d8d8d8d8d8d8d610e44565b9050610e238582868686611196565b610e358d8d8d8d888d8d888e33610eb2565b50505050505050505050505050565b604080516bffffffffffffffffffffffff196060998a1b8116602080840191909152988a1b81166034830152604882019790975260688101959095526088850193909352951b90921660a882015260bc808201949094528151808203909401845260dc019052815191012090565b6000838152600360205260408120541215610ee357604051635c8aa24760e11b81526004810184905260240161039e565b6000838152600360205260408120541315610f14576040516304daa62560e21b81526004810184905260240161039e565b86821015610f355760405163a53754a760e01b815260040160405180910390fd5b6000838152600360209081526040808320439055600482529182902080546001600160a01b0319166001600160a01b0385169081179091558251898152918201859052869290917f942417ccf4f356e8d909c054f8a8147622647605cbeafd9c63b4fc3cc1dd2a53910160405180910390a3610fbc6001600160a01b038a1682878561110c565b60006064610fea7f00000000000000000000000000000000000000000000000000000000000000008b611b28565b610ff49190611b47565b905061100a6001600160a01b038c168383611094565b5050505050505050505050565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061108e5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640161039e565b50505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061108e5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b604482015260640161039e565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d116001600051141617169150508061118f5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161039e565b5050505050565b6703782dace9d900008311156111c2576040516305bf279d60e41b81526004810184905260240161039e565b60008481526003602052604081205412156111f357604051635c8aa24760e11b81526004810185905260240161039e565b6000848152600360205260408120541315611224576040516304daa62560e21b81526004810185905260240161039e565b604080517f582b2ba4cf2b931b2e1a054db15a958a1d2222e9e884ffc3c15f79da7d0177ba6020808301919091528183018790526060808301879052835180840390910181526080830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a084015260bc8084018290528451808503909101815260dc909301909352815191012060006112fd8286868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061133b92505050565b9050876001600160a01b0316816001600160a01b031614611331576040516324a0dbd760e21b815260040160405180910390fd5b5050505050505050565b600080600061134a858561135f565b91509150611357816113cd565b509392505050565b60008082516041036113955760208301516040840151606085015160001a61138987828585611586565b945094505050506113c6565b82516040036113be57602083015160408401516113b3868383611673565b9350935050506113c6565b506000905060025b9250929050565b60008160048111156113e1576113e1611cb8565b036113e95750565b60018160048111156113fd576113fd611cb8565b0361144a5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161039e565b600281600481111561145e5761145e611cb8565b036114ab5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161039e565b60038160048111156114bf576114bf611cb8565b036115175760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161039e565b600481600481111561152b5761152b611cb8565b036115835760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161039e565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156115bd575060009050600361166a565b8460ff16601b141580156115d557508460ff16601c14155b156115e6575060009050600461166a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561163a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166116635760006001925092505061166a565b9150600090505b94509492505050565b6000806001600160ff1b0383168161169060ff86901c601b611cce565b905061169e87828885611586565b935093505050935093915050565b6001600160a01b038116811461158357600080fd5b80356116cc816116ac565b919050565b801515811461158357600080fd5b600080604083850312156116f257600080fd5b82356116fd816116ac565b9150602083013561170d816116d1565b809150509250929050565b60006020828403121561172a57600080fd5b8135611735816116ac565b9392505050565b600080600080600080600080610100898b03121561175957600080fd5b8835611764816116ac565b97506020890135611774816116ac565b965060408901359550606089013594506080890135935060a0890135611799816116ac565b979a969950949793969295929450505060c08201359160e0013590565b600080600080600080600060e0888a0312156117d157600080fd5b87356117dc816116ac565b965060208801356117ec816116ac565b955060408801359450606088013593506080880135925060a0880135611811816116ac565b8092505060c0880135905092959891949750929550565b6000806040838503121561183b57600080fd5b82359150602083013567ffffffffffffffff81111561185957600080fd5b8301610100818603121561170d57600080fd5b60006020828403121561187e57600080fd5b5035919050565b60008060008060008060c0878903121561189e57600080fd5b86356118a9816116ac565b955060208701356118b9816116ac565b945060408701359350606087013592506080870135915060a08701356118de816116ac565b809150509295509295509295565b60008083601f8401126118fe57600080fd5b50813567ffffffffffffffff81111561191657600080fd5b6020830191508360208285010111156113c657600080fd5b60008060008060008060008060008060006101408c8e03121561195057600080fd5b8b3561195b816116ac565b9a5060208c013561196b816116ac565b995060408c0135985060608c0135975060808c0135965060a08c0135611990816116ac565b955060c08c0135945060e08c01356119a7816116ac565b93506101008c013592506101208c013567ffffffffffffffff8111156119cc57600080fd5b6119d88e828f016118ec565b915080935050809150509295989b509295989b9093969950565b6000806000806000806000806000806000806101608d8f031215611a1557600080fd5b611a1f8d356116ac565b8c359b50611a3060208e01356116ac565b60208d01359a5060408d0135995060608d0135985060808d01359750611a5860a08e016116c1565b965060c08d0135955060e08d01359450611a756101008e016116c1565b93506101208d0135925067ffffffffffffffff6101408e01351115611a9957600080fd5b611aaa8e6101408f01358f016118ec565b81935080925050509295989b509295989b509295989b565b600060208284031215611ad457600080fd5b8151611735816116d1565b634e487b7160e01b600052601160045260246000fd5b600082821015611b0757611b07611adf565b500390565b6000600160ff1b8201611b2157611b21611adf565b5060000390565b6000816000190483118215151615611b4257611b42611adf565b500290565b600082611b6457634e487b7160e01b600052601260045260246000fd5b500490565b600060018060a01b038088168352602081881681850152818716604085015285606085015260a06080850152845191508160a085015260005b82811015611bbe5785810182015185820160c001528101611ba2565b82811115611bd057600060c084870101525b5050601f01601f19169190910160c0019695505050505050565b600060208284031215611bfc57600080fd5b5051919050565b6000808335601e19843603018112611c1a57600080fd5b83018035915067ffffffffffffffff821115611c3557600080fd5b6020019150368190038213156113c657600080fd5b600080600060608486031215611c5f57600080fd5b833592506020840135611c71816116ac565b929592945050506040919091013590565b600060208284031215611c9457600080fd5b8135611735816116d1565b600060018201611cb157611cb1611adf565b5060010190565b634e487b7160e01b600052602160045260246000fd5b60008219821115611ce157611ce1611adf565b50019056fea2646970667358221220d4b04807a9b92af316f64575d8e0c355adb8979067c87ce0ab86bdfe7a5f7c6964736f6c634300080f0033608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350336000908152600360205260409020805460ff191660011790556110e58061007b6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063c70a900f11610071578063c70a900f1461015e578063d6f8307f14610191578063daf9c210146101b4578063e6717ce7146101d7578063f7d3b58b146101f8578063fc361c381461020b57600080fd5b80630ffb1d8b146100b957806313af4035146100ce578063329e53be146100e1578063889590f1146100f45780638da5cb5b146101075780639d86698514610137575b600080fd5b6100cc6100c7366004610b44565b61021e565b005b6100cc6100dc366004610b77565b6102b1565b6100cc6100ef366004610b44565b610326565b6100cc610102366004610b44565b6103a8565b60005461011a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61014a610145366004610b99565b61042a565b60405161012e989796959493929190610bea565b61018161016c366004610b77565b60036020526000908152604090205460ff1681565b604051901515815260200161012e565b61018161019f366004610b77565b60046020526000908152604090205460ff1681565b6101816101c2366004610b77565b60026020526000908152604090205460ff1681565b6101ea6101e5366004610c93565b610511565b60405190815260200161012e565b6101ea610206366004610cef565b61052a565b6100cc610219366004610d9c565b610804565b6000546001600160a01b031633146102515760405162461bcd60e51b815260040161024890610dbf565b60405180910390fd5b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d9291015b60405180910390a25050565b6000546001600160a01b031633146102db5760405162461bcd60e51b815260040161024890610dbf565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103505760405162461bcd60e51b815260040161024890610dbf565b6001600160a01b038216600081815260036020908152604091829020805460ff191685151590811790915591519182527f8cc72bec7e2cf5979aefd933f40a28eb590098d522a5c458e497e71c5e6fa90f91016102a5565b6000546001600160a01b031633146103d25760405162461bcd60e51b815260040161024890610dbf565b6001600160a01b038216600081815260046020908152604091829020805460ff191685151590811790915591519182527f2bf32d6c1bf8a8d32ace419214cf1c0fa979b6ed1135840088771f67f25f104991016102a5565b600160208190526000918252604090912080549181015460028201546003830154600484015460058501546006860180546001600160a01b0398891698968716979587169690941694929360ff808416946101009094041692919061048e90610de5565b80601f01602080910402602001604051908101604052809291908181526020018280546104ba90610de5565b80156105075780601f106104dc57610100808354040283529160200191610507565b820191906000526020600020905b8154815290600101906020018083116104ea57829003601f168201915b5050505050905088565b600061052086868686866109ae565b9695505050505050565b3360009081526004602052604081205460ff1661055a576040516325c0cb7960e11b815260040160405180910390fd5b6001600160a01b03851660009081526002602052604090205460ff1661059e5760405163028511d160e51b81526001600160a01b0386166004820152602401610248565b6105ab33888888886109ae565b90506000808281526001602052604090206005015460ff1660028111156105d4576105d4610bb2565b146105f55760405163d5e880e960e01b815260048101829052602401610248565b6000604051806101000160405280336001600160a01b03168152602001896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b031681526020018681526020016001600281111561065857610658610bb2565b815260200160001515815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505084815260016020818152604092839020855181546001600160a01b03199081166001600160a01b039283161783559287015182850180548516918316919091179055938601516002808301805485169287169290921790915560608701516003830180549094169516949094179091556080850151600482015560a085015160058201805496975087969295509093909260ff199092169190849081111561074857610748610bb2565b021790555060c08201516005820180549115156101000261ff001990921691909117905560e082015160068201906107809082610e84565b5050604080516001600160a01b03898116825260208201899052808b1693508b169185917f2609e116ca576195fecb47831f147fd6fee721377e4d88fff48807f3e9442a42910160405180910390a46107e46001600160a01b038716333088610a16565b6107f96001600160a01b038716883088610a16565b509695505050505050565b3360009081526003602052604090205460ff16610834576040516314e9dd3960e31b815260040160405180910390fd5b60008281526001602052604090206002600582015460ff16600281111561085d5761085d610bb2565b0361087e5760405163b677167760e01b815260048101849052602401610248565b6000816004015460026108919190610f44565b905082156108bf57600182015460038301546108ba916001600160a01b03918216911683610aa0565b6108e0565b600282015460038301546108e0916001600160a01b03918216911683610aa0565b60058201805461ffff19166101008515159081029190911760021790915560405190815284907fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a281546001600160a01b03163b156109a857815460405163734d162760e01b81526001600160a01b039091169063734d1627906109759087908690600401610fee565b600060405180830381600087803b15801561098f57600080fd5b505af11580156109a3573d6000803e3d6000fd5b505050505b50505050565b6040516bffffffffffffffffffffffff19606087811b8216602084015286811b8216603484015285811b8216604884015284901b16605c8201526070810182905260009060900160405160208183030381529060405280519060200120905095945050505050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610a995760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610248565b5050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806109a85760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610248565b80356001600160a01b0381168114610b2f57600080fd5b919050565b80358015158114610b2f57600080fd5b60008060408385031215610b5757600080fd5b610b6083610b18565b9150610b6e60208401610b34565b90509250929050565b600060208284031215610b8957600080fd5b610b9282610b18565b9392505050565b600060208284031215610bab57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60038110610be657634e487b7160e01b600052602160045260246000fd5b9052565b600061010060018060a01b03808c1684526020818c1681860152818b166040860152818a166060860152886080860152610c2760a0860189610bc8565b86151560c08601528260e0860152855191508183860152600092505b81831015610c6257858301810151858401610120015291820191610c43565b5080821115610c7657600061012082860101525b601f01601f191692909201610120019a9950505050505050505050565b600080600080600060a08688031215610cab57600080fd5b610cb486610b18565b9450610cc260208701610b18565b9350610cd060408701610b18565b9250610cde60608701610b18565b949793965091946080013592915050565b60008060008060008060a08789031215610d0857600080fd5b610d1187610b18565b9550610d1f60208801610b18565b9450610d2d60408801610b18565b935060608701359250608087013567ffffffffffffffff80821115610d5157600080fd5b818901915089601f830112610d6557600080fd5b813581811115610d7457600080fd5b8a6020828501011115610d8657600080fd5b6020830194508093505050509295509295509295565b60008060408385031215610daf57600080fd5b82359150610b6e60208401610b34565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b600181811c90821680610df957607f821691505b602082108103610e1957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b601f821115610e7f57600081815260208120601f850160051c81016020861015610e5c5750805b601f850160051c820191505b81811015610e7b57828155600101610e68565b5050505b505050565b815167ffffffffffffffff811115610e9e57610e9e610e1f565b610eb281610eac8454610de5565b84610e35565b602080601f831160018114610ee75760008415610ecf5750858301515b600019600386901b1c1916600185901b178555610e7b565b600085815260208120601f198616915b82811015610f1657888601518255948401946001909101908401610ef7565b5085821015610f345787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000816000190483118215151615610f6c57634e487b7160e01b600052601160045260246000fd5b500290565b60008154610f7e81610de5565b808552602060018381168015610f9b5760018114610fb557610fe3565b60ff1985168884015283151560051b880183019550610fe3565b866000528260002060005b85811015610fdb5781548a8201860152908301908401610fc0565b890184019650505b505050505092915050565b8281526040602082015261101d6040820161101084546001600160a01b031690565b6001600160a01b03169052565b600061103360018401546001600160a01b031690565b6001600160a01b03908116606084015260028401548116608084015260038401541660a0830152600483015460c0830152600583015461107960e0840160ff8316610bc8565b61010061108f81850160ff8460081c1615159052565b610120840152506110a7610140830160068501610f71565b94935050505056fea2646970667358221220378e2adecaf12d8d961ecc660ca8a2e8d7f85594e2d186b05480fc09bda2009864736f6c634300080f00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a726563697069656e742073686f756c64206861766520726563656976656420616d6f756e744f757420746f6b656e73626f622073686f756c64206861766520726563656976656420736f6d6520746f6b656e73626f622073686f756c6420686176652073656e7420616d6f756e744f757420746f6b656e73885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212205cc694649d083ef506a7f3ebcbec708628b2bed0e4278eeee720cc3a53929c8b64736f6c634300080f0033" . parse () . expect ("invalid bytecode")
        });
    pub struct TradeTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for TradeTest<M> {
        fn clone(&self) -> Self {
            TradeTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for TradeTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for TradeTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(TradeTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> TradeTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), TRADETEST_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                TRADETEST_ABI.clone(),
                TRADETEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_SCRIPT` (0xf8ccbf47) function"]
        pub fn is_script(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([248, 204, 191, 71], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotFillIfAlreadyFilled` (0x580ed5c1) function"]
        pub fn test_cannot_fill_if_already_filled(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([88, 14, 213, 193], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotFillIfAmountOutIsLessThanMin` (0xe839de1d) function"]
        pub fn test_cannot_fill_if_amount_out_is_less_than_min(
            &self,
            min_amount_out: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([232, 57, 222, 29], min_amount_out)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotFillIfDisputed` (0xd787f410) function"]
        pub fn test_cannot_fill_if_disputed(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([215, 135, 244, 16], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotFillIfNoTokens` (0xdf065999) function"]
        pub fn test_cannot_fill_if_no_tokens(
            &self,
            amount_out: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([223, 6, 89, 153], amount_out)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotFillTradeWithUpdateFeeWithInvalidSignature` (0xc8f10544) function"]
        pub fn test_cannot_fill_trade_with_update_fee_with_invalid_signature(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 241, 5, 68], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotFillWithUpdateFeeForDisputedTrade` (0xe5d3b33a) function"]
        pub fn test_cannot_fill_with_update_fee_for_disputed_trade(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([229, 211, 179, 58], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotFillWithUpdateFeeForFilledTrade` (0xd48030c2) function"]
        pub fn test_cannot_fill_with_update_fee_for_filled_trade(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([212, 128, 48, 194], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotFillWithUpdateFeePastMax` (0xbb4c3657) function"]
        pub fn test_cannot_fill_with_update_fee_past_max(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([187, 76, 54, 87], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotTradeAboveMaxFee` (0x1321db58) function"]
        pub fn test_cannot_trade_above_max_fee(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([19, 33, 219, 88], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotTradeIfNoBalance` (0x84b18093) function"]
        pub fn test_cannot_trade_if_no_balance(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([132, 177, 128, 147], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotTradeNonWhitelistedToken` (0xd8728188) function"]
        pub fn test_cannot_trade_non_whitelisted_token(
            &self,
            token: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 114, 129, 136], token)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotTradeSameToken` (0x0f1e85ae) function"]
        pub fn test_cannot_trade_same_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([15, 30, 133, 174], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotTradeToBlackHole` (0xa8604cef) function"]
        pub fn test_cannot_trade_to_black_hole(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([168, 96, 76, 239], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotTradeZeroAmount` (0xe54483fa) function"]
        pub fn test_cannot_trade_zero_amount(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([229, 68, 131, 250], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotUpdateFeeForFilledTrade` (0xd6d4ac4c) function"]
        pub fn test_cannot_update_fee_for_filled_trade(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([214, 212, 172, 76], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotUpdateFeePastMax` (0xc4d27e67) function"]
        pub fn test_cannot_update_fee_past_max(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([196, 210, 126, 103], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotUpdateFeeWithInvalidSignature` (0x248439ab) function"]
        pub fn test_cannot_update_fee_with_invalid_signature(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([36, 132, 57, 171], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testFillTrade` (0x4a0c03a9) function"]
        pub fn test_fill_trade(
            &self,
            amount_in: ethers::core::types::U256,
            amount_out: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([74, 12, 3, 169], (amount_in, amount_out))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testFillTradeWithUpdatedFee` (0x1468d1e5) function"]
        pub fn test_fill_trade_with_updated_fee(
            &self,
            amount_in: ethers::core::types::U256,
            amount_out: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([20, 104, 209, 229], (amount_in, amount_out))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testRequestTrade` (0x2e3b219c) function"]
        pub fn test_request_trade(
            &self,
            amount_in: ethers::core::types::U256,
            amount_out_min: ethers::core::types::U256,
            fee_pct: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([46, 59, 33, 156], (amount_in, amount_out_min, fee_pct))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testUpdateFee` (0xd172b761) function"]
        pub fn test_update_fee(
            &self,
            new_fee_pct: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([209, 114, 183, 97], new_fee_pct)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `FeeCombinationSet` event"]
        pub fn fee_combination_set_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, FeeCombinationSetFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `SafeBlockThresholdSet` event"]
        pub fn safe_block_threshold_set_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, SafeBlockThresholdSetFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenWhitelisted` event"]
        pub fn token_whitelisted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenWhitelistedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputeSettled` event"]
        pub fn trade_dispute_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputed` event"]
        pub fn trade_disputed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeFilled` event"]
        pub fn trade_filled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeFilledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeRequested` event"]
        pub fn trade_requested_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeRequestedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeSettled` event"]
        pub fn trade_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `UpdatedFeeForTrade` event"]
        pub fn updated_fee_for_trade_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, UpdatedFeeForTradeFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_1_filter(&self) -> ethers::contract::builders::Event<M, LogArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_2_filter(&self) -> ethers::contract::builders::Event<M, LogArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_3_filter(&self) -> ethers::contract::builders::Event<M, LogArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_1_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_2_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_3_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, TradeTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for TradeTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "FeeCombinationSet",
        abi = "FeeCombinationSet(uint256,uint256,uint256)"
    )]
    pub struct FeeCombinationSetFilter {
        pub dispute_bond_pct: ethers::core::types::U256,
        pub trade_rebate_pct: ethers::core::types::U256,
        pub relayer_refund_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "SafeBlockThresholdSet", abi = "SafeBlockThresholdSet(uint256)")]
    pub struct SafeBlockThresholdSetFilter {
        pub new_safe_block_threshold: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokenWhitelisted", abi = "TokenWhitelisted(address,bool)")]
    pub struct TokenWhitelistedFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
        pub whitelisted: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeDisputeSettled",
        abi = "TradeDisputeSettled(address,uint256,bytes32,bool)"
    )]
    pub struct TradeDisputeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub dispute_id: [u8; 32],
        pub answer: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeDisputed",
        abi = "TradeDisputed(address,uint256,bytes32,uint256)"
    )]
    pub struct TradeDisputedFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        #[ethevent(indexed)]
        pub dispute_id: [u8; 32],
        pub filled_at_block: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeFilled",
        abi = "TradeFilled(address,uint256,uint256,uint256)"
    )]
    pub struct TradeFilledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeRequested",
        abi = "TradeRequested(address,address,uint256,uint256,uint256,address,uint256)"
    )]
    pub struct TradeRequestedFilter {
        #[ethevent(indexed)]
        pub token_in: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub token_out: ethers::core::types::Address,
        pub amount_in: ethers::core::types::U256,
        pub min_amount_out: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub to: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TradeSettled", abi = "TradeSettled(address,uint256,uint256)")]
    pub struct TradeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        pub filled_at_block: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "UpdatedFeeForTrade",
        abi = "UpdatedFeeForTrade(address,uint256,uint256)"
    )]
    pub struct UpdatedFeeForTradeFilter {
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
        pub new_fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_array", abi = "log_array(uint256[])")]
    pub struct LogArray1Filter {
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_array", abi = "log_array(int256[])")]
    pub struct LogArray2Filter {
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_array", abi = "log_array(address[])")]
    pub struct LogArray3Filter {
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,uint256[])")]
    pub struct LogNamedArray1Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,int256[])")]
    pub struct LogNamedArray2Filter {
        pub key: String,
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,address[])")]
    pub struct LogNamedArray3Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TradeTestEvents {
        FeeCombinationSetFilter(FeeCombinationSetFilter),
        SafeBlockThresholdSetFilter(SafeBlockThresholdSetFilter),
        TokenWhitelistedFilter(TokenWhitelistedFilter),
        TradeDisputeSettledFilter(TradeDisputeSettledFilter),
        TradeDisputedFilter(TradeDisputedFilter),
        TradeFilledFilter(TradeFilledFilter),
        TradeRequestedFilter(TradeRequestedFilter),
        TradeSettledFilter(TradeSettledFilter),
        UpdatedFeeForTradeFilter(UpdatedFeeForTradeFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogArray1Filter(LogArray1Filter),
        LogArray2Filter(LogArray2Filter),
        LogArray3Filter(LogArray3Filter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedArray1Filter(LogNamedArray1Filter),
        LogNamedArray2Filter(LogNamedArray2Filter),
        LogNamedArray3Filter(LogNamedArray3Filter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for TradeTestEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = FeeCombinationSetFilter::decode_log(log) {
                return Ok(TradeTestEvents::FeeCombinationSetFilter(decoded));
            }
            if let Ok(decoded) = SafeBlockThresholdSetFilter::decode_log(log) {
                return Ok(TradeTestEvents::SafeBlockThresholdSetFilter(decoded));
            }
            if let Ok(decoded) = TokenWhitelistedFilter::decode_log(log) {
                return Ok(TradeTestEvents::TokenWhitelistedFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputeSettledFilter::decode_log(log) {
                return Ok(TradeTestEvents::TradeDisputeSettledFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputedFilter::decode_log(log) {
                return Ok(TradeTestEvents::TradeDisputedFilter(decoded));
            }
            if let Ok(decoded) = TradeFilledFilter::decode_log(log) {
                return Ok(TradeTestEvents::TradeFilledFilter(decoded));
            }
            if let Ok(decoded) = TradeRequestedFilter::decode_log(log) {
                return Ok(TradeTestEvents::TradeRequestedFilter(decoded));
            }
            if let Ok(decoded) = TradeSettledFilter::decode_log(log) {
                return Ok(TradeTestEvents::TradeSettledFilter(decoded));
            }
            if let Ok(decoded) = UpdatedFeeForTradeFilter::decode_log(log) {
                return Ok(TradeTestEvents::UpdatedFeeForTradeFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogArray1Filter::decode_log(log) {
                return Ok(TradeTestEvents::LogArray1Filter(decoded));
            }
            if let Ok(decoded) = LogArray2Filter::decode_log(log) {
                return Ok(TradeTestEvents::LogArray2Filter(decoded));
            }
            if let Ok(decoded) = LogArray3Filter::decode_log(log) {
                return Ok(TradeTestEvents::LogArray3Filter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(TradeTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedArray1Filter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedArray1Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray2Filter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedArray2Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray3Filter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedArray3Filter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for TradeTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TradeTestEvents::FeeCombinationSetFilter(element) => element.fmt(f),
                TradeTestEvents::SafeBlockThresholdSetFilter(element) => element.fmt(f),
                TradeTestEvents::TokenWhitelistedFilter(element) => element.fmt(f),
                TradeTestEvents::TradeDisputeSettledFilter(element) => element.fmt(f),
                TradeTestEvents::TradeDisputedFilter(element) => element.fmt(f),
                TradeTestEvents::TradeFilledFilter(element) => element.fmt(f),
                TradeTestEvents::TradeRequestedFilter(element) => element.fmt(f),
                TradeTestEvents::TradeSettledFilter(element) => element.fmt(f),
                TradeTestEvents::UpdatedFeeForTradeFilter(element) => element.fmt(f),
                TradeTestEvents::LogFilter(element) => element.fmt(f),
                TradeTestEvents::LogAddressFilter(element) => element.fmt(f),
                TradeTestEvents::LogArray1Filter(element) => element.fmt(f),
                TradeTestEvents::LogArray2Filter(element) => element.fmt(f),
                TradeTestEvents::LogArray3Filter(element) => element.fmt(f),
                TradeTestEvents::LogBytesFilter(element) => element.fmt(f),
                TradeTestEvents::LogBytes32Filter(element) => element.fmt(f),
                TradeTestEvents::LogIntFilter(element) => element.fmt(f),
                TradeTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                TradeTestEvents::LogNamedArray1Filter(element) => element.fmt(f),
                TradeTestEvents::LogNamedArray2Filter(element) => element.fmt(f),
                TradeTestEvents::LogNamedArray3Filter(element) => element.fmt(f),
                TradeTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                TradeTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                TradeTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                TradeTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                TradeTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                TradeTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                TradeTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                TradeTestEvents::LogStringFilter(element) => element.fmt(f),
                TradeTestEvents::LogUintFilter(element) => element.fmt(f),
                TradeTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_SCRIPT", abi = "IS_SCRIPT()")]
    pub struct IsScriptCall;
    #[doc = "Container type for all input parameters for the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `setUp` function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `testCannotFillIfAlreadyFilled` function with signature `testCannotFillIfAlreadyFilled()` and selector `[88, 14, 213, 193]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotFillIfAlreadyFilled",
        abi = "testCannotFillIfAlreadyFilled()"
    )]
    pub struct TestCannotFillIfAlreadyFilledCall;
    #[doc = "Container type for all input parameters for the `testCannotFillIfAmountOutIsLessThanMin` function with signature `testCannotFillIfAmountOutIsLessThanMin(uint256)` and selector `[232, 57, 222, 29]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotFillIfAmountOutIsLessThanMin",
        abi = "testCannotFillIfAmountOutIsLessThanMin(uint256)"
    )]
    pub struct TestCannotFillIfAmountOutIsLessThanMinCall {
        pub min_amount_out: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testCannotFillIfDisputed` function with signature `testCannotFillIfDisputed()` and selector `[215, 135, 244, 16]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testCannotFillIfDisputed", abi = "testCannotFillIfDisputed()")]
    pub struct TestCannotFillIfDisputedCall;
    #[doc = "Container type for all input parameters for the `testCannotFillIfNoTokens` function with signature `testCannotFillIfNoTokens(uint256)` and selector `[223, 6, 89, 153]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotFillIfNoTokens",
        abi = "testCannotFillIfNoTokens(uint256)"
    )]
    pub struct TestCannotFillIfNoTokensCall {
        pub amount_out: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testCannotFillTradeWithUpdateFeeWithInvalidSignature` function with signature `testCannotFillTradeWithUpdateFeeWithInvalidSignature()` and selector `[200, 241, 5, 68]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotFillTradeWithUpdateFeeWithInvalidSignature",
        abi = "testCannotFillTradeWithUpdateFeeWithInvalidSignature()"
    )]
    pub struct TestCannotFillTradeWithUpdateFeeWithInvalidSignatureCall;
    #[doc = "Container type for all input parameters for the `testCannotFillWithUpdateFeeForDisputedTrade` function with signature `testCannotFillWithUpdateFeeForDisputedTrade()` and selector `[229, 211, 179, 58]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotFillWithUpdateFeeForDisputedTrade",
        abi = "testCannotFillWithUpdateFeeForDisputedTrade()"
    )]
    pub struct TestCannotFillWithUpdateFeeForDisputedTradeCall;
    #[doc = "Container type for all input parameters for the `testCannotFillWithUpdateFeeForFilledTrade` function with signature `testCannotFillWithUpdateFeeForFilledTrade()` and selector `[212, 128, 48, 194]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotFillWithUpdateFeeForFilledTrade",
        abi = "testCannotFillWithUpdateFeeForFilledTrade()"
    )]
    pub struct TestCannotFillWithUpdateFeeForFilledTradeCall;
    #[doc = "Container type for all input parameters for the `testCannotFillWithUpdateFeePastMax` function with signature `testCannotFillWithUpdateFeePastMax()` and selector `[187, 76, 54, 87]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotFillWithUpdateFeePastMax",
        abi = "testCannotFillWithUpdateFeePastMax()"
    )]
    pub struct TestCannotFillWithUpdateFeePastMaxCall;
    #[doc = "Container type for all input parameters for the `testCannotTradeAboveMaxFee` function with signature `testCannotTradeAboveMaxFee()` and selector `[19, 33, 219, 88]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotTradeAboveMaxFee",
        abi = "testCannotTradeAboveMaxFee()"
    )]
    pub struct TestCannotTradeAboveMaxFeeCall;
    #[doc = "Container type for all input parameters for the `testCannotTradeIfNoBalance` function with signature `testCannotTradeIfNoBalance()` and selector `[132, 177, 128, 147]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotTradeIfNoBalance",
        abi = "testCannotTradeIfNoBalance()"
    )]
    pub struct TestCannotTradeIfNoBalanceCall;
    #[doc = "Container type for all input parameters for the `testCannotTradeNonWhitelistedToken` function with signature `testCannotTradeNonWhitelistedToken(address)` and selector `[216, 114, 129, 136]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotTradeNonWhitelistedToken",
        abi = "testCannotTradeNonWhitelistedToken(address)"
    )]
    pub struct TestCannotTradeNonWhitelistedTokenCall {
        pub token: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `testCannotTradeSameToken` function with signature `testCannotTradeSameToken()` and selector `[15, 30, 133, 174]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testCannotTradeSameToken", abi = "testCannotTradeSameToken()")]
    pub struct TestCannotTradeSameTokenCall;
    #[doc = "Container type for all input parameters for the `testCannotTradeToBlackHole` function with signature `testCannotTradeToBlackHole()` and selector `[168, 96, 76, 239]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotTradeToBlackHole",
        abi = "testCannotTradeToBlackHole()"
    )]
    pub struct TestCannotTradeToBlackHoleCall;
    #[doc = "Container type for all input parameters for the `testCannotTradeZeroAmount` function with signature `testCannotTradeZeroAmount()` and selector `[229, 68, 131, 250]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotTradeZeroAmount",
        abi = "testCannotTradeZeroAmount()"
    )]
    pub struct TestCannotTradeZeroAmountCall;
    #[doc = "Container type for all input parameters for the `testCannotUpdateFeeForFilledTrade` function with signature `testCannotUpdateFeeForFilledTrade()` and selector `[214, 212, 172, 76]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotUpdateFeeForFilledTrade",
        abi = "testCannotUpdateFeeForFilledTrade()"
    )]
    pub struct TestCannotUpdateFeeForFilledTradeCall;
    #[doc = "Container type for all input parameters for the `testCannotUpdateFeePastMax` function with signature `testCannotUpdateFeePastMax()` and selector `[196, 210, 126, 103]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotUpdateFeePastMax",
        abi = "testCannotUpdateFeePastMax()"
    )]
    pub struct TestCannotUpdateFeePastMaxCall;
    #[doc = "Container type for all input parameters for the `testCannotUpdateFeeWithInvalidSignature` function with signature `testCannotUpdateFeeWithInvalidSignature()` and selector `[36, 132, 57, 171]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotUpdateFeeWithInvalidSignature",
        abi = "testCannotUpdateFeeWithInvalidSignature()"
    )]
    pub struct TestCannotUpdateFeeWithInvalidSignatureCall;
    #[doc = "Container type for all input parameters for the `testFillTrade` function with signature `testFillTrade(uint256,uint256)` and selector `[74, 12, 3, 169]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testFillTrade", abi = "testFillTrade(uint256,uint256)")]
    pub struct TestFillTradeCall {
        pub amount_in: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testFillTradeWithUpdatedFee` function with signature `testFillTradeWithUpdatedFee(uint256,uint256)` and selector `[20, 104, 209, 229]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testFillTradeWithUpdatedFee",
        abi = "testFillTradeWithUpdatedFee(uint256,uint256)"
    )]
    pub struct TestFillTradeWithUpdatedFeeCall {
        pub amount_in: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testRequestTrade` function with signature `testRequestTrade(uint256,uint256,uint256)` and selector `[46, 59, 33, 156]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testRequestTrade",
        abi = "testRequestTrade(uint256,uint256,uint256)"
    )]
    pub struct TestRequestTradeCall {
        pub amount_in: ethers::core::types::U256,
        pub amount_out_min: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testUpdateFee` function with signature `testUpdateFee(uint256)` and selector `[209, 114, 183, 97]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testUpdateFee", abi = "testUpdateFee(uint256)")]
    pub struct TestUpdateFeeCall {
        pub new_fee_pct: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TradeTestCalls {
        IsScript(IsScriptCall),
        IsTest(IsTestCall),
        Failed(FailedCall),
        SetUp(SetUpCall),
        TestCannotFillIfAlreadyFilled(TestCannotFillIfAlreadyFilledCall),
        TestCannotFillIfAmountOutIsLessThanMin(TestCannotFillIfAmountOutIsLessThanMinCall),
        TestCannotFillIfDisputed(TestCannotFillIfDisputedCall),
        TestCannotFillIfNoTokens(TestCannotFillIfNoTokensCall),
        TestCannotFillTradeWithUpdateFeeWithInvalidSignature(
            TestCannotFillTradeWithUpdateFeeWithInvalidSignatureCall,
        ),
        TestCannotFillWithUpdateFeeForDisputedTrade(
            TestCannotFillWithUpdateFeeForDisputedTradeCall,
        ),
        TestCannotFillWithUpdateFeeForFilledTrade(TestCannotFillWithUpdateFeeForFilledTradeCall),
        TestCannotFillWithUpdateFeePastMax(TestCannotFillWithUpdateFeePastMaxCall),
        TestCannotTradeAboveMaxFee(TestCannotTradeAboveMaxFeeCall),
        TestCannotTradeIfNoBalance(TestCannotTradeIfNoBalanceCall),
        TestCannotTradeNonWhitelistedToken(TestCannotTradeNonWhitelistedTokenCall),
        TestCannotTradeSameToken(TestCannotTradeSameTokenCall),
        TestCannotTradeToBlackHole(TestCannotTradeToBlackHoleCall),
        TestCannotTradeZeroAmount(TestCannotTradeZeroAmountCall),
        TestCannotUpdateFeeForFilledTrade(TestCannotUpdateFeeForFilledTradeCall),
        TestCannotUpdateFeePastMax(TestCannotUpdateFeePastMaxCall),
        TestCannotUpdateFeeWithInvalidSignature(TestCannotUpdateFeeWithInvalidSignatureCall),
        TestFillTrade(TestFillTradeCall),
        TestFillTradeWithUpdatedFee(TestFillTradeWithUpdatedFeeCall),
        TestRequestTrade(TestRequestTradeCall),
        TestUpdateFee(TestUpdateFeeCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for TradeTestCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) =
                <IsScriptCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::IsScript(decoded));
            }
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) =
                <TestCannotFillIfAlreadyFilledCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotFillIfAlreadyFilled(decoded));
            }
            if let Ok(decoded) =
                <TestCannotFillIfAmountOutIsLessThanMinCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotFillIfAmountOutIsLessThanMin(
                    decoded,
                ));
            }
            if let Ok(decoded) =
                <TestCannotFillIfDisputedCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotFillIfDisputed(decoded));
            }
            if let Ok(decoded) =
                <TestCannotFillIfNoTokensCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotFillIfNoTokens(decoded));
            }
            if let Ok (decoded) = < TestCannotFillTradeWithUpdateFeeWithInvalidSignatureCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (TradeTestCalls :: TestCannotFillTradeWithUpdateFeeWithInvalidSignature (decoded)) }
            if let Ok (decoded) = < TestCannotFillWithUpdateFeeForDisputedTradeCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (TradeTestCalls :: TestCannotFillWithUpdateFeeForDisputedTrade (decoded)) }
            if let Ok (decoded) = < TestCannotFillWithUpdateFeeForFilledTradeCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (TradeTestCalls :: TestCannotFillWithUpdateFeeForFilledTrade (decoded)) }
            if let Ok(decoded) =
                <TestCannotFillWithUpdateFeePastMaxCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotFillWithUpdateFeePastMax(decoded));
            }
            if let Ok(decoded) =
                <TestCannotTradeAboveMaxFeeCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotTradeAboveMaxFee(decoded));
            }
            if let Ok(decoded) =
                <TestCannotTradeIfNoBalanceCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotTradeIfNoBalance(decoded));
            }
            if let Ok(decoded) =
                <TestCannotTradeNonWhitelistedTokenCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotTradeNonWhitelistedToken(decoded));
            }
            if let Ok(decoded) =
                <TestCannotTradeSameTokenCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotTradeSameToken(decoded));
            }
            if let Ok(decoded) =
                <TestCannotTradeToBlackHoleCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotTradeToBlackHole(decoded));
            }
            if let Ok(decoded) =
                <TestCannotTradeZeroAmountCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotTradeZeroAmount(decoded));
            }
            if let Ok(decoded) =
                <TestCannotUpdateFeeForFilledTradeCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotUpdateFeeForFilledTrade(decoded));
            }
            if let Ok(decoded) =
                <TestCannotUpdateFeePastMaxCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotUpdateFeePastMax(decoded));
            }
            if let Ok (decoded) = < TestCannotUpdateFeeWithInvalidSignatureCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (TradeTestCalls :: TestCannotUpdateFeeWithInvalidSignature (decoded)) }
            if let Ok(decoded) =
                <TestFillTradeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::TestFillTrade(decoded));
            }
            if let Ok(decoded) =
                <TestFillTradeWithUpdatedFeeCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestFillTradeWithUpdatedFee(decoded));
            }
            if let Ok(decoded) =
                <TestRequestTradeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::TestRequestTrade(decoded));
            }
            if let Ok(decoded) =
                <TestUpdateFeeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::TestUpdateFee(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(TradeTestCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for TradeTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                TradeTestCalls::IsScript(element) => element.encode(),
                TradeTestCalls::IsTest(element) => element.encode(),
                TradeTestCalls::Failed(element) => element.encode(),
                TradeTestCalls::SetUp(element) => element.encode(),
                TradeTestCalls::TestCannotFillIfAlreadyFilled(element) => element.encode(),
                TradeTestCalls::TestCannotFillIfAmountOutIsLessThanMin(element) => element.encode(),
                TradeTestCalls::TestCannotFillIfDisputed(element) => element.encode(),
                TradeTestCalls::TestCannotFillIfNoTokens(element) => element.encode(),
                TradeTestCalls::TestCannotFillTradeWithUpdateFeeWithInvalidSignature(element) => {
                    element.encode()
                }
                TradeTestCalls::TestCannotFillWithUpdateFeeForDisputedTrade(element) => {
                    element.encode()
                }
                TradeTestCalls::TestCannotFillWithUpdateFeeForFilledTrade(element) => {
                    element.encode()
                }
                TradeTestCalls::TestCannotFillWithUpdateFeePastMax(element) => element.encode(),
                TradeTestCalls::TestCannotTradeAboveMaxFee(element) => element.encode(),
                TradeTestCalls::TestCannotTradeIfNoBalance(element) => element.encode(),
                TradeTestCalls::TestCannotTradeNonWhitelistedToken(element) => element.encode(),
                TradeTestCalls::TestCannotTradeSameToken(element) => element.encode(),
                TradeTestCalls::TestCannotTradeToBlackHole(element) => element.encode(),
                TradeTestCalls::TestCannotTradeZeroAmount(element) => element.encode(),
                TradeTestCalls::TestCannotUpdateFeeForFilledTrade(element) => element.encode(),
                TradeTestCalls::TestCannotUpdateFeePastMax(element) => element.encode(),
                TradeTestCalls::TestCannotUpdateFeeWithInvalidSignature(element) => {
                    element.encode()
                }
                TradeTestCalls::TestFillTrade(element) => element.encode(),
                TradeTestCalls::TestFillTradeWithUpdatedFee(element) => element.encode(),
                TradeTestCalls::TestRequestTrade(element) => element.encode(),
                TradeTestCalls::TestUpdateFee(element) => element.encode(),
                TradeTestCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for TradeTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TradeTestCalls::IsScript(element) => element.fmt(f),
                TradeTestCalls::IsTest(element) => element.fmt(f),
                TradeTestCalls::Failed(element) => element.fmt(f),
                TradeTestCalls::SetUp(element) => element.fmt(f),
                TradeTestCalls::TestCannotFillIfAlreadyFilled(element) => element.fmt(f),
                TradeTestCalls::TestCannotFillIfAmountOutIsLessThanMin(element) => element.fmt(f),
                TradeTestCalls::TestCannotFillIfDisputed(element) => element.fmt(f),
                TradeTestCalls::TestCannotFillIfNoTokens(element) => element.fmt(f),
                TradeTestCalls::TestCannotFillTradeWithUpdateFeeWithInvalidSignature(element) => {
                    element.fmt(f)
                }
                TradeTestCalls::TestCannotFillWithUpdateFeeForDisputedTrade(element) => {
                    element.fmt(f)
                }
                TradeTestCalls::TestCannotFillWithUpdateFeeForFilledTrade(element) => {
                    element.fmt(f)
                }
                TradeTestCalls::TestCannotFillWithUpdateFeePastMax(element) => element.fmt(f),
                TradeTestCalls::TestCannotTradeAboveMaxFee(element) => element.fmt(f),
                TradeTestCalls::TestCannotTradeIfNoBalance(element) => element.fmt(f),
                TradeTestCalls::TestCannotTradeNonWhitelistedToken(element) => element.fmt(f),
                TradeTestCalls::TestCannotTradeSameToken(element) => element.fmt(f),
                TradeTestCalls::TestCannotTradeToBlackHole(element) => element.fmt(f),
                TradeTestCalls::TestCannotTradeZeroAmount(element) => element.fmt(f),
                TradeTestCalls::TestCannotUpdateFeeForFilledTrade(element) => element.fmt(f),
                TradeTestCalls::TestCannotUpdateFeePastMax(element) => element.fmt(f),
                TradeTestCalls::TestCannotUpdateFeeWithInvalidSignature(element) => element.fmt(f),
                TradeTestCalls::TestFillTrade(element) => element.fmt(f),
                TradeTestCalls::TestFillTradeWithUpdatedFee(element) => element.fmt(f),
                TradeTestCalls::TestRequestTrade(element) => element.fmt(f),
                TradeTestCalls::TestUpdateFee(element) => element.fmt(f),
                TradeTestCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsScriptCall> for TradeTestCalls {
        fn from(var: IsScriptCall) -> Self {
            TradeTestCalls::IsScript(var)
        }
    }
    impl ::std::convert::From<IsTestCall> for TradeTestCalls {
        fn from(var: IsTestCall) -> Self {
            TradeTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<FailedCall> for TradeTestCalls {
        fn from(var: FailedCall) -> Self {
            TradeTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for TradeTestCalls {
        fn from(var: SetUpCall) -> Self {
            TradeTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<TestCannotFillIfAlreadyFilledCall> for TradeTestCalls {
        fn from(var: TestCannotFillIfAlreadyFilledCall) -> Self {
            TradeTestCalls::TestCannotFillIfAlreadyFilled(var)
        }
    }
    impl ::std::convert::From<TestCannotFillIfAmountOutIsLessThanMinCall> for TradeTestCalls {
        fn from(var: TestCannotFillIfAmountOutIsLessThanMinCall) -> Self {
            TradeTestCalls::TestCannotFillIfAmountOutIsLessThanMin(var)
        }
    }
    impl ::std::convert::From<TestCannotFillIfDisputedCall> for TradeTestCalls {
        fn from(var: TestCannotFillIfDisputedCall) -> Self {
            TradeTestCalls::TestCannotFillIfDisputed(var)
        }
    }
    impl ::std::convert::From<TestCannotFillIfNoTokensCall> for TradeTestCalls {
        fn from(var: TestCannotFillIfNoTokensCall) -> Self {
            TradeTestCalls::TestCannotFillIfNoTokens(var)
        }
    }
    impl ::std::convert::From<TestCannotFillTradeWithUpdateFeeWithInvalidSignatureCall>
        for TradeTestCalls
    {
        fn from(var: TestCannotFillTradeWithUpdateFeeWithInvalidSignatureCall) -> Self {
            TradeTestCalls::TestCannotFillTradeWithUpdateFeeWithInvalidSignature(var)
        }
    }
    impl ::std::convert::From<TestCannotFillWithUpdateFeeForDisputedTradeCall> for TradeTestCalls {
        fn from(var: TestCannotFillWithUpdateFeeForDisputedTradeCall) -> Self {
            TradeTestCalls::TestCannotFillWithUpdateFeeForDisputedTrade(var)
        }
    }
    impl ::std::convert::From<TestCannotFillWithUpdateFeeForFilledTradeCall> for TradeTestCalls {
        fn from(var: TestCannotFillWithUpdateFeeForFilledTradeCall) -> Self {
            TradeTestCalls::TestCannotFillWithUpdateFeeForFilledTrade(var)
        }
    }
    impl ::std::convert::From<TestCannotFillWithUpdateFeePastMaxCall> for TradeTestCalls {
        fn from(var: TestCannotFillWithUpdateFeePastMaxCall) -> Self {
            TradeTestCalls::TestCannotFillWithUpdateFeePastMax(var)
        }
    }
    impl ::std::convert::From<TestCannotTradeAboveMaxFeeCall> for TradeTestCalls {
        fn from(var: TestCannotTradeAboveMaxFeeCall) -> Self {
            TradeTestCalls::TestCannotTradeAboveMaxFee(var)
        }
    }
    impl ::std::convert::From<TestCannotTradeIfNoBalanceCall> for TradeTestCalls {
        fn from(var: TestCannotTradeIfNoBalanceCall) -> Self {
            TradeTestCalls::TestCannotTradeIfNoBalance(var)
        }
    }
    impl ::std::convert::From<TestCannotTradeNonWhitelistedTokenCall> for TradeTestCalls {
        fn from(var: TestCannotTradeNonWhitelistedTokenCall) -> Self {
            TradeTestCalls::TestCannotTradeNonWhitelistedToken(var)
        }
    }
    impl ::std::convert::From<TestCannotTradeSameTokenCall> for TradeTestCalls {
        fn from(var: TestCannotTradeSameTokenCall) -> Self {
            TradeTestCalls::TestCannotTradeSameToken(var)
        }
    }
    impl ::std::convert::From<TestCannotTradeToBlackHoleCall> for TradeTestCalls {
        fn from(var: TestCannotTradeToBlackHoleCall) -> Self {
            TradeTestCalls::TestCannotTradeToBlackHole(var)
        }
    }
    impl ::std::convert::From<TestCannotTradeZeroAmountCall> for TradeTestCalls {
        fn from(var: TestCannotTradeZeroAmountCall) -> Self {
            TradeTestCalls::TestCannotTradeZeroAmount(var)
        }
    }
    impl ::std::convert::From<TestCannotUpdateFeeForFilledTradeCall> for TradeTestCalls {
        fn from(var: TestCannotUpdateFeeForFilledTradeCall) -> Self {
            TradeTestCalls::TestCannotUpdateFeeForFilledTrade(var)
        }
    }
    impl ::std::convert::From<TestCannotUpdateFeePastMaxCall> for TradeTestCalls {
        fn from(var: TestCannotUpdateFeePastMaxCall) -> Self {
            TradeTestCalls::TestCannotUpdateFeePastMax(var)
        }
    }
    impl ::std::convert::From<TestCannotUpdateFeeWithInvalidSignatureCall> for TradeTestCalls {
        fn from(var: TestCannotUpdateFeeWithInvalidSignatureCall) -> Self {
            TradeTestCalls::TestCannotUpdateFeeWithInvalidSignature(var)
        }
    }
    impl ::std::convert::From<TestFillTradeCall> for TradeTestCalls {
        fn from(var: TestFillTradeCall) -> Self {
            TradeTestCalls::TestFillTrade(var)
        }
    }
    impl ::std::convert::From<TestFillTradeWithUpdatedFeeCall> for TradeTestCalls {
        fn from(var: TestFillTradeWithUpdatedFeeCall) -> Self {
            TradeTestCalls::TestFillTradeWithUpdatedFee(var)
        }
    }
    impl ::std::convert::From<TestRequestTradeCall> for TradeTestCalls {
        fn from(var: TestRequestTradeCall) -> Self {
            TradeTestCalls::TestRequestTrade(var)
        }
    }
    impl ::std::convert::From<TestUpdateFeeCall> for TradeTestCalls {
        fn from(var: TestUpdateFeeCall) -> Self {
            TradeTestCalls::TestUpdateFee(var)
        }
    }
    impl ::std::convert::From<VmCall> for TradeTestCalls {
        fn from(var: VmCall) -> Self {
            TradeTestCalls::Vm(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_SCRIPT` function with signature `IS_SCRIPT()` and selector `[248, 204, 191, 71]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsScriptReturn(pub bool);
    #[doc = "Container type for all return fields from the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct IsTestReturn(pub bool);
    #[doc = "Container type for all return fields from the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct FailedReturn(pub bool);
    #[doc = "Container type for all return fields from the `vm` function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct VmReturn(pub ethers::core::types::Address);
}
