pub use tradetest_mod::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod tradetest_mod {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "TradeTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    pub static TRADETEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            serde_json :: from_str ("[{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newMaxFeePct\",\"type\":\"uint128\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"MaxFeePctChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSafeBlockThreshold\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"SafeBlockThresholdChanged\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TokenWhitelisted\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeDisputed\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAtBlock\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeFilled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"tradeIndex\",\"type\":\"uint256\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"TradeRequested\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"filledAmount\",\"type\":\"uint256\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"TradeSettled\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"tradeId\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"newFeePct\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"UpdatedFeeForTrade\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"msg\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"WARNING_Deprecated\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"bound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"bool\",\"name\":\"adjust\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deal\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"what\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deployCode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"hoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"rewind\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"skip\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"startHoax\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotFillIfAlreadyFilled\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotFillIfNoTokens\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotFillTradeWithUpdateFeeWithInvalidSignature\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotFillWithUpdateFeeForFilledTrade\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotFillWithUpdateFeePastMax\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotTradeAboveMaxFee\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotTradeIfNoBalance\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotTradeNonWhitelistedToken\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotTradeSameToken\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotTradeToBlackHole\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotTradeZeroAmount\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotUpdateFeeForFilledTrade\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotUpdateFeePastMax\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testCannotUpdateFeeWithInvalidSignature\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testFillTrade\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"newFeePct\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testFillTradeWithUpdatedFee\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testRequestTrade\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testUpdateFee\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"give\",\"type\":\"uint256\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"tip\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"vm\",\"outputs\":[{\"internalType\":\"contract Vm\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]") . expect ("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static TRADETEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060408190526000805460ff191660011790556001625e79b760e01b031990527f81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a608452737109709ecfa91a80626ff3989d68f67f5b1dd12d63ffa1864960a46020604051808303816000875af115801562000080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a69190620005e3565b600880546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b66004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af11580156200013b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001619190620005e3565b600980546001600160a01b0319166001600160a01b03929092169190911790556040516001625e79b760e01b031981527f9791f723bf26b668c8cac0664b66d058cdb2a424cfb08c05dd9da570be0eff6f6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015620001f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021c9190620005e3565b600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002bb73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506006604051602001620002a591906200060e565b60408051601f198184030181529190526200040c565b600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200038c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518060400160405280601a81526020017f546f6b656e466978747572652e736f6c3a4d6f636b546f6b656e0000000000008152506012604051602001620002a591906060808252600d908201526c2bb930b83832b21022ba3432b960991b608082015260a060208201819052600490820152630ae8aa8960e31b60c082015260ff91909116604082015260e00190565b600c80546001600160a01b039283166001600160a01b031991821681179092556064600f55601080548216909217909155600b54601180548316918416919091179055662386f26fc10000601255670de0b6b3a7640000601355600a546014805490921692169190911790553480156200040557600080fd5b50620007eb565b60006001600160a01b0384163b80156200042a5784915050620004a8565b6000620004388585620004af565b9050806001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000479573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620004a391908101906200072e565b509150505b9392505050565b604051638d1cc92560e01b81526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d90638d1cc92590620004ed90879060040162000783565b6000604051808303816000875af11580156200050d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200053791908101906200072e565b836040516020016200054b929190620007b8565b60405160208183030381529060405290508051602082016000f091506001600160a01b038216620005dc5760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b606482015260840160405180910390fd5b5092915050565b600060208284031215620005f657600080fd5b81516001600160a01b0381168114620004a857600080fd5b606081526000620006336060830160048152635553444360e01b602082015260400190565b8281036020840152620006578160048152635553444360e01b602082015260400190565b91505060ff8316604083015292915050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200069c57818101518382015260200162000682565b83811115620006ac576000848401525b50505050565b60006001600160401b0380841115620006cf57620006cf62000669565b604051601f8501601f19908116603f01168101908282118183101715620006fa57620006fa62000669565b816040528093508581528686860111156200071457600080fd5b620007248660208301876200067f565b5050509392505050565b6000602082840312156200074157600080fd5b81516001600160401b038111156200075857600080fd5b8201601f810184136200076a57600080fd5b6200077b84825160208401620006b2565b949350505050565b6020815260008251806020840152620007a48160408501602087016200067f565b601f01601f19169190910160400192915050565b60008351620007cc8184602088016200067f565b835190830190620007e28183602088016200067f565b01949350505050565b61962580620007fb6000396000f3fe60806040523480156200001157600080fd5b50600436106200026d5760003560e01c80639a8325a01162000155578063d21ce7f811620000c7578063df0659991162000086578063df0659991462000516578063e372fa39146200052d578063e54483fa1462000544578063e9a79a7b146200054e578063fa7626d4146200056557600080fd5b8063d21ce7f814620004bd578063d48030c214620004d4578063d6d4ac4c14620004de578063d82555f114620004e8578063d872818814620004ff57600080fd5b8063bb4c36571162000114578063bb4c36571462000471578063c4d27e67146200047b578063c88a5e6d1462000485578063c8f10544146200049c578063d06d822914620004a657600080fd5b80639a8325a01462000407578063a8604cef146200041e578063af9bbe5f1462000428578063b9c071b4146200043f578063ba414fa6146200045657600080fd5b8063332e778e11620001ef5780635a6c1eed11620001ae5780635a6c1eed14620003925780636bce989b14620003b85780636f59707514620003cf57806384b1809314620003e657806397754ae914620003f057600080fd5b8063332e778e146200032c5780633a76846314620003365780633bf82db1146200034d5780634a0c03a914620003645780635061be4b146200037b57600080fd5b8063233240ee116200023c578063233240ee14620002a9578063248439ab14620002c057806329a9e30014620002ca57806329ce9dde14620002e15780632d6c17a3146200031557600080fd5b80630a9254e414620002725780630f1e85ae146200027e578063108554f214620002885780631321db58146200029f575b600080fd5b6200027c62000573565b005b6200027c6200057f565b6200027c62000299366004620064a0565b6200066a565b6200027c62000743565b6200027c620002ba366004620064cf565b620008ec565b6200027c62000996565b6200027c620002db366004620064f6565b62000b94565b620002f8620002f23660046200660f565b62000c46565b6040516001600160a01b0390911681526020015b60405180910390f35b6200027c620003263660046200668f565b62000d76565b6200027c62000db6565b620002f86000805160206200959083398151915281565b6200027c6200035e366004620066a9565b62000fc7565b6200027c62000375366004620066ef565b620010a9565b6200027c6200038c36600462006712565b620015db565b620003a9620003a336600462006712565b62001be4565b6040519081526020016200030c565b6200027c620003c9366004620066a9565b62001d1d565b6200027c620003e0366004620064cf565b62001d31565b6200027c62001ddb565b6200027c620004013660046200674e565b62001f24565b620002f862000418366004620067a8565b6200213e565b6200027c62002240565b6200027c62000439366004620066a9565b620022f8565b6200027c620004503660046200668f565b620023a6565b62000460620023c7565b60405190151581526020016200030c565b6200027c620024f8565b6200027c62002774565b6200027c62000496366004620064a0565b62002962565b6200027c62002998565b6200027c620004b7366004620064f6565b62002aeb565b6200027c620004ce366004620066ef565b62002b9d565b6200027c62002fa3565b6200027c62003116565b6200027c620004f9366004620066a9565b62003294565b6200027c62000510366004620064cf565b62003345565b6200027c620005273660046200668f565b6200350b565b6200027c6200053e366004620066ef565b620036bc565b6200027c62003973565b6200027c6200055f366004620064a0565b62003a2c565b600054620004609060ff1681565b6200057d62003ad2565b565b604051630618f58760e51b8152600080516020620095908339815191529063c31eb0e090620005ba90631d2792fb60e31b90600401620067e9565b600060405180830381600087803b158015620005d557600080fd5b505af1158015620005ea573d6000803e3d6000fd5b5050600e54600b54601354601254601454604051639170c05b60e01b81526001600160a01b039586169750639170c05b9650620006349594851694859493921690600401620067fe565b600060405180830381600087803b1580156200064f57600080fd5b505af115801562000664573d6000803e3d6000fd5b50505050565b60405163c88a5e6d60e01b8152600080516020620095908339815191529063c88a5e6d90620006a090859085906004016200682e565b600060405180830381600087803b158015620006bb57600080fd5b505af1158015620006d0573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03851660048201526000805160206200959083398151915292506306447d5691506024015b600060405180830381600087803b1580156200072657600080fd5b505af11580156200073b573d6000803e3d6000fd5b505050505050565b600e5460408051637e388e1d60e11b815290516000926001600160a01b03169163fc711c3a9160048083019260209291908290030181865afa1580156200078e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007b4919062006847565b620007c190600162006888565b604080516001600160801b0392909216602480840182905282518085039091018152604490930182526020830180516001600160e01b03166305bf279d60e41b179052905163f28dceb360e01b8152909250600080516020620095908339815191529163f28dceb39162000839919060040162006913565b600060405180830381600087803b1580156200085457600080fd5b505af115801562000869573d6000803e3d6000fd5b5050600e54601054601154601354601454604051639170c05b60e01b81526001600160a01b039586169750639170c05b9650620008b595948516949384169389921690600401620067fe565b600060405180830381600087803b158015620008d057600080fd5b505af1158015620008e5573d6000803e3d6000fd5b5050505050565b60405163c88a5e6d60e01b8152600080516020620095908339815191529063c88a5e6d9062000926908490600160801b906004016200682e565b600060405180830381600087803b1580156200094157600080fd5b505af115801562000956573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038416600482015260008051602062009590833981519152925063ca669fa79150602401620008b5565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa158015620009e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a07919062006847565b62000a1490600162006888565b60105460115460135460125460145460405195965060009562000a4f956001600160a01b039081169581169493921690889060200162006928565b6040516020818303038152906040528051906020012090506000601254600162000a7a91906200696b565b9050600062000aab7f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b6848462004227565b604051630618f58760e51b8152909150600080516020620095908339815191529063c31eb0e09062000ae9906324a0dbd760e21b90600401620067e9565b600060405180830381600087803b15801562000b0457600080fd5b505af115801562000b19573d6000803e3d6000fd5b5050600e54600854604051639362776f60e01b81526001600160a01b039283169450639362776f935062000b5a929091169087908790879060040162006986565b600060405180830381600087803b15801562000b7557600080fd5b505af115801562000b8a573d6000803e3d6000fd5b5050505050505050565b60405163c88a5e6d60e01b8152600080516020620095908339815191529063c88a5e6d9062000bce908590600160801b906004016200682e565b600060405180830381600087803b15801562000be957600080fd5b505af115801562000bfe573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b038086166004830152841660248201526000805160206200959083398151915292506347e50cce91506044016200070b565b604051638d1cc92560e01b815260009081906000805160206200959083398151915290638d1cc9259062000c7f90879060040162006913565b6000604051808303816000875af115801562000c9f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000cc99190810190620069b5565b8360405160200162000cdd92919062006a35565b60405160208183030381529060405290508051602082016000f091506001600160a01b03821662000d6f5760405162461bcd60e51b815260206004820152603160248201527f54657374206465706c6f79436f646528737472696e672c6279746573293a204460448201527032b83637bcb6b2b73a103330b4b632b21760791b60648201526084015b60405180910390fd5b5092915050565b6000805160206200959083398151915263e5d6bf0262000d97834262006a5f565b6040518263ffffffff1660e01b8152600401620008b591815260200190565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa15801562000e01573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e27919062006847565b62000e3490600162006888565b6010546011546013546012546014546040516001600160801b0396909616965060009562000e7a956001600160a01b039081169581169493921690889060200162006a79565b6040516020818303038152906040528051906020012090506000601254600162000ea591906200696b565b9050600062000ec5600080516020620095b0833981519152848462004227565b600e546040516381bad6f360e01b815291925060008051602062009590833981519152916381bad6f39162000f1391600191829160009183916001600160a01b039091169060040162006ab4565b600060405180830381600087803b15801562000f2e57600080fd5b505af115801562000f43573d6000803e3d6000fd5b50506008546040518581528693506001600160a01b0390911691507f2932e14c54a9749927aed2cd6d014eb7cd6a224f5fe6dfb944d9ced9b04c4f479060200160405180910390a3600e54600854604051639362776f60e01b81526001600160a01b0392831692639362776f9262000b5a9291169087908790879060040162006986565b60405163c88a5e6d60e01b8152600080516020620095908339815191529063c88a5e6d9062000ffd90869085906004016200682e565b600060405180830381600087803b1580156200101857600080fd5b505af11580156200102d573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b038087166004830152851660248201526000805160206200959083398151915292506345b5607891506044015b600060405180830381600087803b1580156200108b57600080fd5b505af1158015620010a0573d6000803e3d6000fd5b50505050505050565b604051632631f2b160e11b815282151560048201526000805160206200959083398151915290634c63e56290602401600060405180830381600087803b158015620010f357600080fd5b505af115801562001108573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062009590833981519152925063ca669fa79150602401600060405180830381600087803b1580156200116157600080fd5b505af115801562001176573d6000803e3d6000fd5b50506010546008546200119993506001600160a01b039182169250168462001d1d565b6010546011546012546014546008546000948594620011d0946001600160a01b0392831694918316938a93919282169116620042f0565b601154600954929450909250620011f5916001600160a01b0391821691168562001d1d565b6011546009546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa15801562001247573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200126d919062006ae4565b60095460405163ca669fa760e01b81526001600160a01b039091166004820152909150600080516020620095908339815191529063ca669fa790602401600060405180830381600087803b158015620012c557600080fd5b505af1158015620012da573d6000803e3d6000fd5b5050600e546040516381bad6f360e01b81526000805160206200959083398151915293506381bad6f3925062001326916001918291829182916001600160a01b03169060040162006ab4565b600060405180830381600087803b1580156200134157600080fd5b505af115801562001356573d6000803e3d6000fd5b505060095460125460408051918252602082018990524394508693506001600160a01b03909216917f9e2cd6515276369145ad3c2ee5eb7c8f09ca9c99e8e7d6e68de40895a72f3464910160405180910390a4600e54601054601154601254601454604051634159761f60e11b81526001600160a01b03958616956382b2ec3e95620013f79590821694908216938d93919216908b908d9060040162006afe565b600060405180830381600087803b1580156200141257600080fd5b505af115801562001427573d6000803e3d6000fd5b50506011546009546040516370a0823160e01b81526001600160a01b039182166004820152620014b994508893509116906370a08231906024015b602060405180830381865afa15801562001480573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014a6919062006ae4565b620014b291906200696b565b8262004490565b600e546000906200152f90620015299085906200150d90639501325f60e01b90620014f0906001906001600160a01b03166200458b565b9060038201805463ffffffff191660e09290921c91909117905590565b9060028201805460018101825560009182526020909120015590565b620045b0565b90506200153d814362004490565b600e546000906200157a90620015749086906200150d9063d70e3dfd60e01b90620014f0906001906001600160a01b03166200458b565b620045d8565b600954909150620015969082906001600160a01b0316620045fa565b600e54600090620015cd90620015299087906200150d906302c82def60e21b90620014f0906001906001600160a01b03166200458b565b905062000b8a818862004490565b604051632631f2b160e11b815283151560048201526000805160206200959083398151915290634c63e56290602401600060405180830381600087803b1580156200162557600080fd5b505af11580156200163a573d6000803e3d6000fd5b5050600e5460408051637e388e1d60e11b81529051600080516020620095908339815191529450634c63e56293506001600160a01b039092169163fc711c3a916004808201926020929091908290030181865afa158015620016a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016c6919062006847565b6001600160801b031683106040518263ffffffff1660e01b8152600401620016f2911515815260200190565b600060405180830381600087803b1580156200170d57600080fd5b505af115801562001722573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062009590833981519152925063ca669fa79150602401600060405180830381600087803b1580156200177b57600080fd5b505af115801562001790573d6000803e3d6000fd5b5050601054600854620017b393506001600160a01b039182169250168562001d1d565b6010546011546012546014546008546000948594620017ea946001600160a01b0392831694918316938b93919282169116620042f0565b909250905060006200180d600080516020620095b0833981519152838662004227565b6011546009549192506200182f916001600160a01b0391821691168762001d1d565b6011546009546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa15801562001881573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018a7919062006ae4565b60095460405163ca669fa760e01b81526001600160a01b039091166004820152909150600080516020620095908339815191529063ca669fa790602401600060405180830381600087803b158015620018ff57600080fd5b505af115801562001914573d6000803e3d6000fd5b5050600e546040516381bad6f360e01b81526000805160206200959083398151915293506381bad6f3925062001960916001918291829182916001600160a01b03169060040162006ab4565b600060405180830381600087803b1580156200197b57600080fd5b505af115801562001990573d6000803e3d6000fd5b505060095460408051898152602081018b90524394508793506001600160a01b03909216917f9e2cd6515276369145ad3c2ee5eb7c8f09ca9c99e8e7d6e68de40895a72f3464910160405180910390a4600e60009054906101000a90046001600160a01b03166001600160a01b031663d8642295601060009054906101000a90046001600160a01b0316601160009054906101000a90046001600160a01b03168a601254601460009054906101000a90046001600160a01b03168a8d600860009054906101000a90046001600160a01b03168e8c6040518b63ffffffff1660e01b815260040162001a8b9a9998979695949392919062006b49565b600060405180830381600087803b15801562001aa657600080fd5b505af115801562001abb573d6000803e3d6000fd5b50506011546009546040516370a0823160e01b81526001600160a01b03918216600482015262001afb94508a93509116906370a082319060240162001462565b600e5460009062001b3290620015299086906200150d90639501325f60e01b90620014f0906001906001600160a01b03166200458b565b905062001b40814362004490565b600e5460009062001b7790620015749087906200150d9063d70e3dfd60e01b90620014f0906001906001600160a01b03166200458b565b60095490915062001b939082906001600160a01b0316620045fa565b600e5460009062001bca90620015299088906200150d906302c82def60e21b90620014f0906001906001600160a01b03166200458b565b905062001bd8818a62004490565b50505050505050505050565b60008183111562001c5e5760405162461bcd60e51b815260206004820152603a60248201527f5465737420626f756e642875696e743235362c75696e743235362c75696e743260448201527f3536293a204d6178206973206c657373207468616e206d696e2e000000000000606482015260840162000d66565b600062001c6c848462006a5f565b90508060000362001c805783915062001cc0565b600019810362001c935784915062001cc0565b62001c9e8162006bc1565b9050600062001cae828762006bdd565b905062001cbc81866200696b565b9250505b60408051818152600c818301526b109bdd5b990814995cdd5b1d60a21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1509392505050565b62001d2c838383600062001f24565b505050565b60405163c88a5e6d60e01b8152600080516020620095908339815191529063c88a5e6d9062001d6b908490600160801b906004016200682e565b600060405180830381600087803b15801562001d8657600080fd5b505af115801562001d9b573d6000803e3d6000fd5b50506040516303223eab60e11b81526001600160a01b03841660048201526000805160206200959083398151915292506306447d569150602401620008b5565b60408051808201825260148152731514905394d1915497d19493d357d1905253115160621b6020820152905163f28dceb360e01b8152600080516020620095908339815191529163f28dceb39162001e37919060040162006913565b600060405180830381600087803b15801562001e5257600080fd5b505af115801562001e67573d6000803e3d6000fd5b505060085460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062009590833981519152925063ca669fa79150602401600060405180830381600087803b15801562001ec057600080fd5b505af115801562001ed5573d6000803e3d6000fd5b5050600e54601054601154601354601254601454604051639170c05b60e01b81526001600160a01b039687169850639170c05b97506200063496958616959485169490911690600401620067fe565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009287169162001f7a9162006c00565b6000604051808303816000865af19150503d806000811462001fb9576040519150601f19603f3d011682016040523d82523d6000602084013e62001fbe565b606091505b5091505060008180602001905181019062001fda919062006ae4565b90506200202f84620020288762001fff6370a0823160e01b620014f060018d6200458b565b90600282018054600181018255600091825260209091206001600160a01b039290921691015590565b90620046f4565b82156200073b5760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290516000916001600160a01b038916916200207a919062006c00565b6000604051808303816000865af19150503d8060008114620020b9576040519150601f19603f3d011682016040523d82523d6000602084013e620020be565b606091505b50915050600081806020019051810190620020da919062006ae4565b9050828610156200210557620020f1868462006a5f565b620020fd908262006a5f565b905062002120565b62002111838762006a5f565b6200211d90826200696b565b90505b62000b8a81620020286318160ddd60e01b620014f060018d6200458b565b604051638d1cc92560e01b815260009081906000805160206200959083398151915290638d1cc925906200217790869060040162006913565b6000604051808303816000875af115801562002197573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620021c19190810190620069b5565b90508051602082016000f091506001600160a01b0382166200223a5760405162461bcd60e51b815260206004820152602b60248201527f54657374206465706c6f79436f646528737472696e67293a204465706c6f796d60448201526a32b73a103330b4b632b21760a91b606482015260840162000d66565b50919050565b604051630618f58760e51b8152600090600080516020620095908339815191529063c31eb0e0906200227e90631feef77d60e01b90600401620067e9565b600060405180830381600087803b1580156200229957600080fd5b505af1158015620022ae573d6000803e3d6000fd5b5050600e54601054601154601354601254604051639170c05b60e01b81526001600160a01b039586169750639170c05b9650620008b59594851694909316928890600401620067fe565b60405163c88a5e6d60e01b8152600080516020620095908339815191529063c88a5e6d906200232e90869085906004016200682e565b600060405180830381600087803b1580156200234957600080fd5b505af11580156200235e573d6000803e3d6000fd5b50506040516323f2866760e11b81526001600160a01b038087166004830152851660248201526000805160206200959083398151915292506347e50cce915060440162001070565b6000805160206200959083398151915263e5d6bf0262000d9783426200696b565b60008054610100900460ff1615620023e85750600054610100900460ff1690565b6000600080516020620095908339815191523b15620024f35760405160009060008051602062009590833981519152907f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc490620024559083906519985a5b195960d21b906020016200682e565b60408051601f198184030181529082905262002475929160200162006c1e565b60408051601f1981840301815290829052620024919162006c00565b6000604051808303816000865af19150503d8060008114620024d0576040519150601f19603f3d011682016040523d82523d6000602084013e620024d5565b606091505b5091505080806020019051810190620024ef919062006c51565b9150505b919050565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa15801562002543573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002569919062006847565b6200257690600162006888565b601054601154601354601254601454604051959650600095620025b1956001600160a01b039081169581169493921690889060200162006928565b60408051601f198184030181528282528051602091820120600e54637e388e1d60e11b855292519094506000936001600160a01b039093169263fc711c3a9260048083019391928290030181865afa15801562002612573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002638919062006847565b6200264590600162006888565b6001600160801b0316905060006200266e600080516020620095b0833981519152848462004227565b60405160248101849052909150600080516020620095908339815191529063f28dceb3906305bf279d60e41b906044015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b9092168252620026e69160040162006913565b600060405180830381600087803b1580156200270157600080fd5b505af115801562002716573d6000803e3d6000fd5b5050600e5460105460115460135460125460145460085460405163d864229560e01b81526001600160a01b03978816995063d8642295985062000b5a979687169695861695928316928e926001929116908d908d9060040162006b49565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa158015620027bf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620027e5919062006847565b620027f290600162006888565b6010546011546013546012546014546040519596506000956200282d956001600160a01b039081169581169493921690889060200162006928565b60408051601f198184030181528282528051602091820120600e54637e388e1d60e11b855292519094506000936001600160a01b039093169263fc711c3a9260048083019391928290030181865afa1580156200288e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620028b4919062006847565b620028c190600162006888565b6001600160801b031690506000620028ea600080516020620095b0833981519152848462004227565b60405160248101849052909150600080516020620095908339815191529063f28dceb3906305bf279d60e41b906044015b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e084901b909216825262000ae99160040162006913565b60405163c88a5e6d60e01b8152600080516020620095908339815191529063c88a5e6d906200070b90859085906004016200682e565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa158015620029e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002a09919062006847565b62002a1690600162006888565b60105460115460135460125460145460405195965060009562002a51956001600160a01b039081169581169493921690889060200162006928565b6040516020818303038152906040528051906020012090506000601254600162002a7c91906200696b565b9050600062002aad7f28cac318a86c8a0a6a9156c2dba2c8c2363677ba0514ef616592d81557e679b6848462004227565b604051630618f58760e51b8152909150600080516020620095908339815191529063c31eb0e090620026e6906324a0dbd760e21b90600401620067e9565b60405163c88a5e6d60e01b8152600080516020620095908339815191529063c88a5e6d9062002b25908590600160801b906004016200682e565b600060405180830381600087803b15801562002b4057600080fd5b505af115801562002b55573d6000803e3d6000fd5b50506040516308b6ac0f60e31b81526001600160a01b038086166004830152841660248201526000805160206200959083398151915292506345b5607891506044016200070b565b604051632631f2b160e11b815282151560048201526000805160206200959083398151915290634c63e56290602401600060405180830381600087803b15801562002be757600080fd5b505af115801562002bfc573d6000803e3d6000fd5b5050600e5460408051637e388e1d60e11b81529051600080516020620095908339815191529450634c63e56293506001600160a01b039092169163fc711c3a916004808201926020929091908290030181865afa15801562002c62573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002c88919062006847565b6001600160801b03168311156040518263ffffffff1660e01b815260040162002cb5911515815260200190565b600060405180830381600087803b15801562002cd057600080fd5b505af115801562002ce5573d6000803e3d6000fd5b505050506000600e60009054906101000a90046001600160a01b03166001600160a01b031663cd805d5e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002d3f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002d65919062006847565b6010546008546001600160801b0392909216925062002d92916001600160a01b0391821691168562001d1d565b6010546008546040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a0823190602401602060405180830381865afa15801562002de4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002e0a919062006ae4565b600e546040516381bad6f360e01b815291925060008051602062009590833981519152916381bad6f39162002e57916001918291829182916001600160a01b039091169060040162006ab4565b600060405180830381600087803b15801562002e7257600080fd5b505af115801562002e87573d6000803e3d6000fd5b5050601154601054601454604080518a8152602081018a90526001600160a01b0392831681830152905188965093821694509116917f7361c265d28ece9d5df249995186533440e0b7a1310ae54d496fa1783056e3da9181900360600190a460105460115460145460085462002f15936001600160a01b0390811693811692899289929182169116620042f0565b50506010546008546040516370a0823160e01b81526001600160a01b039182166004820152620006649291909116906370a0823190602401602060405180830381865afa15801562002f6b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002f91919062006ae4565b62002f9d868462006a5f565b62004490565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa15801562002fee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003014919062006847565b6200302190600162006888565b6010546011546013546012546014546040519596506000956200305c956001600160a01b039081169581169493921690889060200162006928565b60408051601f198184030181529190528051602090910120600e54909150620030ad904390620020289084906200150d90639501325f60e01b90620014f0906001906001600160a01b03166200458b565b60006012546001620030c091906200696b565b90506000620030e0600080516020620095b0833981519152848462004227565b60405160248101859052909150600080516020620095908339815191529063f28dceb3906304daa62560e21b906044016200269f565b600e54604080516366c02eaf60e11b815290516000926001600160a01b03169163cd805d5e9160048083019260209291908290030181865afa15801562003161573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003187919062006847565b6200319490600162006888565b6010546011546013546012546014546040516001600160801b03969096169650600095620031da956001600160a01b039081169581169493921690889060200162006a79565b60408051601f198184030181529190528051602090910120600e549091506200322b904390620020289084906200150d90639501325f60e01b90620014f0906001906001600160a01b03166200458b565b600060125460016200323e91906200696b565b905060006200325e600080516020620095b0833981519152848462004227565b60405160248101859052909150600080516020620095908339815191529063f28dceb3906304daa62560e21b906044016200291b565b7f42b963ace015abb7c727e77dec115c5f418f4f96d9ec897f85c202793274661a6040516200331a906020808252603b908201527f54686520607469706020737464636865617420686173206265656e206465707260408201527f6563617465642e2055736520606465616c6020696e73746561642e0000000000606082015260800190565b60405180910390a162001d2c81620020288462001fff6370a0823160e01b620014f060018a6200458b565b600e54604051630daf9c2160e41b81526001600160a01b0383811660048301526000805160206200959083398151915292634c63e5629291169063daf9c21090602401602060405180830381865afa158015620033a6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620033cc919062006c51565b6040516001600160e01b031960e084901b16815290156004820152602401600060405180830381600087803b1580156200340557600080fd5b505af11580156200341a573d6000803e3d6000fd5b5050604080516001600160a01b03851660248083019190915282518083039091018152604490910182526020810180516001600160e01b031663f602627d60e01b179052905163f28dceb360e01b815260008051602062009590833981519152935063f28dceb3925062003492919060040162006913565b600060405180830381600087803b158015620034ad57600080fd5b505af1158015620034c2573d6000803e3d6000fd5b5050600e54601154601254601354601454604051639170c05b60e01b81526001600160a01b039586169750639170c05b9650620008b595899581169493921690600401620067fe565b604051632631f2b160e11b815281151560048201526000805160206200959083398151915290634c63e56290602401600060405180830381600087803b1580156200355557600080fd5b505af11580156200356a573d6000803e3d6000fd5b505060095460405163ca669fa760e01b81526001600160a01b03909116600482015260008051602062009590833981519152925063ca669fa79150602401600060405180830381600087803b158015620035c357600080fd5b505af1158015620035d8573d6000803e3d6000fd5b505060408051808201825260148152731514905394d1915497d19493d357d1905253115160621b6020820152905163f28dceb360e01b815260008051602062009590833981519152935063f28dceb3925062003638919060040162006913565b600060405180830381600087803b1580156200365357600080fd5b505af115801562003668573d6000803e3d6000fd5b5050600e54601054601154601354601254601454604051634159761f60e11b81526001600160a01b0396871698506382b2ec3e9750620008b5969586169594851694909116906001908a9060040162006afe565b604051632631f2b160e11b815282151560048201526000805160206200959083398151915290634c63e56290602401600060405180830381600087803b1580156200370657600080fd5b505af11580156200371b573d6000803e3d6000fd5b50506010546008546200373e93506001600160a01b039182169250168462001d1d565b601054601154601254601454600854600094859462003775946001600160a01b0392831694918316938a93919282169116620042f0565b6011546009549294509092506200379a916001600160a01b0391821691168562001d1d565b60095460405163ca669fa760e01b81526001600160a01b039091166004820152600080516020620095908339815191529063ca669fa790602401600060405180830381600087803b158015620037ef57600080fd5b505af115801562003804573d6000803e3d6000fd5b5050600e54601054601154601254601454604051634159761f60e11b81526001600160a01b0395861697506382b2ec3e9650620038559594851694938416938c939216908a908c9060040162006afe565b600060405180830381600087803b1580156200387057600080fd5b505af115801562003885573d6000803e3d6000fd5b505060408051602480820186905282518083039091018152604490910182526020810180516001600160e01b03166304daa62560e21b179052905163f28dceb360e01b815260008051602062009590833981519152935063f28dceb39250620038f2919060040162006913565b600060405180830381600087803b1580156200390d57600080fd5b505af115801562003922573d6000803e3d6000fd5b5050600e54601054601154601254601454604051634159761f60e11b81526001600160a01b0395861697506382b2ec3e965062000b5a9594851694938416938c939216908a908c9060040162006afe565b604051630618f58760e51b8152600080516020620095908339815191529063c31eb0e090620039ae9063abc5ee6f60e01b90600401620067e9565b600060405180830381600087803b158015620039c957600080fd5b505af1158015620039de573d6000803e3d6000fd5b5050600e54601054601154601254601454604051639170c05b60e01b81526001600160a01b039586169750639170c05b965062000634959485169493841693600093921690600401620067fe565b60405163c88a5e6d60e01b8152600080516020620095908339815191529063c88a5e6d9062003a6290859085906004016200682e565b600060405180830381600087803b15801562003a7d57600080fd5b505af115801562003a92573d6000803e3d6000fd5b505060405163ca669fa760e01b81526001600160a01b038516600482015260008051602062009590833981519152925063ca669fa791506024016200070b565b62003adc62004700565b600e54600b54604051630ffb1d8b60e01b81526001600160a01b03918216600482015260016024820152911690630ffb1d8b90604401600060405180830381600087803b15801562003b2d57600080fd5b505af115801562003b42573d6000803e3d6000fd5b5050600e54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b15801562003b9757600080fd5b505af115801562003bac573d6000803e3d6000fd5b5050600b54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152635553444360e01b606482015260008051602062009590833981519152925063c657c7189150608401600060405180830381600087803b15801562003c2457600080fd5b505af115801562003c39573d6000803e3d6000fd5b5050600c54604080516318caf8e360e31b81526001600160a01b0390921660048084019190915260248301919091526044820152630ae8aa8960e31b606482015260008051602062009590833981519152925063c657c7189150608401600060405180830381600087803b15801562003cb157600080fd5b505af115801562003cc6573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206200959083398151915292506306447d569150602401600060405180830381600087803b15801562003d1f57600080fd5b505af115801562003d34573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062003d739290911690600019906004016200682e565b6020604051808303816000875af115801562003d93573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003db9919062006c51565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262003df492911690600019906004016200682e565b6020604051808303816000875af115801562003e14573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003e3a919062006c51565b50604080516390c5013b60e01b8152905160008051602062009590833981519152916390c5013b91600480830192600092919082900301818387803b15801562003e8357600080fd5b505af115801562003e98573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206200959083398151915292506306447d569150602401600060405180830381600087803b15801562003ef157600080fd5b505af115801562003f06573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062003f459290911690600019906004016200682e565b6020604051808303816000875af115801562003f65573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062003f8b919062006c51565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262003fc692911690600019906004016200682e565b6020604051808303816000875af115801562003fe6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200400c919062006c51565b50604080516390c5013b60e01b8152905160008051602062009590833981519152916390c5013b91600480830192600092919082900301818387803b1580156200405557600080fd5b505af11580156200406a573d6000803e3d6000fd5b5050600a546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206200959083398151915292506306447d569150602401600060405180830381600087803b158015620040c357600080fd5b505af1158015620040d8573d6000803e3d6000fd5b5050600b54600e5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620041179290911690600019906004016200682e565b6020604051808303816000875af115801562004137573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200415d919062006c51565b50600c54600e5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200419892911690600019906004016200682e565b6020604051808303816000875af1158015620041b8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620041de919062006c51565b50604080516390c5013b60e01b8152905160008051602062009590833981519152916390c5013b91600480830192600092919082900301818387803b1580156200064f57600080fd5b604080517f0efb9dda140a951df4393d44ca40349032d31811466afd20eacd4b4136c3f49860208201529081018390526060818101839052906000906080016040516020818303038152906040528051906020012090506000620042d8826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050620042e68682620047cf565b9695505050505050565b6000806000600e60009054906101000a90046001600160a01b03166001600160a01b031663cd805d5e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562004349573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200436f919062006847565b90506000898989898986604051602001620043909695949392919062006928565b60408051808303601f1901815290829052805160209091012063ca669fa760e01b82526001600160a01b03871660048301529150600080516020620095908339815191529063ca669fa790602401600060405180830381600087803b158015620043f957600080fd5b505af11580156200440e573d6000803e3d6000fd5b5050600e54604051639170c05b60e01b81526001600160a01b039091169250639170c05b91506200444c908d908d908d908d908d90600401620067fe565b600060405180830381600087803b1580156200446757600080fd5b505af11580156200447c573d6000803e3d6000fd5b50939c929b50919950505050505050505050565b80821462004587577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620045039060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516200453c919062006c71565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405162004575919062006caa565b60405180910390a16200458762004898565b5050565b6005820180546001600160a01b0319166001600160a01b039290921691909117905590565b6000620045bd826200499c565b806020019051810190620045d2919062006ae4565b92915050565b6000620045e5826200499c565b806020019051810190620045d2919062006cd5565b806001600160a01b0316826001600160a01b03161462004587577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051620046829060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f81604051620046bb919062006cf5565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f8260405162004575919062006d3a565b62004587828262004a64565b6200470a62004e5f565b600f54600d546040516001600160a01b03909116906200472a9062006430565b9182526001600160a01b03166020820152604001604051809103906000f0801580156200475b573d6000803e3d6000fd5b50600e80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b81526004808201939093526024810191909152604481019190915263426f6f6b60e01b6064820152600080516020620095908339815191529063c657c7189060840162000634565b6040516338d07aa960e21b8152600481018390526024810182905260609060009081908190600080516020620095908339815191529063e341eaa4906044016060604051808303816000875af11580156200482e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004854919062006d65565b6040805160208101939093528281019190915260f89290921b6001600160f81b03191660608201528151604181830301815260619091019091529695505050505050565b600080516020620095908339815191523b156200498b5760405160009060008051602062009590833981519152907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc490620049069083906519985a5b195960d21b9060019060200162006da4565b60408051601f198184030181529082905262004926929160200162006c1e565b60408051601f1981840301815290829052620049429162006c00565b6000604051808303816000865af19150503d806000811462004981576040519150601f19603f3d011682016040523d82523d6000602084013e62004986565b606091505b505050505b6000805461ff001916610100179055565b60058101546060906001600160a01b03166000620049ba8462005387565b604051630667f9d760e41b8152909150600080516020620095908339815191529063667f9d7090620049f390859085906004016200682e565b6020604051808303816000875af115801562004a13573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004a39919062006ae4565b60405160200162004a4c91815260200190565b60405160208183030381529060405292505050919050565b600582015460038301546004840154600285018054604080516020808402820181019092528281526001600160a01b039096169560e09590951b946000939092909183018282801562004ad757602002820191906000526020600020905b81548152602001906001019080831162004ac2575b5050505050905060008362004aec836200610f565b60405160200162004aff92919062006c1e565b60408051601f198184030181528282526001600160a01b038816600090815260018b0160209081528382206001600160e01b03198a16835281529281209194509092909162004b5391869188910162006dc5565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff1662004b8e5762004b8c8762005387565b505b6001600160a01b0385166000908152602088815260408083206001600160e01b031988168452825280832090519091839162004bcf91879189910162006dc5565b6040516020818303038152906040528051906020012081526020019081526020016000205460001b9050600080876001600160a01b03168460405162004c16919062006c00565b600060405180830381855afa9150503d806000811462004c53576040519150601f19603f3d011682016040523d82523d6000602084013e62004c58565b606091505b50915062004c7590508162004c6f88602062006e01565b620061bc565b604051630667f9d760e41b815290925060009150600080516020620095908339815191529063667f9d709062004cb2908b9087906004016200682e565b6020604051808303816000875af115801562004cd2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062004cf8919062006ae4565b905080821462004dae5760405162461bcd60e51b815260206004820152606e60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526d39b73a1039bab83837b93a32b21760911b60a482015260c40162000d66565b6040516370ca10bb60e01b815260008051602062009590833981519152906370ca10bb9062004de6908b9087908e9060040162006da4565b600060405180830381600087803b15801562004e0157600080fd5b505af115801562004e16573d6000803e3d6000fd5b50505060058b0180546001600160a01b03191690555060038a01805463ffffffff1916905562004e4b60028b0160006200643e565b896004016000905550505050505050505050565b62004e6962006246565b60405162004e779062006461565b604051809103906000f08015801562004e94573d6000803e3d6000fd5b50600d80546001600160a01b0319166001600160a01b03929092169182179055604080516318caf8e360e31b815260048101929092526024820152601060448201526f416c6c4b6e6f77696e674f7261636c6560801b6064820152600080516020620095908339815191529063c657c71890608401600060405180830381600087803b15801562004f2457600080fd5b505af115801562004f39573d6000803e3d6000fd5b50506008546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206200959083398151915292506306447d569150602401600060405180830381600087803b15801562004f9257600080fd5b505af115801562004fa7573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062004fe69290911690600019906004016200682e565b6020604051808303816000875af115801562005006573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200502c919062006c51565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200506792911690600019906004016200682e565b6020604051808303816000875af115801562005087573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620050ad919062006c51565b50604080516390c5013b60e01b8152905160008051602062009590833981519152916390c5013b91600480830192600092919082900301818387803b158015620050f657600080fd5b505af11580156200510b573d6000803e3d6000fd5b50506009546040516303223eab60e11b81526001600160a01b0390911660048201526000805160206200959083398151915292506306447d569150602401600060405180830381600087803b1580156200516457600080fd5b505af115801562005179573d6000803e3d6000fd5b5050600b54600d5460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b39350620051b89290911690600019906004016200682e565b6020604051808303816000875af1158015620051d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620051fe919062006c51565b50600c54600d5460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200523992911690600019906004016200682e565b6020604051808303816000875af115801562005259573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200527f919062006c51565b50604080516390c5013b60e01b8152905160008051602062009590833981519152916390c5013b91600480830192600092919082900301818387803b158015620052c857600080fd5b505af1158015620052dd573d6000803e3d6000fd5b5050600d54600b54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b9150604401600060405180830381600087803b1580156200533257600080fd5b505af115801562005347573d6000803e3d6000fd5b5050600d54600c54604051630ffb1d8b60e01b81526001600160a01b0391821660048201526001602482015291169250630ffb1d8b915060440162000634565b600581015460038201546004830154600284018054604080516020808402820181019092528281526000966001600160a01b03169560e01b949387939192909190830182828015620053f957602002820191906000526020600020905b815481526020019060010190808311620053e4575b5050506001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a1684528252808320905195965094919350620054459250859187910162006dc5565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff1615620054e4576001600160a01b0384166000908152602087815260408083206001600160e01b03198716845282528083209051909291620054b491859187910162006dc5565b60405160208183030381529060405280519060200120815260200190815260200160002054945050505050919050565b600083620054f2836200610f565b6040516020016200550592919062006c1e565b6040516020818303038152906040529050600080516020620095d083398151915260001c6001600160a01b031663266cf1096040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156200556457600080fd5b505af115801562005579573d6000803e3d6000fd5b50505050600080866001600160a01b0316836040516200559a919062006c00565b600060405180830381855afa9150503d8060008114620055d7576040519150601f19603f3d011682016040523d82523d6000602084013e620055dc565b606091505b509150620055f390508162004c6f87602062006e01565b6040516365bc948160e01b81526001600160a01b03891660048201529092506000915060008051602062009590833981519152906365bc9481906024016000604051808303816000875af115801562005650573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200567a919081019062006eac565b5090508051600103620059d4576000600080516020620095d083398151915260001c6001600160a01b031663667f9d708984600081518110620056c157620056c162006f0d565b60200260200101516040518363ffffffff1660e01b8152600401620056e89291906200682e565b6020604051808303816000875af115801562005708573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200572e919062006ae4565b90508062005792577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a588836000815181106200576e576200576e62006f0d565b602002602001015160001c604051620057899291906200682e565b60405180910390a15b808314620058455760405162461bcd60e51b815260206004820152606d60248201527f73746453746f726167652066696e642853746453746f72616765293a2050616360448201527f6b656420736c6f742e205468697320776f756c642063617573652064616e676560648201527f726f7573206f76657277726974696e6720616e642063757272656e746c79206960848201526c1cdb9d081cdd5c1c1bdc9d1959609a1b60a482015260c40162000d66565b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed888887896040516020016200587d92919062006dc5565b6040516020818303038152906040528051906020012085600081518110620058a957620058a962006f0d565b602002602001015160001c604051620058c6949392919062006f23565b60405180910390a181600081518110620058e457620058e462006f0d565b6020908102919091018101516001600160a01b038a1660009081528c835260408082206001600160e01b03198c16835284528082209051929390926200592f918a918c910162006dc5565b60408051601f1981840301815291815281516020928301208352828201939093529082016000908120939093556001600160a01b038b16835260018d810182528284206001600160e01b03198c1685528252828420925190939162005999918a918c910162006dc5565b60408051808303601f19018152918152815160209283012083529082019290925201600020805460ff19169115159190911790555062005f92565b60018151111562005f215760005b815181101562005f1a576000600080516020620095d083398151915260001c6001600160a01b031663667f9d708a85858151811062005a255762005a2562006f0d565b60200260200101516040518363ffffffff1660e01b815260040162005a4c9291906200682e565b6020604051808303816000875af115801562005a6c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062005a92919062006ae4565b90508062005af5577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a58984848151811062005ad15762005ad162006f0d565b602002602001015160001c60405162005aec9291906200682e565b60405180910390a15b600080516020620095d083398151915260001c6001600160a01b03166370ca10bb8a85858151811062005b2c5762005b2c62006f0d565b602002602001015161133760f01b6040518463ffffffff1660e01b815260040162005b5a9392919062006da4565b600060405180830381600087803b15801562005b7557600080fd5b505af115801562005b8a573d6000803e3d6000fd5b50505050600060608a6001600160a01b03168760405162005bac919062006c00565b600060405180830381855afa9150503d806000811462005be9576040519150601f19603f3d011682016040523d82523d6000602084013e62005bee565b606091505b50909250905062005c068162004c6f8b602062006e01565b955081801562005c1a575061133760f01b86145b1562005e6d577f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c60405160200162005c5892919062006dc5565b6040516020818303038152906040528051906020012088888151811062005c835762005c8362006f0d565b602002602001015160001c60405162005ca0949392919062006f23565b60405180910390a184848151811062005cbd5762005cbd62006f0d565b6020908102919091018101516001600160a01b038d1660009081528f835260408082206001600160e01b03198f168352845280822090519293909262005d08918d918f910162006dc5565b6040516020818303038152906040528051906020012081526020019081526020016000208190555060018d60010160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060008c6001600160e01b0319166001600160e01b031916815260200190815260200160002060008a8c60405160200162005d9592919062006dc5565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff021916908315150217905550600080516020620095d083398151915260001c6001600160a01b03166370ca10bb8c87878151811062005e075762005e0762006f0d565b6020026020010151866040518463ffffffff1660e01b815260040162005e309392919062006da4565b600060405180830381600087803b15801562005e4b57600080fd5b505af115801562005e60573d6000803e3d6000fd5b5050505050505062005f1a565b600080516020620095d083398151915260001c6001600160a01b03166370ca10bb8c87878151811062005ea45762005ea462006f0d565b6020026020010151866040518463ffffffff1660e01b815260040162005ecd9392919062006da4565b600060405180830381600087803b15801562005ee857600080fd5b505af115801562005efd573d6000803e3d6000fd5b50505050505050808062005f119062006bc1565b915050620059e2565b5062005f92565b6040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e606482015260840162000d66565b6001600160a01b038716600090815260018a01602090815260408083206001600160e01b03198a1684528252808320905190929162005fd69188918a910162006dc5565b60408051601f198184030181529181528151602092830120835290820192909252016000205460ff16620060655760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b606482015260840162000d66565b6005890180546001600160a01b031916905560038901805463ffffffff191690556200609660028a0160006200643e565b600060048a018190556001600160a01b038816815260208a815260408083206001600160e01b03198a16845282528083209051909291620060dc9188918a910162006dc5565b60405160208183030381529060405280519060200120815260200190815260200160002054975050505050505050919050565b606060008251602062006123919062006e01565b67ffffffffffffffff8111156200613e576200613e62006534565b6040519080825280601f01601f19166020018201604052801562006169576020820181803683370190505b50905060005b835181101562000d6f57600084828151811062006190576200619062006f0d565b602002602001015190508082602002602001840152508080620061b39062006bc1565b9150506200616f565b60008060006020855111620061d3578451620061d6565b60205b905060005b818110156200623c57620061f181600862006e01565b86620061fe83886200696b565b8151811062006211576200621162006f0d565b01602001516001600160f81b031916901c929092179180620062338162006bc1565b915050620061db565b5090949350505050565b600854604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526005604482015264416c69636560d81b6064820152600080516020620095908339815191529063c657c71890608401600060405180830381600087803b158015620062b657600080fd5b505af1158015620062cb573d6000803e3d6000fd5b5050600954604080516318caf8e360e31b81526001600160a01b039092166004830152602482015260036044820152622137b160e91b606482015260008051602062009590833981519152925063c657c7189150608401600060405180830381600087803b1580156200633d57600080fd5b505af115801562006352573d6000803e3d6000fd5b5050600a54604080516318caf8e360e31b81526001600160a01b03909216600483015260248201526007604482015266436861726c696560c81b606482015260008051602062009590833981519152925063c657c7189150608401600060405180830381600087803b158015620063c857600080fd5b505af1158015620063dd573d6000803e3d6000fd5b5050604080516318caf8e360e31b815230600482015260248101919091526003604482015262596f7560e81b606482015260008051602062009590833981519152925063c657c718915060840162000634565b61194a8062006f5483390190565b50805460008255906000526020600020908101906200645e91906200646f565b50565b610cf2806200889e83390190565b5b8082111562006486576000815560010162006470565b5090565b6001600160a01b03811681146200645e57600080fd5b60008060408385031215620064b457600080fd5b8235620064c1816200648a565b946020939093013593505050565b600060208284031215620064e257600080fd5b8135620064ef816200648a565b9392505050565b600080604083850312156200650a57600080fd5b823562006517816200648a565b9150602083013562006529816200648a565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562006576576200657662006534565b604052919050565b600067ffffffffffffffff8211156200659b576200659b62006534565b50601f01601f191660200190565b6000620065c0620065ba846200657e565b6200654a565b9050828152838383011115620065d557600080fd5b828260208301376000602084830101529392505050565b600082601f830112620065fe57600080fd5b620064ef83833560208501620065a9565b600080604083850312156200662357600080fd5b823567ffffffffffffffff808211156200663c57600080fd5b6200664a86838701620065ec565b935060208501359150808211156200666157600080fd5b508301601f810185136200667457600080fd5b6200668585823560208401620065a9565b9150509250929050565b600060208284031215620066a257600080fd5b5035919050565b600080600060608486031215620066bf57600080fd5b8335620066cc816200648a565b92506020840135620066de816200648a565b929592945050506040919091013590565b600080604083850312156200670357600080fd5b50508035926020909101359150565b6000806000606084860312156200672857600080fd5b505081359360208301359350604090920135919050565b80151581146200645e57600080fd5b600080600080608085870312156200676557600080fd5b843562006772816200648a565b9350602085013562006784816200648a565b92506040850135915060608501356200679d816200673f565b939692955090935050565b600060208284031215620067bb57600080fd5b813567ffffffffffffffff811115620067d357600080fd5b620067e184828501620065ec565b949350505050565b6001600160e01b031991909116815260200190565b6001600160a01b039586168152938516602085015260408401929092526060830152909116608082015260a00190565b6001600160a01b03929092168252602082015260400190565b6000602082840312156200685a57600080fd5b81516001600160801b0381168114620064ef57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160801b03808316818516808303821115620068ad57620068ad62006872565b01949350505050565b60005b83811015620068d3578181015183820152602001620068b9565b83811115620006645750506000910152565b60008151808452620068ff816020860160208601620068b6565b601f01601f19169290920160200192915050565b602081526000620064ef6020830184620068e5565b6001600160a01b03968716815294861660208601526040850193909352606084019190915290921660808201526001600160801b0390911660a082015260c00190565b6000821982111562006981576200698162006872565b500190565b60018060a01b0385168152836020820152826040820152608060608201526000620042e66080830184620068e5565b600060208284031215620069c857600080fd5b815167ffffffffffffffff811115620069e057600080fd5b8201601f81018413620069f257600080fd5b805162006a03620065ba826200657e565b81815285602083850101111562006a1957600080fd5b62006a2c826020830160208601620068b6565b95945050505050565b6000835162006a49818460208801620068b6565b835190830190620068ad818360208801620068b6565b60008282101562006a745762006a7462006872565b500390565b6001600160a01b039687168152948616602086015260408501939093526060840191909152909216608082015260a081019190915260c00190565b941515855292151560208501529015156040840152151560608301526001600160a01b0316608082015260a00190565b60006020828403121562006af757600080fd5b5051919050565b6001600160a01b03978816815295871660208701526040860194909452606085019290925290931660808301526001600160801b0390921660a082015260c081019190915260e00190565b600061014060018060a01b03808e168452808d1660208501528b60408501528a6060850152808a1660808501526001600160801b03891660a08501528760c085015280871660e085015250846101008401528061012084015262006bb081840185620068e5565b9d9c50505050505050505050505050565b60006001820162006bd65762006bd662006872565b5060010190565b60008262006bfb57634e487b7160e01b600052601260045260246000fd5b500690565b6000825162006c14818460208701620068b6565b9190910192915050565b6001600160e01b031983168152815160009062006c43816004850160208701620068b6565b919091016004019392505050565b60006020828403121562006c6457600080fd5b8151620064ef816200673f565b60408152600062006c9c60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b60408152600062006c9c60408301600a815269080808081058dd1d585b60b21b602082015260400190565b60006020828403121562006ce857600080fd5b8151620064ef816200648a565b60408152600062006d2060408301600a8152690808115e1c1958dd195960b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b60408152600062006d2060408301600a815269080808081058dd1d585b60b21b602082015260400190565b60008060006060848603121562006d7b57600080fd5b835160ff8116811462006d8d57600080fd5b602085015160409095015190969495509392505050565b6001600160a01b039390931683526020830191909152604082015260600190565b825160009082906020808701845b8381101562006df15781518552938201939082019060010162006dd3565b5050948252509092019392505050565b600081600019048311821515161562006e1e5762006e1e62006872565b500290565b600082601f83011262006e3557600080fd5b8151602067ffffffffffffffff82111562006e545762006e5462006534565b8160051b62006e658282016200654a565b928352848101820192828101908785111562006e8057600080fd5b83870192505b8483101562006ea15782518252918301919083019062006e86565b979650505050505050565b6000806040838503121562006ec057600080fd5b825167ffffffffffffffff8082111562006ed957600080fd5b62006ee78683870162006e23565b9350602085015191508082111562006efe57600080fd5b50620066858582860162006e23565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039490941684526001600160e01b0319929092166020840152604083015260608201526080019056fe60a0604052600180546001600160801b031916905534801561002057600080fd5b5060405161194a38038061194a83398101604081905261003f9161011c565b600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3506001600160a01b03811660805260028290556040518281527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd76159060200160405180910390a1600380546001600160801b0319166703782dace9d900009081179091556040519081527f248707dbfdce07115740191c2a4ec04702f5d55967ca82b9dc65c55801531f7f9060200160405180910390a15050610159565b6000806040838503121561012f57600080fd5b825160208401519092506001600160a01b038116811461014e57600080fd5b809150509250929050565b6080516117c8610182600039600081816101c801528181610b020152610bb801526117c86000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638da5cb5b116100ad578063d70e3dfd11610071578063d70e3dfd14610299578063d8642295146102c2578063daf9c210146102d5578063fbc534ef14610308578063fc711c3a1461031b57600080fd5b80638da5cb5b146102155780639170c05b146102285780639362776f1461023b5780639501325f1461024e578063cd805d5e1461026e57600080fd5b80632613f307116100f45780632613f3071461018a578063436146791461019d5780636f1335b9146101b05780637dc0d1d0146101c357806382b2ec3e1461020257600080fd5b80630b20b7bc146101265780630ff0c00e146101595780630ffb1d8b1461016257806313af403514610177575b600080fd5b61014661013436600461134c565b60076020526000908152604090205481565b6040519081526020015b60405180910390f35b61014660025481565b61017561017036600461138f565b61032e565b005b6101756101853660046113c6565b6103c0565b61017561019836600461134c565b610435565b6101756101ab3660046113ff565b61049b565b6101756101be366004611465565b6105fe565b6101ea7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610150565b610175610210366004611480565b6106b0565b6000546101ea906001600160a01b031681565b6101756102363660046114f1565b610747565b61017561024936600461158a565b610932565b61014661025c36600461134c565b60056020526000908152604090205481565b600154610281906001600160801b031681565b6040516001600160801b039091168152602001610150565b6101ea6102a736600461134c565b6006602052600090815260409020546001600160a01b031681565b6101756102d03660046115f2565b6109e9565b6102f86102e33660046113c6565b60046020526000908152604090205460ff1681565b6040519015158152602001610150565b6101756103163660046113ff565b610a60565b600354610281906001600160801b031681565b6000546001600160a01b031633146103615760405162461bcd60e51b8152600401610358906116b5565b60405180910390fd5b6001600160a01b038216600081815260046020908152604091829020805460ff191685151590811790915591519182527fef81a9943b96c8df4ef243401c9bf5159146166211356898b52d382086168d92910160405180910390a25050565b6000546001600160a01b031633146103ea5760405162461bcd60e51b8152600401610358906116b5565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b0316331461045f5760405162461bcd60e51b8152600401610358906116b5565b60028190556040518181527fcf29a5174acb8c175d760a7381ffc52c6ae644e3a4ba3fa7e01344f959cd7615906020015b60405180910390a150565b60006104ab878787878787610ca5565b600081815260056020526040812054919250036104de5760405163cc4f06a160e01b815260048101829052602401610358565b6002546000828152600560205260409020546104fa90436116f1565b10156105455760008181526005602052604081205461051990436116f1565b60025461052691906116f1565b9050806040516325797e0360e11b815260040161035891815260200190565b600081815260076020818152604080842080546006845282862080546005865293872087905580546001600160a01b031916905593909252929055906001600160a01b039081169061059a9089168684610d09565b6105ae6001600160a01b038a168289610d09565b8183826001600160a01b03167ff74daea4b4b80ee368b87f2feb712805f4ef30acd087e35c5d16df8736c2d6f2896040516105eb91815260200190565b60405180910390a4505050505050505050565b6000546001600160a01b031633146106285760405162461bcd60e51b8152600401610358906116b5565b670de0b6b3a7640000816001600160801b03161061065957604051636a143fdd60e11b815260040160405180910390fd5b600380546fffffffffffffffffffffffffffffffff19166001600160801b0383169081179091556040519081527f248707dbfdce07115740191c2a4ec04702f5d55967ca82b9dc65c55801531f7f90602001610490565b60006106c0888888888888610ca5565b600081815260056020526040902054909150156106f3576040516304daa62560e21b815260048101829052602401610358565b6106fe878284610d87565b60408051868152602081018490524391839133917f9e2cd6515276369145ad3c2ee5eb7c8f09ca9c99e8e7d6e68de40895a72f3464910160405180910390a45050505050505050565b6001600160a01b03851660009081526004602052604090205460ff1661078b5760405163f602627d60e01b81526001600160a01b0386166004820152602401610358565b6001600160a01b03841660009081526004602052604090205460ff166107cf5760405163f602627d60e01b81526001600160a01b0385166004820152602401610358565b836001600160a01b0316856001600160a01b03160361080157604051631d2792fb60e31b815260040160405180910390fd5b6003546001600160801b0316821115610830576040516305bf279d60e41b815260048101839052602401610358565b826000036108515760405163abc5ee6f60e01b815260040160405180910390fd5b6001600160a01b03811661087857604051631feef77d60e01b815260040160405180910390fd5b61088d6001600160a01b038616333086610ddb565b60015460408051858152602081018590526001600160a01b038481168284015291516001600160801b0390931692878316928916917f7361c265d28ece9d5df249995186533440e0b7a1310ae54d496fa1783056e3da919081900360600190a4600180546001600160801b031690600061090683611708565b91906101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b6003546001600160801b0316831115610961576040516305bf279d60e41b815260048101849052602401610358565b60008481526005602052604090205415610991576040516304daa62560e21b815260048101859052602401610358565b61099e8585858585610e65565b83856001600160a01b03167f2932e14c54a9749927aed2cd6d014eb7cd6a224f5fe6dfb944d9ced9b04c4f47856040516109da91815260200190565b60405180910390a35050505050565b60006109f98c8c8c8c8c8c610ca5565b9050610a088582868686610e65565b610a138b8288610d87565b60408051858152602081018890524391839133917f9e2cd6515276369145ad3c2ee5eb7c8f09ca9c99e8e7d6e68de40895a72f3464910160405180910390a4505050505050505050505050565b6000610a70878787878787610ca5565b600081815260056020526040812054919250819003610aa55760405163cc4f06a160e01b815260048101839052602401610358565b600254610ab282436116f1565b10610ad057604051632c02744560e11b815260040160405180910390fd5b60008281526007602090815260408083205460069092529182902054915163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905291928216918a169063095ea7b3906044016020604051808303816000875af1158015610b5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b83919061172e565b50604051632bd6267f60e21b81526001600160a01b0382811660048301523360248301528a81166044830152606482018490527f0000000000000000000000000000000000000000000000000000000000000000169063af5899fc906084016020604051808303816000875af1158015610c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c25919061174b565b5060008481526005602090815260408083208390556006825280832080546001600160a01b031916905560078252808320929092559051888152839186916001600160a01b038516917fbfb0e6d8f5102fdad9ead2713eec1014861fe90e38a91786fb5c610873c38ad8910160405180910390a450505050505050505050565b604080516001600160a01b039788166020808301919091529688168183015260608101959095526080850193909352941660a08301526001600160801b0390931660c0808301919091528351808303909101815260e0909101909252815191012090565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610d815760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610358565b50505050565b60008281526005602090815260408083204390556006825280832080546001600160a01b031916339081179091556007909252909120829055610dd6906001600160a01b038516903084610ddb565b505050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610e5e5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610358565b5050505050565b6003546001600160801b0316831115610e94576040516305bf279d60e41b815260048101849052602401610358565b60008481526005602052604090205415610ec4576040516304daa62560e21b815260048101859052602401610358565b604080517f0efb9dda140a951df4393d44ca40349032d31811466afd20eacd4b4136c3f4986020808301919091528183018790526060808301879052835180840390910181526080830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000060a084015260bc8084018290528451808503909101815260dc90930190935281519101206000610f9d8286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610fdb92505050565b9050876001600160a01b0316816001600160a01b031614610fd1576040516324a0dbd760e21b815260040160405180910390fd5b5050505050505050565b6000806000610fea8585610fff565b91509150610ff78161106d565b509392505050565b60008082516041036110355760208301516040840151606085015160001a61102987828585611226565b94509450505050611066565b825160400361105e5760208301516040840151611053868383611313565b935093505050611066565b506000905060025b9250929050565b600081600481111561108157611081611764565b036110895750565b600181600481111561109d5761109d611764565b036110ea5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610358565b60028160048111156110fe576110fe611764565b0361114b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610358565b600381600481111561115f5761115f611764565b036111b75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610358565b60048160048111156111cb576111cb611764565b036112235760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610358565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561125d575060009050600361130a565b8460ff16601b1415801561127557508460ff16601c14155b15611286575060009050600461130a565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156112da573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113035760006001925092505061130a565b9150600090505b94509492505050565b6000806001600160ff1b0383168161133060ff86901c601b61177a565b905061133e87828885611226565b935093505050935093915050565b60006020828403121561135e57600080fd5b5035919050565b80356001600160a01b038116811461137c57600080fd5b919050565b801515811461122357600080fd5b600080604083850312156113a257600080fd5b6113ab83611365565b915060208301356113bb81611381565b809150509250929050565b6000602082840312156113d857600080fd5b6113e182611365565b9392505050565b80356001600160801b038116811461137c57600080fd5b60008060008060008060c0878903121561141857600080fd5b61142187611365565b955061142f60208801611365565b9450604087013593506060870135925061144b60808801611365565b915061145960a088016113e8565b90509295509295509295565b60006020828403121561147757600080fd5b6113e1826113e8565b600080600080600080600060e0888a03121561149b57600080fd5b6114a488611365565b96506114b260208901611365565b955060408801359450606088013593506114ce60808901611365565b92506114dc60a089016113e8565b915060c0880135905092959891949750929550565b600080600080600060a0868803121561150957600080fd5b61151286611365565b945061152060208701611365565b9350604086013592506060860135915061153c60808701611365565b90509295509295909350565b60008083601f84011261155a57600080fd5b50813567ffffffffffffffff81111561157257600080fd5b60208301915083602082850101111561106657600080fd5b6000806000806000608086880312156115a257600080fd5b6115ab86611365565b94506020860135935060408601359250606086013567ffffffffffffffff8111156115d557600080fd5b6115e188828901611548565b969995985093965092949392505050565b60008060008060008060008060008060006101408c8e03121561161457600080fd5b61161d8c611365565b9a5061162b60208d01611365565b995060408c0135985060608c0135975061164760808d01611365565b965061165560a08d016113e8565b955060c08c0135945061166a60e08d01611365565b93506101008c013592506101208c013567ffffffffffffffff81111561168f57600080fd5b61169b8e828f01611548565b915080935050809150509295989b509295989b9093969950565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015611703576117036116db565b500390565b60006001600160801b03808316818103611724576117246116db565b6001019392505050565b60006020828403121561174057600080fd5b81516113e181611381565b60006020828403121561175d57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6000821982111561178d5761178d6116db565b50019056fea2646970667358221220b144609d5e94d9780a67f8606701da17b69128c8d7de725234b2a7005a9c983e64736f6c634300080d0033608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350601960038190556040519081527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a1610c578061009b6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461010d5780639d86698514610138578063af5899fc146101ab578063daf9c210146101be578063fc361c38146101f157600080fd5b806307de99f6146100a35780630ffb1d8b146100c957806313af4035146100de578063391fe4e2146100f15780638945bd28146100fa575b600080fd5b6100b66100b13660046109e4565b610204565b6040519081526020015b60405180910390f35b6100dc6100d7366004610a2a565b610215565b005b6100dc6100ec366004610a61565b610273565b6100b660035481565b6100dc6101083660046109e4565b6102e8565b600054610120906001600160a01b031681565b6040516001600160a01b0390911681526020016100c0565b6101986101463660046109e4565b60016020819052600091825260409091208054918101546002820154600383015460048401546005909401546001600160a01b0395861695938416949390921692909160ff8082169161010090041687565b6040516100c09796959493929190610a99565b6100b66101b9366004610aff565b61034d565b6101e16101cc366004610a61565b60026020526000908152604090205460ff1681565b60405190151581526020016100c0565b6100dc6101ff366004610b4a565b6105ee565b600061020f8261093e565b92915050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f90610b6f565b60405180910390fd5b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b6000546001600160a01b0316331461029d5760405162461bcd60e51b815260040161023f90610b6f565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b6000546001600160a01b031633146103125760405162461bcd60e51b815260040161023f90610b6f565b60038190556040518181527fa2e09ae7caa0e84bcfe806d931934b92bf11ce67ffcaa3033af9a1e0319969519060200160405180910390a150565b6001600160a01b03821660009081526002602052604081205460ff166103915760405163010d7e6160e11b81526001600160a01b038416600482015260240161023f565b600061039c8361093e565b604080516001600160a01b03808a1660208301528089169282019290925290861660608201526080810185905260a0810182905290915060009060c00160408051601f19818403018152919052805160209091012090506001600082815260016020526040902060050154610100900460ff16600281111561042057610420610a83565b036104415760405163d5e880e960e01b81526004810182905260240161023f565b60006040518060e00160405280896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b03168152602001868152602001848152602001600015158152602001600160028111156104a3576104a3610a83565b9052600083815260016020818152604092839020845181546001600160a01b03199081166001600160a01b03928316178355928601519382018054841694821694909417909355928401516002808501805490931691909316179055606083015160038301556080830151600483015560a083015160058301805460ff198116921515928317825560c0860151959650869593919261ffff1990911661ff0019909116179061010090849081111561055d5761055d610a83565b021790555061057a9150506001600160a01b03871688308661095a565b61058f6001600160a01b03871633308861095a565b604080516001600160a01b03888116825260208201889052918101859052818916918a169084907fb10e0c42d0d8cd4a999f95c50d18109fb205fdf5e55a8ed89121cab7f9f65f699060600160405180910390a4509695505050505050565b6000546001600160a01b031633146106185760405162461bcd60e51b815260040161023f90610b6f565b6000828152600160208181526040808420815160e08101835281546001600160a01b03908116825294820154851693810193909352600280820154909416918301919091526003810154606083015260048101546080830152600581015460ff808216151560a08501529293919260c085019261010090920416908111156106a2576106a2610a83565b60028111156106b3576106b3610a83565b905250905060028160c0015160028111156106d0576106d0610a83565b036106f15760405163b677167760e01b81526004810184905260240161023f565b81151560010361079c5780604001516001600160a01b031663a9059cbb8260000151836060015184608001516107279190610bab565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107969190610bc3565b50610839565b80604001516001600160a01b031663a9059cbb8260200151836060015184608001516107c89190610bab565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108379190610bc3565b505b600260c0820181815283151560a08401908152600086815260016020818152604092839020875181546001600160a01b039182166001600160a01b0319918216178355928901519382018054948216948416949094179093559287015183870180549190931691161790556060850151600382015560808501516004820155905160058201805491151560ff198316811782559351869593949093919261ff001990911661ffff1990911617906101009084908111156108fb576108fb610a83565b02179055505060405183151581528491507fdbed7580b9c2829ee6b384e3833f10b16f9885601c98a01c40fd705b543e9c669060200160405180910390a2505050565b60006064600354836109509190610be0565b61020f9190610bff565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806109dd5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b604482015260640161023f565b5050505050565b6000602082840312156109f657600080fd5b5035919050565b80356001600160a01b0381168114610a1457600080fd5b919050565b8015158114610a2757600080fd5b50565b60008060408385031215610a3d57600080fd5b610a46836109fd565b91506020830135610a5681610a19565b809150509250929050565b600060208284031215610a7357600080fd5b610a7c826109fd565b9392505050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b038881168252878116602083015286166040820152606081018590526080810184905282151560a082015260e0810160038310610aed57634e487b7160e01b600052602160045260246000fd5b8260c083015298975050505050505050565b60008060008060808587031215610b1557600080fd5b610b1e856109fd565b9350610b2c602086016109fd565b9250610b3a604086016109fd565b9396929550929360600135925050565b60008060408385031215610b5d57600080fd5b823591506020830135610a5681610a19565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610bbe57610bbe610b95565b500190565b600060208284031215610bd557600080fd5b8151610a7c81610a19565b6000816000190483118215151615610bfa57610bfa610b95565b500290565b600082610c1c57634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205bdec491885dcc1ed8f1a4dbb49b3f7c52371c21a2e5f51f7e6207c148789ec264736f6c634300080d00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d81376b9868b292a46a1c486d344e427a3088657fda629b5f4a647822d329cd6a885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212202db6e7e47ddea32534aaaad6027139567cf5d740e80cf579b74f8762b723d03264736f6c634300080d0033" . parse () . expect ("invalid bytecode")
        });
    pub struct TradeTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for TradeTest<M> {
        fn clone(&self) -> Self {
            TradeTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for TradeTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M: ethers::providers::Middleware> std::fmt::Debug for TradeTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(TradeTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> TradeTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), TRADETEST_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                TRADETEST_ABI.clone(),
                TRADETEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `bound` (0x5a6c1eed) function"]
        pub fn bound(
            &self,
            x: ethers::core::types::U256,
            min: ethers::core::types::U256,
            max: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([90, 108, 30, 237], (x, min, max))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x6bce989b) function"]
        pub fn deal_with_token(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([107, 206, 152, 155], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0x97754ae9) function"]
        pub fn deal_with_token_and_adjust(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
            adjust: bool,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([151, 117, 74, 233], (token, to, give, adjust))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deal` (0xc88a5e6d) function"]
        pub fn deal(
            &self,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 138, 94, 109], (to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x29ce9dde) function"]
        pub fn deploy_code_with_args(
            &self,
            what: String,
            args: ethers::core::types::Bytes,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([41, 206, 157, 222], (what, args))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `deployCode` (0x9a8325a0) function"]
        pub fn deploy_code(
            &self,
            what: String,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([154, 131, 37, 160], what)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x233240ee) function"]
        pub fn hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([35, 50, 64, 238], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0x29a9e300) function"]
        pub fn hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([41, 169, 227, 0], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xaf9bbe5f) function"]
        pub fn hoax_3(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([175, 155, 190, 95], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `hoax` (0xe9a79a7b) function"]
        pub fn hoax_4(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([233, 167, 154, 123], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `rewind` (0x2d6c17a3) function"]
        pub fn rewind(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([45, 108, 23, 163], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `skip` (0xb9c071b4) function"]
        pub fn skip(
            &self,
            time: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([185, 192, 113, 180], time)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x108554f2) function"]
        pub fn start_hoax_1(
            &self,
            who: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([16, 133, 84, 242], (who, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x3bf82db1) function"]
        pub fn start_hoax_2(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([59, 248, 45, 177], (who, origin, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0x6f597075) function"]
        pub fn start_hoax_0(
            &self,
            who: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([111, 89, 112, 117], who)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `startHoax` (0xd06d8229) function"]
        pub fn start_hoax_4(
            &self,
            who: ethers::core::types::Address,
            origin: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([208, 109, 130, 41], (who, origin))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotFillIfAlreadyFilled` (0xe372fa39) function"]
        pub fn test_cannot_fill_if_already_filled(
            &self,
            amount_in: ethers::core::types::U256,
            amount_out: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([227, 114, 250, 57], (amount_in, amount_out))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotFillIfNoTokens` (0xdf065999) function"]
        pub fn test_cannot_fill_if_no_tokens(
            &self,
            amount_out: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([223, 6, 89, 153], amount_out)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotFillTradeWithUpdateFeeWithInvalidSignature` (0xc8f10544) function"]
        pub fn test_cannot_fill_trade_with_update_fee_with_invalid_signature(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([200, 241, 5, 68], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotFillWithUpdateFeeForFilledTrade` (0xd48030c2) function"]
        pub fn test_cannot_fill_with_update_fee_for_filled_trade(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([212, 128, 48, 194], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotFillWithUpdateFeePastMax` (0xbb4c3657) function"]
        pub fn test_cannot_fill_with_update_fee_past_max(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([187, 76, 54, 87], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotTradeAboveMaxFee` (0x1321db58) function"]
        pub fn test_cannot_trade_above_max_fee(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([19, 33, 219, 88], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotTradeIfNoBalance` (0x84b18093) function"]
        pub fn test_cannot_trade_if_no_balance(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([132, 177, 128, 147], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotTradeNonWhitelistedToken` (0xd8728188) function"]
        pub fn test_cannot_trade_non_whitelisted_token(
            &self,
            token: ethers::core::types::Address,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 114, 129, 136], token)
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotTradeSameToken` (0x0f1e85ae) function"]
        pub fn test_cannot_trade_same_token(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([15, 30, 133, 174], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotTradeToBlackHole` (0xa8604cef) function"]
        pub fn test_cannot_trade_to_black_hole(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([168, 96, 76, 239], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotTradeZeroAmount` (0xe54483fa) function"]
        pub fn test_cannot_trade_zero_amount(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([229, 68, 131, 250], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotUpdateFeeForFilledTrade` (0xd6d4ac4c) function"]
        pub fn test_cannot_update_fee_for_filled_trade(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([214, 212, 172, 76], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotUpdateFeePastMax` (0xc4d27e67) function"]
        pub fn test_cannot_update_fee_past_max(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([196, 210, 126, 103], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testCannotUpdateFeeWithInvalidSignature` (0x248439ab) function"]
        pub fn test_cannot_update_fee_with_invalid_signature(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([36, 132, 57, 171], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testFillTrade` (0x4a0c03a9) function"]
        pub fn test_fill_trade(
            &self,
            amount_in: ethers::core::types::U256,
            amount_out: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([74, 12, 3, 169], (amount_in, amount_out))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testFillTradeWithUpdatedFee` (0x5061be4b) function"]
        pub fn test_fill_trade_with_updated_fee(
            &self,
            amount_in: ethers::core::types::U256,
            amount_out: ethers::core::types::U256,
            new_fee_pct: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([80, 97, 190, 75], (amount_in, amount_out, new_fee_pct))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testRequestTrade` (0xd21ce7f8) function"]
        pub fn test_request_trade(
            &self,
            amount: ethers::core::types::U256,
            fee_pct: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([210, 28, 231, 248], (amount, fee_pct))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testUpdateFee` (0x332e778e) function"]
        pub fn test_update_fee(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([51, 46, 119, 142], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `tip` (0xd82555f1) function"]
        pub fn tip(
            &self,
            token: ethers::core::types::Address,
            to: ethers::core::types::Address,
            give: ethers::core::types::U256,
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([216, 37, 85, 241], (token, to, give))
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `vm` (0x3a768463) function"]
        pub fn vm(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::Address> {
            self.0
                .method_hash([58, 118, 132, 99], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `MaxFeePctChanged` event"]
        pub fn max_fee_pct_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, MaxFeePctChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `SafeBlockThresholdChanged` event"]
        pub fn safe_block_threshold_changed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, SafeBlockThresholdChangedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TokenWhitelisted` event"]
        pub fn token_whitelisted_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TokenWhitelistedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeDisputed` event"]
        pub fn trade_disputed_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeDisputedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeFilled` event"]
        pub fn trade_filled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeFilledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeRequested` event"]
        pub fn trade_requested_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeRequestedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `TradeSettled` event"]
        pub fn trade_settled_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, TradeSettledFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `UpdatedFeeForTrade` event"]
        pub fn updated_fee_for_trade_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, UpdatedFeeForTradeFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `WARNING_Deprecated` event"]
        pub fn warning_deprecated_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, WarningDeprecatedFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, TradeTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for TradeTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "MaxFeePctChanged", abi = "MaxFeePctChanged(uint128)")]
    pub struct MaxFeePctChangedFilter {
        pub new_max_fee_pct: u128,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "SafeBlockThresholdChanged",
        abi = "SafeBlockThresholdChanged(uint256)"
    )]
    pub struct SafeBlockThresholdChangedFilter {
        pub new_safe_block_threshold: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "TokenWhitelisted", abi = "TokenWhitelisted(address,bool)")]
    pub struct TokenWhitelistedFilter {
        #[ethevent(indexed)]
        pub token: ethers::core::types::Address,
        pub whitelisted: bool,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeDisputed",
        abi = "TradeDisputed(address,bytes32,uint256,uint256)"
    )]
    pub struct TradeDisputedFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        #[ethevent(indexed)]
        pub filled_amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeFilled",
        abi = "TradeFilled(address,bytes32,uint256,uint256,uint256)"
    )]
    pub struct TradeFilledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        #[ethevent(indexed)]
        pub filled_at_block: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeRequested",
        abi = "TradeRequested(address,address,uint256,uint256,address,uint256)"
    )]
    pub struct TradeRequestedFilter {
        #[ethevent(indexed)]
        pub token_in: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub token_out: ethers::core::types::Address,
        pub fee_pct: ethers::core::types::U256,
        pub amount: ethers::core::types::U256,
        pub to: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_index: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "TradeSettled",
        abi = "TradeSettled(address,bytes32,uint256,uint256)"
    )]
    pub struct TradeSettledFilter {
        #[ethevent(indexed)]
        pub relayer: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        #[ethevent(indexed)]
        pub filled_amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "UpdatedFeeForTrade",
        abi = "UpdatedFeeForTrade(address,bytes32,uint256)"
    )]
    pub struct UpdatedFeeForTradeFilter {
        #[ethevent(indexed)]
        pub trader: ethers::core::types::Address,
        #[ethevent(indexed)]
        pub trade_id: [u8; 32],
        pub new_fee_pct: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "WARNING_Deprecated", abi = "WARNING_Deprecated(string)")]
    pub struct WarningDeprecatedFilter {
        pub msg: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TradeTestEvents {
        MaxFeePctChangedFilter(MaxFeePctChangedFilter),
        SafeBlockThresholdChangedFilter(SafeBlockThresholdChangedFilter),
        TokenWhitelistedFilter(TokenWhitelistedFilter),
        TradeDisputedFilter(TradeDisputedFilter),
        TradeFilledFilter(TradeFilledFilter),
        TradeRequestedFilter(TradeRequestedFilter),
        TradeSettledFilter(TradeSettledFilter),
        UpdatedFeeForTradeFilter(UpdatedFeeForTradeFilter),
        WarningDeprecatedFilter(WarningDeprecatedFilter),
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for TradeTestEvents {
        fn decode_log(log: &ethers::core::abi::RawLog) -> Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = MaxFeePctChangedFilter::decode_log(log) {
                return Ok(TradeTestEvents::MaxFeePctChangedFilter(decoded));
            }
            if let Ok(decoded) = SafeBlockThresholdChangedFilter::decode_log(log) {
                return Ok(TradeTestEvents::SafeBlockThresholdChangedFilter(decoded));
            }
            if let Ok(decoded) = TokenWhitelistedFilter::decode_log(log) {
                return Ok(TradeTestEvents::TokenWhitelistedFilter(decoded));
            }
            if let Ok(decoded) = TradeDisputedFilter::decode_log(log) {
                return Ok(TradeTestEvents::TradeDisputedFilter(decoded));
            }
            if let Ok(decoded) = TradeFilledFilter::decode_log(log) {
                return Ok(TradeTestEvents::TradeFilledFilter(decoded));
            }
            if let Ok(decoded) = TradeRequestedFilter::decode_log(log) {
                return Ok(TradeTestEvents::TradeRequestedFilter(decoded));
            }
            if let Ok(decoded) = TradeSettledFilter::decode_log(log) {
                return Ok(TradeTestEvents::TradeSettledFilter(decoded));
            }
            if let Ok(decoded) = UpdatedFeeForTradeFilter::decode_log(log) {
                return Ok(TradeTestEvents::UpdatedFeeForTradeFilter(decoded));
            }
            if let Ok(decoded) = WarningDeprecatedFilter::decode_log(log) {
                return Ok(TradeTestEvents::WarningDeprecatedFilter(decoded));
            }
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(TradeTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(TradeTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for TradeTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TradeTestEvents::MaxFeePctChangedFilter(element) => element.fmt(f),
                TradeTestEvents::SafeBlockThresholdChangedFilter(element) => element.fmt(f),
                TradeTestEvents::TokenWhitelistedFilter(element) => element.fmt(f),
                TradeTestEvents::TradeDisputedFilter(element) => element.fmt(f),
                TradeTestEvents::TradeFilledFilter(element) => element.fmt(f),
                TradeTestEvents::TradeRequestedFilter(element) => element.fmt(f),
                TradeTestEvents::TradeSettledFilter(element) => element.fmt(f),
                TradeTestEvents::UpdatedFeeForTradeFilter(element) => element.fmt(f),
                TradeTestEvents::WarningDeprecatedFilter(element) => element.fmt(f),
                TradeTestEvents::LogFilter(element) => element.fmt(f),
                TradeTestEvents::LogAddressFilter(element) => element.fmt(f),
                TradeTestEvents::LogBytesFilter(element) => element.fmt(f),
                TradeTestEvents::LogBytes32Filter(element) => element.fmt(f),
                TradeTestEvents::LogIntFilter(element) => element.fmt(f),
                TradeTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                TradeTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                TradeTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                TradeTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                TradeTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                TradeTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                TradeTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                TradeTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                TradeTestEvents::LogStringFilter(element) => element.fmt(f),
                TradeTestEvents::LogUintFilter(element) => element.fmt(f),
                TradeTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST`function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `bound`function with signature `bound(uint256,uint256,uint256)` and selector `[90, 108, 30, 237]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "bound", abi = "bound(uint256,uint256,uint256)")]
    pub struct BoundCall {
        pub x: ethers::core::types::U256,
        pub min: ethers::core::types::U256,
        pub max: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256)` and selector `[107, 206, 152, 155]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256)")]
    pub struct DealWithTokenCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,address,uint256,bool)` and selector `[151, 117, 74, 233]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,address,uint256,bool)")]
    pub struct DealWithTokenAndAdjustCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
        pub adjust: bool,
    }
    #[doc = "Container type for all input parameters for the `deal`function with signature `deal(address,uint256)` and selector `[200, 138, 94, 109]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deal", abi = "deal(address,uint256)")]
    pub struct DealCall {
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string,bytes)` and selector `[41, 206, 157, 222]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string,bytes)")]
    pub struct DeployCodeWithArgsCall {
        pub what: String,
        pub args: ethers::core::types::Bytes,
    }
    #[doc = "Container type for all input parameters for the `deployCode`function with signature `deployCode(string)` and selector `[154, 131, 37, 160]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "deployCode", abi = "deployCode(string)")]
    pub struct DeployCodeCall {
        pub what: String,
    }
    #[doc = "Container type for all input parameters for the `failed`function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address)` and selector `[35, 50, 64, 238]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address)")]
    pub struct Hoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address)` and selector `[41, 169, 227, 0]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address)")]
    pub struct Hoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,address,uint256)` and selector `[175, 155, 190, 95]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,address,uint256)")]
    pub struct Hoax3Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `hoax`function with signature `hoax(address,uint256)` and selector `[233, 167, 154, 123]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "hoax", abi = "hoax(address,uint256)")]
    pub struct Hoax4Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `rewind`function with signature `rewind(uint256)` and selector `[45, 108, 23, 163]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "rewind", abi = "rewind(uint256)")]
    pub struct RewindCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `setUp`function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `skip`function with signature `skip(uint256)` and selector `[185, 192, 113, 180]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "skip", abi = "skip(uint256)")]
    pub struct SkipCall {
        pub time: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,uint256)` and selector `[16, 133, 84, 242]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,uint256)")]
    pub struct StartHoax1Call {
        pub who: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address,uint256)` and selector `[59, 248, 45, 177]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address,uint256)")]
    pub struct StartHoax2Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address)` and selector `[111, 89, 112, 117]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address)")]
    pub struct StartHoax0Call {
        pub who: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `startHoax`function with signature `startHoax(address,address)` and selector `[208, 109, 130, 41]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "startHoax", abi = "startHoax(address,address)")]
    pub struct StartHoax4Call {
        pub who: ethers::core::types::Address,
        pub origin: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `testCannotFillIfAlreadyFilled`function with signature `testCannotFillIfAlreadyFilled(uint256,uint256)` and selector `[227, 114, 250, 57]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotFillIfAlreadyFilled",
        abi = "testCannotFillIfAlreadyFilled(uint256,uint256)"
    )]
    pub struct TestCannotFillIfAlreadyFilledCall {
        pub amount_in: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testCannotFillIfNoTokens`function with signature `testCannotFillIfNoTokens(uint256)` and selector `[223, 6, 89, 153]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotFillIfNoTokens",
        abi = "testCannotFillIfNoTokens(uint256)"
    )]
    pub struct TestCannotFillIfNoTokensCall {
        pub amount_out: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testCannotFillTradeWithUpdateFeeWithInvalidSignature`function with signature `testCannotFillTradeWithUpdateFeeWithInvalidSignature()` and selector `[200, 241, 5, 68]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotFillTradeWithUpdateFeeWithInvalidSignature",
        abi = "testCannotFillTradeWithUpdateFeeWithInvalidSignature()"
    )]
    pub struct TestCannotFillTradeWithUpdateFeeWithInvalidSignatureCall;
    #[doc = "Container type for all input parameters for the `testCannotFillWithUpdateFeeForFilledTrade`function with signature `testCannotFillWithUpdateFeeForFilledTrade()` and selector `[212, 128, 48, 194]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotFillWithUpdateFeeForFilledTrade",
        abi = "testCannotFillWithUpdateFeeForFilledTrade()"
    )]
    pub struct TestCannotFillWithUpdateFeeForFilledTradeCall;
    #[doc = "Container type for all input parameters for the `testCannotFillWithUpdateFeePastMax`function with signature `testCannotFillWithUpdateFeePastMax()` and selector `[187, 76, 54, 87]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotFillWithUpdateFeePastMax",
        abi = "testCannotFillWithUpdateFeePastMax()"
    )]
    pub struct TestCannotFillWithUpdateFeePastMaxCall;
    #[doc = "Container type for all input parameters for the `testCannotTradeAboveMaxFee`function with signature `testCannotTradeAboveMaxFee()` and selector `[19, 33, 219, 88]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotTradeAboveMaxFee",
        abi = "testCannotTradeAboveMaxFee()"
    )]
    pub struct TestCannotTradeAboveMaxFeeCall;
    #[doc = "Container type for all input parameters for the `testCannotTradeIfNoBalance`function with signature `testCannotTradeIfNoBalance()` and selector `[132, 177, 128, 147]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotTradeIfNoBalance",
        abi = "testCannotTradeIfNoBalance()"
    )]
    pub struct TestCannotTradeIfNoBalanceCall;
    #[doc = "Container type for all input parameters for the `testCannotTradeNonWhitelistedToken`function with signature `testCannotTradeNonWhitelistedToken(address)` and selector `[216, 114, 129, 136]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotTradeNonWhitelistedToken",
        abi = "testCannotTradeNonWhitelistedToken(address)"
    )]
    pub struct TestCannotTradeNonWhitelistedTokenCall {
        pub token: ethers::core::types::Address,
    }
    #[doc = "Container type for all input parameters for the `testCannotTradeSameToken`function with signature `testCannotTradeSameToken()` and selector `[15, 30, 133, 174]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testCannotTradeSameToken", abi = "testCannotTradeSameToken()")]
    pub struct TestCannotTradeSameTokenCall;
    #[doc = "Container type for all input parameters for the `testCannotTradeToBlackHole`function with signature `testCannotTradeToBlackHole()` and selector `[168, 96, 76, 239]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotTradeToBlackHole",
        abi = "testCannotTradeToBlackHole()"
    )]
    pub struct TestCannotTradeToBlackHoleCall;
    #[doc = "Container type for all input parameters for the `testCannotTradeZeroAmount`function with signature `testCannotTradeZeroAmount()` and selector `[229, 68, 131, 250]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotTradeZeroAmount",
        abi = "testCannotTradeZeroAmount()"
    )]
    pub struct TestCannotTradeZeroAmountCall;
    #[doc = "Container type for all input parameters for the `testCannotUpdateFeeForFilledTrade`function with signature `testCannotUpdateFeeForFilledTrade()` and selector `[214, 212, 172, 76]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotUpdateFeeForFilledTrade",
        abi = "testCannotUpdateFeeForFilledTrade()"
    )]
    pub struct TestCannotUpdateFeeForFilledTradeCall;
    #[doc = "Container type for all input parameters for the `testCannotUpdateFeePastMax`function with signature `testCannotUpdateFeePastMax()` and selector `[196, 210, 126, 103]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotUpdateFeePastMax",
        abi = "testCannotUpdateFeePastMax()"
    )]
    pub struct TestCannotUpdateFeePastMaxCall;
    #[doc = "Container type for all input parameters for the `testCannotUpdateFeeWithInvalidSignature`function with signature `testCannotUpdateFeeWithInvalidSignature()` and selector `[36, 132, 57, 171]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testCannotUpdateFeeWithInvalidSignature",
        abi = "testCannotUpdateFeeWithInvalidSignature()"
    )]
    pub struct TestCannotUpdateFeeWithInvalidSignatureCall;
    #[doc = "Container type for all input parameters for the `testFillTrade`function with signature `testFillTrade(uint256,uint256)` and selector `[74, 12, 3, 169]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testFillTrade", abi = "testFillTrade(uint256,uint256)")]
    pub struct TestFillTradeCall {
        pub amount_in: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testFillTradeWithUpdatedFee`function with signature `testFillTradeWithUpdatedFee(uint256,uint256,uint256)` and selector `[80, 97, 190, 75]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(
        name = "testFillTradeWithUpdatedFee",
        abi = "testFillTradeWithUpdatedFee(uint256,uint256,uint256)"
    )]
    pub struct TestFillTradeWithUpdatedFeeCall {
        pub amount_in: ethers::core::types::U256,
        pub amount_out: ethers::core::types::U256,
        pub new_fee_pct: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testRequestTrade`function with signature `testRequestTrade(uint256,uint256)` and selector `[210, 28, 231, 248]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testRequestTrade", abi = "testRequestTrade(uint256,uint256)")]
    pub struct TestRequestTradeCall {
        pub amount: ethers::core::types::U256,
        pub fee_pct: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `testUpdateFee`function with signature `testUpdateFee()` and selector `[51, 46, 119, 142]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "testUpdateFee", abi = "testUpdateFee()")]
    pub struct TestUpdateFeeCall;
    #[doc = "Container type for all input parameters for the `tip`function with signature `tip(address,address,uint256)` and selector `[216, 37, 85, 241]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "tip", abi = "tip(address,address,uint256)")]
    pub struct TipCall {
        pub token: ethers::core::types::Address,
        pub to: ethers::core::types::Address,
        pub give: ethers::core::types::U256,
    }
    #[doc = "Container type for all input parameters for the `vm`function with signature `vm()` and selector `[58, 118, 132, 99]`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
    )]
    #[ethcall(name = "vm", abi = "vm()")]
    pub struct VmCall;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TradeTestCalls {
        IsTest(IsTestCall),
        Bound(BoundCall),
        DealWithToken(DealWithTokenCall),
        DealWithTokenAndAdjust(DealWithTokenAndAdjustCall),
        Deal(DealCall),
        DeployCodeWithArgs(DeployCodeWithArgsCall),
        DeployCode(DeployCodeCall),
        Failed(FailedCall),
        Hoax0(Hoax0Call),
        Hoax2(Hoax2Call),
        Hoax3(Hoax3Call),
        Hoax4(Hoax4Call),
        Rewind(RewindCall),
        SetUp(SetUpCall),
        Skip(SkipCall),
        StartHoax1(StartHoax1Call),
        StartHoax2(StartHoax2Call),
        StartHoax0(StartHoax0Call),
        StartHoax4(StartHoax4Call),
        TestCannotFillIfAlreadyFilled(TestCannotFillIfAlreadyFilledCall),
        TestCannotFillIfNoTokens(TestCannotFillIfNoTokensCall),
        TestCannotFillTradeWithUpdateFeeWithInvalidSignature(
            TestCannotFillTradeWithUpdateFeeWithInvalidSignatureCall,
        ),
        TestCannotFillWithUpdateFeeForFilledTrade(TestCannotFillWithUpdateFeeForFilledTradeCall),
        TestCannotFillWithUpdateFeePastMax(TestCannotFillWithUpdateFeePastMaxCall),
        TestCannotTradeAboveMaxFee(TestCannotTradeAboveMaxFeeCall),
        TestCannotTradeIfNoBalance(TestCannotTradeIfNoBalanceCall),
        TestCannotTradeNonWhitelistedToken(TestCannotTradeNonWhitelistedTokenCall),
        TestCannotTradeSameToken(TestCannotTradeSameTokenCall),
        TestCannotTradeToBlackHole(TestCannotTradeToBlackHoleCall),
        TestCannotTradeZeroAmount(TestCannotTradeZeroAmountCall),
        TestCannotUpdateFeeForFilledTrade(TestCannotUpdateFeeForFilledTradeCall),
        TestCannotUpdateFeePastMax(TestCannotUpdateFeePastMaxCall),
        TestCannotUpdateFeeWithInvalidSignature(TestCannotUpdateFeeWithInvalidSignatureCall),
        TestFillTrade(TestFillTradeCall),
        TestFillTradeWithUpdatedFee(TestFillTradeWithUpdatedFeeCall),
        TestRequestTrade(TestRequestTradeCall),
        TestUpdateFee(TestUpdateFeeCall),
        Tip(TipCall),
        Vm(VmCall),
    }
    impl ethers::core::abi::AbiDecode for TradeTestCalls {
        fn decode(data: impl AsRef<[u8]>) -> Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <BoundCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::Bound(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::DealWithToken(decoded));
            }
            if let Ok(decoded) =
                <DealWithTokenAndAdjustCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::DealWithTokenAndAdjust(decoded));
            }
            if let Ok(decoded) = <DealCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(TradeTestCalls::Deal(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeWithArgsCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::DeployCodeWithArgs(decoded));
            }
            if let Ok(decoded) =
                <DeployCodeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::DeployCode(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <Hoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::Hoax0(decoded));
            }
            if let Ok(decoded) = <Hoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::Hoax2(decoded));
            }
            if let Ok(decoded) = <Hoax3Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::Hoax3(decoded));
            }
            if let Ok(decoded) = <Hoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::Hoax4(decoded));
            }
            if let Ok(decoded) = <RewindCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::Rewind(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) = <SkipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(TradeTestCalls::Skip(decoded));
            }
            if let Ok(decoded) =
                <StartHoax1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::StartHoax1(decoded));
            }
            if let Ok(decoded) =
                <StartHoax2Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::StartHoax2(decoded));
            }
            if let Ok(decoded) =
                <StartHoax0Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::StartHoax0(decoded));
            }
            if let Ok(decoded) =
                <StartHoax4Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::StartHoax4(decoded));
            }
            if let Ok(decoded) =
                <TestCannotFillIfAlreadyFilledCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotFillIfAlreadyFilled(decoded));
            }
            if let Ok(decoded) =
                <TestCannotFillIfNoTokensCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotFillIfNoTokens(decoded));
            }
            if let Ok (decoded) = < TestCannotFillTradeWithUpdateFeeWithInvalidSignatureCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (TradeTestCalls :: TestCannotFillTradeWithUpdateFeeWithInvalidSignature (decoded)) }
            if let Ok (decoded) = < TestCannotFillWithUpdateFeeForFilledTradeCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (TradeTestCalls :: TestCannotFillWithUpdateFeeForFilledTrade (decoded)) }
            if let Ok(decoded) =
                <TestCannotFillWithUpdateFeePastMaxCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotFillWithUpdateFeePastMax(decoded));
            }
            if let Ok(decoded) =
                <TestCannotTradeAboveMaxFeeCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotTradeAboveMaxFee(decoded));
            }
            if let Ok(decoded) =
                <TestCannotTradeIfNoBalanceCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotTradeIfNoBalance(decoded));
            }
            if let Ok(decoded) =
                <TestCannotTradeNonWhitelistedTokenCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotTradeNonWhitelistedToken(decoded));
            }
            if let Ok(decoded) =
                <TestCannotTradeSameTokenCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotTradeSameToken(decoded));
            }
            if let Ok(decoded) =
                <TestCannotTradeToBlackHoleCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotTradeToBlackHole(decoded));
            }
            if let Ok(decoded) =
                <TestCannotTradeZeroAmountCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotTradeZeroAmount(decoded));
            }
            if let Ok(decoded) =
                <TestCannotUpdateFeeForFilledTradeCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotUpdateFeeForFilledTrade(decoded));
            }
            if let Ok(decoded) =
                <TestCannotUpdateFeePastMaxCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestCannotUpdateFeePastMax(decoded));
            }
            if let Ok (decoded) = < TestCannotUpdateFeeWithInvalidSignatureCall as ethers :: core :: abi :: AbiDecode > :: decode (data . as_ref ()) { return Ok (TradeTestCalls :: TestCannotUpdateFeeWithInvalidSignature (decoded)) }
            if let Ok(decoded) =
                <TestFillTradeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::TestFillTrade(decoded));
            }
            if let Ok(decoded) =
                <TestFillTradeWithUpdatedFeeCall as ethers::core::abi::AbiDecode>::decode(
                    data.as_ref(),
                )
            {
                return Ok(TradeTestCalls::TestFillTradeWithUpdatedFee(decoded));
            }
            if let Ok(decoded) =
                <TestRequestTradeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::TestRequestTrade(decoded));
            }
            if let Ok(decoded) =
                <TestUpdateFeeCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TradeTestCalls::TestUpdateFee(decoded));
            }
            if let Ok(decoded) = <TipCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(TradeTestCalls::Tip(decoded));
            }
            if let Ok(decoded) = <VmCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(TradeTestCalls::Vm(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for TradeTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                TradeTestCalls::IsTest(element) => element.encode(),
                TradeTestCalls::Bound(element) => element.encode(),
                TradeTestCalls::DealWithToken(element) => element.encode(),
                TradeTestCalls::DealWithTokenAndAdjust(element) => element.encode(),
                TradeTestCalls::Deal(element) => element.encode(),
                TradeTestCalls::DeployCodeWithArgs(element) => element.encode(),
                TradeTestCalls::DeployCode(element) => element.encode(),
                TradeTestCalls::Failed(element) => element.encode(),
                TradeTestCalls::Hoax0(element) => element.encode(),
                TradeTestCalls::Hoax2(element) => element.encode(),
                TradeTestCalls::Hoax3(element) => element.encode(),
                TradeTestCalls::Hoax4(element) => element.encode(),
                TradeTestCalls::Rewind(element) => element.encode(),
                TradeTestCalls::SetUp(element) => element.encode(),
                TradeTestCalls::Skip(element) => element.encode(),
                TradeTestCalls::StartHoax1(element) => element.encode(),
                TradeTestCalls::StartHoax2(element) => element.encode(),
                TradeTestCalls::StartHoax0(element) => element.encode(),
                TradeTestCalls::StartHoax4(element) => element.encode(),
                TradeTestCalls::TestCannotFillIfAlreadyFilled(element) => element.encode(),
                TradeTestCalls::TestCannotFillIfNoTokens(element) => element.encode(),
                TradeTestCalls::TestCannotFillTradeWithUpdateFeeWithInvalidSignature(element) => {
                    element.encode()
                }
                TradeTestCalls::TestCannotFillWithUpdateFeeForFilledTrade(element) => {
                    element.encode()
                }
                TradeTestCalls::TestCannotFillWithUpdateFeePastMax(element) => element.encode(),
                TradeTestCalls::TestCannotTradeAboveMaxFee(element) => element.encode(),
                TradeTestCalls::TestCannotTradeIfNoBalance(element) => element.encode(),
                TradeTestCalls::TestCannotTradeNonWhitelistedToken(element) => element.encode(),
                TradeTestCalls::TestCannotTradeSameToken(element) => element.encode(),
                TradeTestCalls::TestCannotTradeToBlackHole(element) => element.encode(),
                TradeTestCalls::TestCannotTradeZeroAmount(element) => element.encode(),
                TradeTestCalls::TestCannotUpdateFeeForFilledTrade(element) => element.encode(),
                TradeTestCalls::TestCannotUpdateFeePastMax(element) => element.encode(),
                TradeTestCalls::TestCannotUpdateFeeWithInvalidSignature(element) => {
                    element.encode()
                }
                TradeTestCalls::TestFillTrade(element) => element.encode(),
                TradeTestCalls::TestFillTradeWithUpdatedFee(element) => element.encode(),
                TradeTestCalls::TestRequestTrade(element) => element.encode(),
                TradeTestCalls::TestUpdateFee(element) => element.encode(),
                TradeTestCalls::Tip(element) => element.encode(),
                TradeTestCalls::Vm(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for TradeTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TradeTestCalls::IsTest(element) => element.fmt(f),
                TradeTestCalls::Bound(element) => element.fmt(f),
                TradeTestCalls::DealWithToken(element) => element.fmt(f),
                TradeTestCalls::DealWithTokenAndAdjust(element) => element.fmt(f),
                TradeTestCalls::Deal(element) => element.fmt(f),
                TradeTestCalls::DeployCodeWithArgs(element) => element.fmt(f),
                TradeTestCalls::DeployCode(element) => element.fmt(f),
                TradeTestCalls::Failed(element) => element.fmt(f),
                TradeTestCalls::Hoax0(element) => element.fmt(f),
                TradeTestCalls::Hoax2(element) => element.fmt(f),
                TradeTestCalls::Hoax3(element) => element.fmt(f),
                TradeTestCalls::Hoax4(element) => element.fmt(f),
                TradeTestCalls::Rewind(element) => element.fmt(f),
                TradeTestCalls::SetUp(element) => element.fmt(f),
                TradeTestCalls::Skip(element) => element.fmt(f),
                TradeTestCalls::StartHoax1(element) => element.fmt(f),
                TradeTestCalls::StartHoax2(element) => element.fmt(f),
                TradeTestCalls::StartHoax0(element) => element.fmt(f),
                TradeTestCalls::StartHoax4(element) => element.fmt(f),
                TradeTestCalls::TestCannotFillIfAlreadyFilled(element) => element.fmt(f),
                TradeTestCalls::TestCannotFillIfNoTokens(element) => element.fmt(f),
                TradeTestCalls::TestCannotFillTradeWithUpdateFeeWithInvalidSignature(element) => {
                    element.fmt(f)
                }
                TradeTestCalls::TestCannotFillWithUpdateFeeForFilledTrade(element) => {
                    element.fmt(f)
                }
                TradeTestCalls::TestCannotFillWithUpdateFeePastMax(element) => element.fmt(f),
                TradeTestCalls::TestCannotTradeAboveMaxFee(element) => element.fmt(f),
                TradeTestCalls::TestCannotTradeIfNoBalance(element) => element.fmt(f),
                TradeTestCalls::TestCannotTradeNonWhitelistedToken(element) => element.fmt(f),
                TradeTestCalls::TestCannotTradeSameToken(element) => element.fmt(f),
                TradeTestCalls::TestCannotTradeToBlackHole(element) => element.fmt(f),
                TradeTestCalls::TestCannotTradeZeroAmount(element) => element.fmt(f),
                TradeTestCalls::TestCannotUpdateFeeForFilledTrade(element) => element.fmt(f),
                TradeTestCalls::TestCannotUpdateFeePastMax(element) => element.fmt(f),
                TradeTestCalls::TestCannotUpdateFeeWithInvalidSignature(element) => element.fmt(f),
                TradeTestCalls::TestFillTrade(element) => element.fmt(f),
                TradeTestCalls::TestFillTradeWithUpdatedFee(element) => element.fmt(f),
                TradeTestCalls::TestRequestTrade(element) => element.fmt(f),
                TradeTestCalls::TestUpdateFee(element) => element.fmt(f),
                TradeTestCalls::Tip(element) => element.fmt(f),
                TradeTestCalls::Vm(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for TradeTestCalls {
        fn from(var: IsTestCall) -> Self {
            TradeTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<BoundCall> for TradeTestCalls {
        fn from(var: BoundCall) -> Self {
            TradeTestCalls::Bound(var)
        }
    }
    impl ::std::convert::From<DealWithTokenCall> for TradeTestCalls {
        fn from(var: DealWithTokenCall) -> Self {
            TradeTestCalls::DealWithToken(var)
        }
    }
    impl ::std::convert::From<DealWithTokenAndAdjustCall> for TradeTestCalls {
        fn from(var: DealWithTokenAndAdjustCall) -> Self {
            TradeTestCalls::DealWithTokenAndAdjust(var)
        }
    }
    impl ::std::convert::From<DealCall> for TradeTestCalls {
        fn from(var: DealCall) -> Self {
            TradeTestCalls::Deal(var)
        }
    }
    impl ::std::convert::From<DeployCodeWithArgsCall> for TradeTestCalls {
        fn from(var: DeployCodeWithArgsCall) -> Self {
            TradeTestCalls::DeployCodeWithArgs(var)
        }
    }
    impl ::std::convert::From<DeployCodeCall> for TradeTestCalls {
        fn from(var: DeployCodeCall) -> Self {
            TradeTestCalls::DeployCode(var)
        }
    }
    impl ::std::convert::From<FailedCall> for TradeTestCalls {
        fn from(var: FailedCall) -> Self {
            TradeTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<Hoax0Call> for TradeTestCalls {
        fn from(var: Hoax0Call) -> Self {
            TradeTestCalls::Hoax0(var)
        }
    }
    impl ::std::convert::From<Hoax2Call> for TradeTestCalls {
        fn from(var: Hoax2Call) -> Self {
            TradeTestCalls::Hoax2(var)
        }
    }
    impl ::std::convert::From<Hoax3Call> for TradeTestCalls {
        fn from(var: Hoax3Call) -> Self {
            TradeTestCalls::Hoax3(var)
        }
    }
    impl ::std::convert::From<Hoax4Call> for TradeTestCalls {
        fn from(var: Hoax4Call) -> Self {
            TradeTestCalls::Hoax4(var)
        }
    }
    impl ::std::convert::From<RewindCall> for TradeTestCalls {
        fn from(var: RewindCall) -> Self {
            TradeTestCalls::Rewind(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for TradeTestCalls {
        fn from(var: SetUpCall) -> Self {
            TradeTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<SkipCall> for TradeTestCalls {
        fn from(var: SkipCall) -> Self {
            TradeTestCalls::Skip(var)
        }
    }
    impl ::std::convert::From<StartHoax1Call> for TradeTestCalls {
        fn from(var: StartHoax1Call) -> Self {
            TradeTestCalls::StartHoax1(var)
        }
    }
    impl ::std::convert::From<StartHoax2Call> for TradeTestCalls {
        fn from(var: StartHoax2Call) -> Self {
            TradeTestCalls::StartHoax2(var)
        }
    }
    impl ::std::convert::From<StartHoax0Call> for TradeTestCalls {
        fn from(var: StartHoax0Call) -> Self {
            TradeTestCalls::StartHoax0(var)
        }
    }
    impl ::std::convert::From<StartHoax4Call> for TradeTestCalls {
        fn from(var: StartHoax4Call) -> Self {
            TradeTestCalls::StartHoax4(var)
        }
    }
    impl ::std::convert::From<TestCannotFillIfAlreadyFilledCall> for TradeTestCalls {
        fn from(var: TestCannotFillIfAlreadyFilledCall) -> Self {
            TradeTestCalls::TestCannotFillIfAlreadyFilled(var)
        }
    }
    impl ::std::convert::From<TestCannotFillIfNoTokensCall> for TradeTestCalls {
        fn from(var: TestCannotFillIfNoTokensCall) -> Self {
            TradeTestCalls::TestCannotFillIfNoTokens(var)
        }
    }
    impl ::std::convert::From<TestCannotFillTradeWithUpdateFeeWithInvalidSignatureCall>
        for TradeTestCalls
    {
        fn from(var: TestCannotFillTradeWithUpdateFeeWithInvalidSignatureCall) -> Self {
            TradeTestCalls::TestCannotFillTradeWithUpdateFeeWithInvalidSignature(var)
        }
    }
    impl ::std::convert::From<TestCannotFillWithUpdateFeeForFilledTradeCall> for TradeTestCalls {
        fn from(var: TestCannotFillWithUpdateFeeForFilledTradeCall) -> Self {
            TradeTestCalls::TestCannotFillWithUpdateFeeForFilledTrade(var)
        }
    }
    impl ::std::convert::From<TestCannotFillWithUpdateFeePastMaxCall> for TradeTestCalls {
        fn from(var: TestCannotFillWithUpdateFeePastMaxCall) -> Self {
            TradeTestCalls::TestCannotFillWithUpdateFeePastMax(var)
        }
    }
    impl ::std::convert::From<TestCannotTradeAboveMaxFeeCall> for TradeTestCalls {
        fn from(var: TestCannotTradeAboveMaxFeeCall) -> Self {
            TradeTestCalls::TestCannotTradeAboveMaxFee(var)
        }
    }
    impl ::std::convert::From<TestCannotTradeIfNoBalanceCall> for TradeTestCalls {
        fn from(var: TestCannotTradeIfNoBalanceCall) -> Self {
            TradeTestCalls::TestCannotTradeIfNoBalance(var)
        }
    }
    impl ::std::convert::From<TestCannotTradeNonWhitelistedTokenCall> for TradeTestCalls {
        fn from(var: TestCannotTradeNonWhitelistedTokenCall) -> Self {
            TradeTestCalls::TestCannotTradeNonWhitelistedToken(var)
        }
    }
    impl ::std::convert::From<TestCannotTradeSameTokenCall> for TradeTestCalls {
        fn from(var: TestCannotTradeSameTokenCall) -> Self {
            TradeTestCalls::TestCannotTradeSameToken(var)
        }
    }
    impl ::std::convert::From<TestCannotTradeToBlackHoleCall> for TradeTestCalls {
        fn from(var: TestCannotTradeToBlackHoleCall) -> Self {
            TradeTestCalls::TestCannotTradeToBlackHole(var)
        }
    }
    impl ::std::convert::From<TestCannotTradeZeroAmountCall> for TradeTestCalls {
        fn from(var: TestCannotTradeZeroAmountCall) -> Self {
            TradeTestCalls::TestCannotTradeZeroAmount(var)
        }
    }
    impl ::std::convert::From<TestCannotUpdateFeeForFilledTradeCall> for TradeTestCalls {
        fn from(var: TestCannotUpdateFeeForFilledTradeCall) -> Self {
            TradeTestCalls::TestCannotUpdateFeeForFilledTrade(var)
        }
    }
    impl ::std::convert::From<TestCannotUpdateFeePastMaxCall> for TradeTestCalls {
        fn from(var: TestCannotUpdateFeePastMaxCall) -> Self {
            TradeTestCalls::TestCannotUpdateFeePastMax(var)
        }
    }
    impl ::std::convert::From<TestCannotUpdateFeeWithInvalidSignatureCall> for TradeTestCalls {
        fn from(var: TestCannotUpdateFeeWithInvalidSignatureCall) -> Self {
            TradeTestCalls::TestCannotUpdateFeeWithInvalidSignature(var)
        }
    }
    impl ::std::convert::From<TestFillTradeCall> for TradeTestCalls {
        fn from(var: TestFillTradeCall) -> Self {
            TradeTestCalls::TestFillTrade(var)
        }
    }
    impl ::std::convert::From<TestFillTradeWithUpdatedFeeCall> for TradeTestCalls {
        fn from(var: TestFillTradeWithUpdatedFeeCall) -> Self {
            TradeTestCalls::TestFillTradeWithUpdatedFee(var)
        }
    }
    impl ::std::convert::From<TestRequestTradeCall> for TradeTestCalls {
        fn from(var: TestRequestTradeCall) -> Self {
            TradeTestCalls::TestRequestTrade(var)
        }
    }
    impl ::std::convert::From<TestUpdateFeeCall> for TradeTestCalls {
        fn from(var: TestUpdateFeeCall) -> Self {
            TradeTestCalls::TestUpdateFee(var)
        }
    }
    impl ::std::convert::From<TipCall> for TradeTestCalls {
        fn from(var: TipCall) -> Self {
            TradeTestCalls::Tip(var)
        }
    }
    impl ::std::convert::From<VmCall> for TradeTestCalls {
        fn from(var: VmCall) -> Self {
            TradeTestCalls::Vm(var)
        }
    }
}
